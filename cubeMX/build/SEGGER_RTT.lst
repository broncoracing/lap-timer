ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"SEGGER_RTT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._GetAvailWriteSpace,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_GetAvailWriteSpace:
  26              	.LVL0:
  27              	.LFB4:
  28              		.file 1 "Core/Src/SEGGER_RTT.c"
   1:Core/Src/SEGGER_RTT.c **** /*********************************************************************
   2:Core/Src/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:Core/Src/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:Core/Src/SEGGER_RTT.c **** **********************************************************************
   5:Core/Src/SEGGER_RTT.c **** *                                                                    *
   6:Core/Src/SEGGER_RTT.c **** *            (c) 1995 - 2019 SEGGER Microcontroller GmbH             *
   7:Core/Src/SEGGER_RTT.c **** *                                                                    *
   8:Core/Src/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:Core/Src/SEGGER_RTT.c **** *                                                                    *
  10:Core/Src/SEGGER_RTT.c **** **********************************************************************
  11:Core/Src/SEGGER_RTT.c **** *                                                                    *
  12:Core/Src/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:Core/Src/SEGGER_RTT.c **** *                                                                    *
  14:Core/Src/SEGGER_RTT.c **** **********************************************************************
  15:Core/Src/SEGGER_RTT.c **** *                                                                    *
  16:Core/Src/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:Core/Src/SEGGER_RTT.c **** *                                                                    *
  18:Core/Src/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:Core/Src/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:Core/Src/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:Core/Src/SEGGER_RTT.c **** *                                                                    *
  22:Core/Src/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:Core/Src/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:Core/Src/SEGGER_RTT.c **** * condition is met:                                                  *
  25:Core/Src/SEGGER_RTT.c **** *                                                                    *
  26:Core/Src/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:Core/Src/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:Core/Src/SEGGER_RTT.c **** *                                                                    *
  29:Core/Src/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  30:Core/Src/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 2


  31:Core/Src/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:Core/Src/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:Core/Src/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:Core/Src/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:Core/Src/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:Core/Src/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:Core/Src/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:Core/Src/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:Core/Src/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:Core/Src/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:Core/Src/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:Core/Src/SEGGER_RTT.c **** *                                                                    *
  43:Core/Src/SEGGER_RTT.c **** **********************************************************************
  44:Core/Src/SEGGER_RTT.c **** *                                                                    *
  45:Core/Src/SEGGER_RTT.c **** *       RTT version: 6.52                                           *
  46:Core/Src/SEGGER_RTT.c **** *                                                                    *
  47:Core/Src/SEGGER_RTT.c **** **********************************************************************
  48:Core/Src/SEGGER_RTT.c **** 
  49:Core/Src/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  50:Core/Src/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  51:Core/Src/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  52:Core/Src/SEGGER_RTT.c ****           allows real-time communication on targets which support
  53:Core/Src/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  54:Core/Src/SEGGER_RTT.c **** Revision: $Rev: 14765 $
  55:Core/Src/SEGGER_RTT.c **** 
  56:Core/Src/SEGGER_RTT.c **** Additional information:
  57:Core/Src/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  58:Core/Src/SEGGER_RTT.c ****           H->T    Host to target communication
  59:Core/Src/SEGGER_RTT.c ****           T->H    Target to host communication
  60:Core/Src/SEGGER_RTT.c **** 
  61:Core/Src/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  62:Core/Src/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  63:Core/Src/SEGGER_RTT.c **** 
  64:Core/Src/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  65:Core/Src/SEGGER_RTT.c **** 
  66:Core/Src/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  67:Core/Src/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  68:Core/Src/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  69:Core/Src/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  70:Core/Src/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  71:Core/Src/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  72:Core/Src/SEGGER_RTT.c **** 
  73:Core/Src/SEGGER_RTT.c **** 
  74:Core/Src/SEGGER_RTT.c **** ----------------------------------------------------------------------
  75:Core/Src/SEGGER_RTT.c **** */
  76:Core/Src/SEGGER_RTT.c **** 
  77:Core/Src/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  78:Core/Src/SEGGER_RTT.c **** 
  79:Core/Src/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  80:Core/Src/SEGGER_RTT.c **** 
  81:Core/Src/SEGGER_RTT.c **** /*********************************************************************
  82:Core/Src/SEGGER_RTT.c **** *
  83:Core/Src/SEGGER_RTT.c **** *       Configuration, default values
  84:Core/Src/SEGGER_RTT.c **** *
  85:Core/Src/SEGGER_RTT.c **** **********************************************************************
  86:Core/Src/SEGGER_RTT.c **** */
  87:Core/Src/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 3


  88:Core/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
  89:Core/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
  90:Core/Src/SEGGER_RTT.c **** #endif
  91:Core/Src/SEGGER_RTT.c **** 
  92:Core/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
  93:Core/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
  94:Core/Src/SEGGER_RTT.c **** #endif
  95:Core/Src/SEGGER_RTT.c **** 
  96:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
  97:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
  98:Core/Src/SEGGER_RTT.c **** #endif
  99:Core/Src/SEGGER_RTT.c **** 
 100:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 101:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 102:Core/Src/SEGGER_RTT.c **** #endif
 103:Core/Src/SEGGER_RTT.c **** 
 104:Core/Src/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 105:Core/Src/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 106:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 107:Core/Src/SEGGER_RTT.c ****   #endif
 108:Core/Src/SEGGER_RTT.c **** #endif
 109:Core/Src/SEGGER_RTT.c **** 
 110:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 111:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            0
 112:Core/Src/SEGGER_RTT.c **** #endif
 113:Core/Src/SEGGER_RTT.c **** 
 114:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 115:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     0
 116:Core/Src/SEGGER_RTT.c **** #endif
 117:Core/Src/SEGGER_RTT.c **** 
 118:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 119:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 120:Core/Src/SEGGER_RTT.c **** #endif
 121:Core/Src/SEGGER_RTT.c **** 
 122:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 123:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 124:Core/Src/SEGGER_RTT.c **** #endif
 125:Core/Src/SEGGER_RTT.c **** 
 126:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 127:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 128:Core/Src/SEGGER_RTT.c **** #endif
 129:Core/Src/SEGGER_RTT.c **** 
 130:Core/Src/SEGGER_RTT.c **** #ifndef   STRLEN
 131:Core/Src/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 132:Core/Src/SEGGER_RTT.c **** #endif
 133:Core/Src/SEGGER_RTT.c **** 
 134:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 135:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 136:Core/Src/SEGGER_RTT.c **** #endif
 137:Core/Src/SEGGER_RTT.c **** 
 138:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 139:Core/Src/SEGGER_RTT.c ****   #ifdef  MEMCPY
 140:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 141:Core/Src/SEGGER_RTT.c ****   #else
 142:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 143:Core/Src/SEGGER_RTT.c ****   #endif
 144:Core/Src/SEGGER_RTT.c **** #endif
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 4


 145:Core/Src/SEGGER_RTT.c **** 
 146:Core/Src/SEGGER_RTT.c **** #ifndef   MIN
 147:Core/Src/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 148:Core/Src/SEGGER_RTT.c **** #endif
 149:Core/Src/SEGGER_RTT.c **** 
 150:Core/Src/SEGGER_RTT.c **** #ifndef   MAX
 151:Core/Src/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 152:Core/Src/SEGGER_RTT.c **** #endif
 153:Core/Src/SEGGER_RTT.c **** //
 154:Core/Src/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 155:Core/Src/SEGGER_RTT.c **** //
 156:Core/Src/SEGGER_RTT.c **** #ifndef NULL
 157:Core/Src/SEGGER_RTT.c ****   #define NULL 0
 158:Core/Src/SEGGER_RTT.c **** #endif
 159:Core/Src/SEGGER_RTT.c **** 
 160:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 161:Core/Src/SEGGER_RTT.c **** *
 162:Core/Src/SEGGER_RTT.c **** *       Defines, fixed
 163:Core/Src/SEGGER_RTT.c **** *
 164:Core/Src/SEGGER_RTT.c **** **********************************************************************
 165:Core/Src/SEGGER_RTT.c **** */
 166:Core/Src/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 167:Core/Src/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 168:Core/Src/SEGGER_RTT.c **** #endif
 169:Core/Src/SEGGER_RTT.c **** 
 170:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 171:Core/Src/SEGGER_RTT.c ****   #if (defined __GNUC__)
 172:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 173:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 174:Core/Src/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 175:Core/Src/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 176:Core/Src/SEGGER_RTT.c ****                                   Var
 177:Core/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 178:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 179:Core/Src/SEGGER_RTT.c ****   #else
 180:Core/Src/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 181:Core/Src/SEGGER_RTT.c ****   #endif
 182:Core/Src/SEGGER_RTT.c **** #else
 183:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 184:Core/Src/SEGGER_RTT.c **** #endif
 185:Core/Src/SEGGER_RTT.c **** 
 186:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 187:Core/Src/SEGGER_RTT.c ****   #if (defined __GNUC__)
 188:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 189:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 190:Core/Src/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 191:Core/Src/SEGGER_RTT.c ****                                         Var
 192:Core/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 193:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 194:Core/Src/SEGGER_RTT.c ****   #else
 195:Core/Src/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 196:Core/Src/SEGGER_RTT.c ****   #endif
 197:Core/Src/SEGGER_RTT.c **** #else
 198:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 199:Core/Src/SEGGER_RTT.c **** #endif
 200:Core/Src/SEGGER_RTT.c **** 
 201:Core/Src/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 5


 202:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 203:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 204:Core/Src/SEGGER_RTT.c **** #else
 205:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 206:Core/Src/SEGGER_RTT.c **** #endif
 207:Core/Src/SEGGER_RTT.c **** 
 208:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 209:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 210:Core/Src/SEGGER_RTT.c **** #else
 211:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 212:Core/Src/SEGGER_RTT.c **** #endif
 213:Core/Src/SEGGER_RTT.c **** 
 214:Core/Src/SEGGER_RTT.c **** 
 215:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 216:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 217:Core/Src/SEGGER_RTT.c **** #else
 218:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 219:Core/Src/SEGGER_RTT.c **** #endif
 220:Core/Src/SEGGER_RTT.c **** 
 221:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 222:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 223:Core/Src/SEGGER_RTT.c **** #else
 224:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 225:Core/Src/SEGGER_RTT.c **** #endif
 226:Core/Src/SEGGER_RTT.c **** 
 227:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 228:Core/Src/SEGGER_RTT.c **** *
 229:Core/Src/SEGGER_RTT.c **** *       Static const data
 230:Core/Src/SEGGER_RTT.c **** *
 231:Core/Src/SEGGER_RTT.c **** **********************************************************************
 232:Core/Src/SEGGER_RTT.c **** */
 233:Core/Src/SEGGER_RTT.c **** 
 234:Core/Src/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 235:Core/Src/SEGGER_RTT.c **** 
 236:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 237:Core/Src/SEGGER_RTT.c **** *
 238:Core/Src/SEGGER_RTT.c **** *       Static data
 239:Core/Src/SEGGER_RTT.c **** *
 240:Core/Src/SEGGER_RTT.c **** **********************************************************************
 241:Core/Src/SEGGER_RTT.c **** */
 242:Core/Src/SEGGER_RTT.c **** //
 243:Core/Src/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 244:Core/Src/SEGGER_RTT.c **** //
 245:Core/Src/SEGGER_RTT.c **** SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 246:Core/Src/SEGGER_RTT.c **** 
 247:Core/Src/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]));
 248:Core/Src/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]))
 249:Core/Src/SEGGER_RTT.c **** 
 250:Core/Src/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 251:Core/Src/SEGGER_RTT.c **** 
 252:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 253:Core/Src/SEGGER_RTT.c **** *
 254:Core/Src/SEGGER_RTT.c **** *       Static functions
 255:Core/Src/SEGGER_RTT.c **** *
 256:Core/Src/SEGGER_RTT.c **** **********************************************************************
 257:Core/Src/SEGGER_RTT.c **** */
 258:Core/Src/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 6


 259:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 260:Core/Src/SEGGER_RTT.c **** *
 261:Core/Src/SEGGER_RTT.c **** *       _DoInit()
 262:Core/Src/SEGGER_RTT.c **** *
 263:Core/Src/SEGGER_RTT.c **** *  Function description
 264:Core/Src/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 265:Core/Src/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 266:Core/Src/SEGGER_RTT.c **** *
 267:Core/Src/SEGGER_RTT.c **** */
 268:Core/Src/SEGGER_RTT.c **** #define INIT()  do {                                            \
 269:Core/Src/SEGGER_RTT.c ****                   if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
 270:Core/Src/SEGGER_RTT.c ****                 } while (0)
 271:Core/Src/SEGGER_RTT.c **** static void _DoInit(void) {
 272:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_CB* p;
 273:Core/Src/SEGGER_RTT.c ****   //
 274:Core/Src/SEGGER_RTT.c ****   // Initialize control block
 275:Core/Src/SEGGER_RTT.c ****   //
 276:Core/Src/SEGGER_RTT.c ****   p = &_SEGGER_RTT;
 277:Core/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 278:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 279:Core/Src/SEGGER_RTT.c ****   //
 280:Core/Src/SEGGER_RTT.c ****   // Initialize up buffer 0
 281:Core/Src/SEGGER_RTT.c ****   //
 282:Core/Src/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 283:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 284:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 285:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 286:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 287:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 288:Core/Src/SEGGER_RTT.c ****   //
 289:Core/Src/SEGGER_RTT.c ****   // Initialize down buffer 0
 290:Core/Src/SEGGER_RTT.c ****   //
 291:Core/Src/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 292:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 293:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 294:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 295:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 296:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 297:Core/Src/SEGGER_RTT.c ****   //
 298:Core/Src/SEGGER_RTT.c ****   // Finish initialization of the control block.
 299:Core/Src/SEGGER_RTT.c ****   // Copy Id string in three steps to make sure "SEGGER RTT" is not found
 300:Core/Src/SEGGER_RTT.c ****   // in initializer memory (usually flash) by J-Link
 301:Core/Src/SEGGER_RTT.c ****   //
 302:Core/Src/SEGGER_RTT.c ****   strcpy(&p->acID[7], "RTT");
 303:Core/Src/SEGGER_RTT.c ****   strcpy(&p->acID[0], "SEGGER");
 304:Core/Src/SEGGER_RTT.c ****   p->acID[6] = ' ';
 305:Core/Src/SEGGER_RTT.c **** }
 306:Core/Src/SEGGER_RTT.c **** 
 307:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 308:Core/Src/SEGGER_RTT.c **** *
 309:Core/Src/SEGGER_RTT.c **** *       _WriteBlocking()
 310:Core/Src/SEGGER_RTT.c **** *
 311:Core/Src/SEGGER_RTT.c **** *  Function description
 312:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 313:Core/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 314:Core/Src/SEGGER_RTT.c **** *    read by the host.
 315:Core/Src/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 7


 316:Core/Src/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 317:Core/Src/SEGGER_RTT.c **** *
 318:Core/Src/SEGGER_RTT.c **** *  Parameters
 319:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 320:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 321:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 322:Core/Src/SEGGER_RTT.c **** *
 323:Core/Src/SEGGER_RTT.c **** *  Return value
 324:Core/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 325:Core/Src/SEGGER_RTT.c **** */
 326:Core/Src/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 327:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 328:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 329:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 330:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 331:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 332:Core/Src/SEGGER_RTT.c ****   char*    pDst;
 333:Core/Src/SEGGER_RTT.c **** #endif
 334:Core/Src/SEGGER_RTT.c ****   //
 335:Core/Src/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 336:Core/Src/SEGGER_RTT.c ****   //
 337:Core/Src/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 338:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 339:Core/Src/SEGGER_RTT.c ****   do {
 340:Core/Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 341:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 342:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 343:Core/Src/SEGGER_RTT.c ****     } else {
 344:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 345:Core/Src/SEGGER_RTT.c ****     }
 346:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 347:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 348:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 349:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 350:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 351:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 352:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 353:Core/Src/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 354:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 355:Core/Src/SEGGER_RTT.c ****     };
 356:Core/Src/SEGGER_RTT.c **** #else
 357:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 358:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 359:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 360:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 361:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 362:Core/Src/SEGGER_RTT.c **** #endif
 363:Core/Src/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 364:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 365:Core/Src/SEGGER_RTT.c ****     }
 366:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 367:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 368:Core/Src/SEGGER_RTT.c ****   //
 369:Core/Src/SEGGER_RTT.c ****   return NumBytesWritten;
 370:Core/Src/SEGGER_RTT.c **** }
 371:Core/Src/SEGGER_RTT.c **** 
 372:Core/Src/SEGGER_RTT.c **** /*********************************************************************
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 8


 373:Core/Src/SEGGER_RTT.c **** *
 374:Core/Src/SEGGER_RTT.c **** *       _WriteNoCheck()
 375:Core/Src/SEGGER_RTT.c **** *
 376:Core/Src/SEGGER_RTT.c **** *  Function description
 377:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 378:Core/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 379:Core/Src/SEGGER_RTT.c **** *    read by the host.
 380:Core/Src/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 381:Core/Src/SEGGER_RTT.c **** *
 382:Core/Src/SEGGER_RTT.c **** *  Parameters
 383:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 384:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 385:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 386:Core/Src/SEGGER_RTT.c **** *
 387:Core/Src/SEGGER_RTT.c **** *  Notes
 388:Core/Src/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 389:Core/Src/SEGGER_RTT.c **** */
 390:Core/Src/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 391:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 392:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 393:Core/Src/SEGGER_RTT.c ****   unsigned Rem;
 394:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 395:Core/Src/SEGGER_RTT.c ****   char*    pDst;
 396:Core/Src/SEGGER_RTT.c **** #endif
 397:Core/Src/SEGGER_RTT.c **** 
 398:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 399:Core/Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 400:Core/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 401:Core/Src/SEGGER_RTT.c ****     //
 402:Core/Src/SEGGER_RTT.c ****     // All data fits before wrap around
 403:Core/Src/SEGGER_RTT.c ****     //
 404:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 405:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 406:Core/Src/SEGGER_RTT.c ****     WrOff += NumBytes;
 407:Core/Src/SEGGER_RTT.c ****     while (NumBytes--) {
 408:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 409:Core/Src/SEGGER_RTT.c ****     };
 410:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 411:Core/Src/SEGGER_RTT.c **** #else
 412:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 413:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 414:Core/Src/SEGGER_RTT.c **** #endif
 415:Core/Src/SEGGER_RTT.c ****   } else {
 416:Core/Src/SEGGER_RTT.c ****     //
 417:Core/Src/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 418:Core/Src/SEGGER_RTT.c ****     //
 419:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 420:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 421:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 422:Core/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 423:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 424:Core/Src/SEGGER_RTT.c ****     };
 425:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer;
 426:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 427:Core/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 428:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 429:Core/Src/SEGGER_RTT.c ****     };
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 9


 430:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 431:Core/Src/SEGGER_RTT.c **** #else
 432:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 433:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 434:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 435:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 436:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 437:Core/Src/SEGGER_RTT.c **** #endif
 438:Core/Src/SEGGER_RTT.c ****   }
 439:Core/Src/SEGGER_RTT.c **** }
 440:Core/Src/SEGGER_RTT.c **** 
 441:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 442:Core/Src/SEGGER_RTT.c **** *
 443:Core/Src/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 444:Core/Src/SEGGER_RTT.c **** *
 445:Core/Src/SEGGER_RTT.c **** *  Function description
 446:Core/Src/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 447:Core/Src/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 448:Core/Src/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 449:Core/Src/SEGGER_RTT.c **** *
 450:Core/Src/SEGGER_RTT.c **** *  Parameters
 451:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 452:Core/Src/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 453:Core/Src/SEGGER_RTT.c **** */
 454:Core/Src/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 455:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 456:Core/Src/SEGGER_RTT.c **** 
 457:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 458:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 459:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 460:Core/Src/SEGGER_RTT.c **** }
 461:Core/Src/SEGGER_RTT.c **** 
 462:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 463:Core/Src/SEGGER_RTT.c **** *
 464:Core/Src/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 465:Core/Src/SEGGER_RTT.c **** *
 466:Core/Src/SEGGER_RTT.c **** *  Function description
 467:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 468:Core/Src/SEGGER_RTT.c **** *    buffer without blocking.
 469:Core/Src/SEGGER_RTT.c **** *
 470:Core/Src/SEGGER_RTT.c **** *  Parameters
 471:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 472:Core/Src/SEGGER_RTT.c **** *
 473:Core/Src/SEGGER_RTT.c **** *  Return value
 474:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 475:Core/Src/SEGGER_RTT.c **** */
 476:Core/Src/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
  29              		.loc 1 476 66 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 477:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
  34              		.loc 1 477 3 view .LVU1
 478:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
  35              		.loc 1 478 3 view .LVU2
 479:Core/Src/SEGGER_RTT.c ****   unsigned r;
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 10


  36              		.loc 1 479 3 view .LVU3
 480:Core/Src/SEGGER_RTT.c ****   //
 481:Core/Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 482:Core/Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 483:Core/Src/SEGGER_RTT.c ****   //
 484:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
  37              		.loc 1 484 3 view .LVU4
  38              		.loc 1 484 9 is_stmt 0 view .LVU5
  39 0000 0369     		ldr	r3, [r0, #16]
  40              	.LVL1:
 485:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
  41              		.loc 1 485 3 is_stmt 1 view .LVU6
  42              		.loc 1 485 9 is_stmt 0 view .LVU7
  43 0002 C268     		ldr	r2, [r0, #12]
  44              	.LVL2:
 486:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
  45              		.loc 1 486 3 is_stmt 1 view .LVU8
  46              		.loc 1 486 6 is_stmt 0 view .LVU9
  47 0004 9342     		cmp	r3, r2
  48 0006 04D8     		bhi	.L2
 487:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
  49              		.loc 1 487 5 is_stmt 1 view .LVU10
  50              		.loc 1 487 14 is_stmt 0 view .LVU11
  51 0008 8068     		ldr	r0, [r0, #8]
  52              	.LVL3:
  53              		.loc 1 487 34 view .LVU12
  54 000a 801A     		subs	r0, r0, r2
  55              		.loc 1 487 42 view .LVU13
  56 000c 0344     		add	r3, r3, r0
  57              	.LVL4:
  58              		.loc 1 487 7 view .LVU14
  59 000e 581E     		subs	r0, r3, #1
  60              	.LVL5:
  61              		.loc 1 487 7 view .LVU15
  62 0010 7047     		bx	lr
  63              	.LVL6:
  64              	.L2:
 488:Core/Src/SEGGER_RTT.c ****   } else {
 489:Core/Src/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
  65              		.loc 1 489 5 is_stmt 1 view .LVU16
  66              		.loc 1 489 15 is_stmt 0 view .LVU17
  67 0012 9B1A     		subs	r3, r3, r2
  68              	.LVL7:
  69              		.loc 1 489 7 view .LVU18
  70 0014 581E     		subs	r0, r3, #1
  71              	.LVL8:
 490:Core/Src/SEGGER_RTT.c ****   }
 491:Core/Src/SEGGER_RTT.c ****   return r;
  72              		.loc 1 491 3 is_stmt 1 view .LVU19
 492:Core/Src/SEGGER_RTT.c **** }
  73              		.loc 1 492 1 is_stmt 0 view .LVU20
  74 0016 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE4:
  78              		.section	.text._WriteNoCheck,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 11


  81              		.thumb
  82              		.thumb_func
  83              		.fpu fpv4-sp-d16
  85              	_WriteNoCheck:
  86              	.LVL9:
  87              	.LFB2:
 390:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  88              		.loc 1 390 94 is_stmt 1 view -0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
 390:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  92              		.loc 1 390 94 is_stmt 0 view .LVU22
  93 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  94              	.LCFI0:
  95              		.cfi_def_cfa_offset 32
  96              		.cfi_offset 3, -32
  97              		.cfi_offset 4, -28
  98              		.cfi_offset 5, -24
  99              		.cfi_offset 6, -20
 100              		.cfi_offset 7, -16
 101              		.cfi_offset 8, -12
 102              		.cfi_offset 9, -8
 103              		.cfi_offset 14, -4
 104 0004 0446     		mov	r4, r0
 105 0006 8846     		mov	r8, r1
 106 0008 1646     		mov	r6, r2
 391:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 107              		.loc 1 391 3 is_stmt 1 view .LVU23
 392:Core/Src/SEGGER_RTT.c ****   unsigned Rem;
 108              		.loc 1 392 3 view .LVU24
 393:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 109              		.loc 1 393 3 view .LVU25
 398:Core/Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 110              		.loc 1 398 3 view .LVU26
 398:Core/Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 111              		.loc 1 398 9 is_stmt 0 view .LVU27
 112 000a C568     		ldr	r5, [r0, #12]
 113              	.LVL10:
 399:Core/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 114              		.loc 1 399 3 is_stmt 1 view .LVU28
 399:Core/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 115              		.loc 1 399 14 is_stmt 0 view .LVU29
 116 000c 8768     		ldr	r7, [r0, #8]
 399:Core/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 117              		.loc 1 399 7 view .LVU30
 118 000e A7EB0509 		sub	r9, r7, r5
 119              	.LVL11:
 400:Core/Src/SEGGER_RTT.c ****     //
 120              		.loc 1 400 3 is_stmt 1 view .LVU31
 400:Core/Src/SEGGER_RTT.c ****     //
 121              		.loc 1 400 6 is_stmt 0 view .LVU32
 122 0012 9145     		cmp	r9, r2
 123 0014 07D9     		bls	.L5
 412:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 124              		.loc 1 412 5 is_stmt 1 view .LVU33
 125 0016 4068     		ldr	r0, [r0, #4]
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 12


 126              	.LVL12:
 412:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 127              		.loc 1 412 5 is_stmt 0 view .LVU34
 128 0018 2844     		add	r0, r0, r5
 129 001a FFF7FEFF 		bl	memcpy
 130              	.LVL13:
 413:Core/Src/SEGGER_RTT.c **** #endif
 131              		.loc 1 413 5 is_stmt 1 view .LVU35
 413:Core/Src/SEGGER_RTT.c **** #endif
 132              		.loc 1 413 26 is_stmt 0 view .LVU36
 133 001e 3544     		add	r5, r5, r6
 134              	.LVL14:
 413:Core/Src/SEGGER_RTT.c **** #endif
 135              		.loc 1 413 18 view .LVU37
 136 0020 E560     		str	r5, [r4, #12]
 137              	.L4:
 439:Core/Src/SEGGER_RTT.c **** 
 138              		.loc 1 439 1 view .LVU38
 139 0022 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 140              	.LVL15:
 141              	.L5:
 432:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 142              		.loc 1 432 5 is_stmt 1 view .LVU39
 433:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 143              		.loc 1 433 5 view .LVU40
 144 0026 4068     		ldr	r0, [r0, #4]
 145              	.LVL16:
 433:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 146              		.loc 1 433 5 is_stmt 0 view .LVU41
 147 0028 4A46     		mov	r2, r9
 148              	.LVL17:
 433:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 149              		.loc 1 433 5 view .LVU42
 150 002a 2844     		add	r0, r0, r5
 151 002c FFF7FEFF 		bl	memcpy
 152              	.LVL18:
 434:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 153              		.loc 1 434 5 is_stmt 1 view .LVU43
 434:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 154              		.loc 1 434 20 is_stmt 0 view .LVU44
 155 0030 ED1B     		subs	r5, r5, r7
 156              	.LVL19:
 434:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 157              		.loc 1 434 20 view .LVU45
 158 0032 3544     		add	r5, r5, r6
 159              	.LVL20:
 435:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 160              		.loc 1 435 5 is_stmt 1 view .LVU46
 161 0034 2A46     		mov	r2, r5
 162 0036 08EB0901 		add	r1, r8, r9
 163 003a 6068     		ldr	r0, [r4, #4]
 164 003c FFF7FEFF 		bl	memcpy
 165              	.LVL21:
 436:Core/Src/SEGGER_RTT.c **** #endif
 166              		.loc 1 436 5 view .LVU47
 436:Core/Src/SEGGER_RTT.c **** #endif
 167              		.loc 1 436 18 is_stmt 0 view .LVU48
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 13


 168 0040 E560     		str	r5, [r4, #12]
 439:Core/Src/SEGGER_RTT.c **** 
 169              		.loc 1 439 1 view .LVU49
 170 0042 EEE7     		b	.L4
 171              		.cfi_endproc
 172              	.LFE2:
 174              		.section	.text._WriteBlocking,"ax",%progbits
 175              		.align	1
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu fpv4-sp-d16
 181              	_WriteBlocking:
 182              	.LVL22:
 183              	.LFB1:
 326:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 184              		.loc 1 326 101 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 326:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 188              		.loc 1 326 101 is_stmt 0 view .LVU51
 189 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 190              	.LCFI1:
 191              		.cfi_def_cfa_offset 32
 192              		.cfi_offset 3, -32
 193              		.cfi_offset 4, -28
 194              		.cfi_offset 5, -24
 195              		.cfi_offset 6, -20
 196              		.cfi_offset 7, -16
 197              		.cfi_offset 8, -12
 198              		.cfi_offset 9, -8
 199              		.cfi_offset 14, -4
 200 0004 0646     		mov	r6, r0
 201 0006 8846     		mov	r8, r1
 202 0008 1746     		mov	r7, r2
 327:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 203              		.loc 1 327 3 is_stmt 1 view .LVU52
 328:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 204              		.loc 1 328 3 view .LVU53
 329:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 205              		.loc 1 329 3 view .LVU54
 330:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 206              		.loc 1 330 3 view .LVU55
 337:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 207              		.loc 1 337 3 view .LVU56
 208              	.LVL23:
 338:Core/Src/SEGGER_RTT.c ****   do {
 209              		.loc 1 338 3 view .LVU57
 338:Core/Src/SEGGER_RTT.c ****   do {
 210              		.loc 1 338 9 is_stmt 0 view .LVU58
 211 000a C568     		ldr	r5, [r0, #12]
 212              	.LVL24:
 337:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 213              		.loc 1 337 19 view .LVU59
 214 000c 4FF00009 		mov	r9, #0
 215 0010 18E0     		b	.L12
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 14


 216              	.LVL25:
 217              	.L17:
 342:Core/Src/SEGGER_RTT.c ****     } else {
 218              		.loc 1 342 7 is_stmt 1 view .LVU60
 342:Core/Src/SEGGER_RTT.c ****     } else {
 219              		.loc 1 342 31 is_stmt 0 view .LVU61
 220 0012 641B     		subs	r4, r4, r5
 221              	.LVL26:
 342:Core/Src/SEGGER_RTT.c ****     } else {
 222              		.loc 1 342 23 view .LVU62
 223 0014 621E     		subs	r2, r4, #1
 224              	.LVL27:
 225              	.L10:
 346:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 226              		.loc 1 346 5 is_stmt 1 view .LVU63
 346:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 227              		.loc 1 346 23 is_stmt 0 view .LVU64
 228 0016 B368     		ldr	r3, [r6, #8]
 229 0018 5C1B     		subs	r4, r3, r5
 346:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 230              		.loc 1 346 21 view .LVU65
 231 001a 9442     		cmp	r4, r2
 232 001c 28BF     		it	cs
 233 001e 1446     		movcs	r4, r2
 234              	.LVL28:
 347:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 235              		.loc 1 347 5 is_stmt 1 view .LVU66
 347:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 236              		.loc 1 347 21 is_stmt 0 view .LVU67
 237 0020 BC42     		cmp	r4, r7
 238 0022 28BF     		it	cs
 239 0024 3C46     		movcs	r4, r7
 240              	.LVL29:
 357:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 241              		.loc 1 357 5 is_stmt 1 view .LVU68
 242 0026 7068     		ldr	r0, [r6, #4]
 243 0028 2246     		mov	r2, r4
 244 002a 4146     		mov	r1, r8
 245 002c 2844     		add	r0, r0, r5
 246 002e FFF7FEFF 		bl	memcpy
 247              	.LVL30:
 358:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 248              		.loc 1 358 5 view .LVU69
 358:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 249              		.loc 1 358 21 is_stmt 0 view .LVU70
 250 0032 A144     		add	r9, r9, r4
 251              	.LVL31:
 359:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 252              		.loc 1 359 5 is_stmt 1 view .LVU71
 359:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 253              		.loc 1 359 21 is_stmt 0 view .LVU72
 254 0034 A044     		add	r8, r8, r4
 255              	.LVL32:
 360:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 256              		.loc 1 360 5 is_stmt 1 view .LVU73
 360:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 257              		.loc 1 360 21 is_stmt 0 view .LVU74
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 15


 258 0036 3F1B     		subs	r7, r7, r4
 259              	.LVL33:
 361:Core/Src/SEGGER_RTT.c **** #endif
 260              		.loc 1 361 5 is_stmt 1 view .LVU75
 361:Core/Src/SEGGER_RTT.c **** #endif
 261              		.loc 1 361 21 is_stmt 0 view .LVU76
 262 0038 2544     		add	r5, r5, r4
 263              	.LVL34:
 363:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 264              		.loc 1 363 5 is_stmt 1 view .LVU77
 363:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 265              		.loc 1 363 23 is_stmt 0 view .LVU78
 266 003a B368     		ldr	r3, [r6, #8]
 363:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 267              		.loc 1 363 8 view .LVU79
 268 003c AB42     		cmp	r3, r5
 269 003e 09D0     		beq	.L15
 270              	.LVL35:
 271              	.L11:
 366:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 272              		.loc 1 366 5 is_stmt 1 view .LVU80
 366:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 273              		.loc 1 366 18 is_stmt 0 view .LVU81
 274 0040 F560     		str	r5, [r6, #12]
 367:Core/Src/SEGGER_RTT.c ****   //
 275              		.loc 1 367 11 is_stmt 1 view .LVU82
 367:Core/Src/SEGGER_RTT.c ****   //
 276              		.loc 1 367 3 is_stmt 0 view .LVU83
 277 0042 4FB1     		cbz	r7, .L16
 278              	.LVL36:
 279              	.L12:
 339:Core/Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 280              		.loc 1 339 3 is_stmt 1 view .LVU84
 340:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 281              		.loc 1 340 5 view .LVU85
 340:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 282              		.loc 1 340 11 is_stmt 0 view .LVU86
 283 0044 3469     		ldr	r4, [r6, #16]
 284              	.LVL37:
 341:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 285              		.loc 1 341 5 is_stmt 1 view .LVU87
 341:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 286              		.loc 1 341 8 is_stmt 0 view .LVU88
 287 0046 A542     		cmp	r5, r4
 288 0048 E3D3     		bcc	.L17
 344:Core/Src/SEGGER_RTT.c ****     }
 289              		.loc 1 344 7 is_stmt 1 view .LVU89
 344:Core/Src/SEGGER_RTT.c ****     }
 290              		.loc 1 344 30 is_stmt 0 view .LVU90
 291 004a B268     		ldr	r2, [r6, #8]
 344:Core/Src/SEGGER_RTT.c ****     }
 292              		.loc 1 344 62 view .LVU91
 293 004c 641B     		subs	r4, r4, r5
 294              	.LVL38:
 344:Core/Src/SEGGER_RTT.c ****     }
 295              		.loc 1 344 45 view .LVU92
 296 004e 1444     		add	r4, r4, r2
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 16


 344:Core/Src/SEGGER_RTT.c ****     }
 297              		.loc 1 344 23 view .LVU93
 298 0050 621E     		subs	r2, r4, #1
 299              	.LVL39:
 344:Core/Src/SEGGER_RTT.c ****     }
 300              		.loc 1 344 23 view .LVU94
 301 0052 E0E7     		b	.L10
 302              	.LVL40:
 303              	.L15:
 364:Core/Src/SEGGER_RTT.c ****     }
 304              		.loc 1 364 13 view .LVU95
 305 0054 0025     		movs	r5, #0
 306              	.LVL41:
 364:Core/Src/SEGGER_RTT.c ****     }
 307              		.loc 1 364 13 view .LVU96
 308 0056 F3E7     		b	.L11
 309              	.LVL42:
 310              	.L16:
 369:Core/Src/SEGGER_RTT.c **** }
 311              		.loc 1 369 3 is_stmt 1 view .LVU97
 370:Core/Src/SEGGER_RTT.c **** 
 312              		.loc 1 370 1 is_stmt 0 view .LVU98
 313 0058 4846     		mov	r0, r9
 314 005a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 370:Core/Src/SEGGER_RTT.c **** 
 315              		.loc 1 370 1 view .LVU99
 316              		.cfi_endproc
 317              	.LFE1:
 319              		.section	.text._PostTerminalSwitch,"ax",%progbits
 320              		.align	1
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 324              		.fpu fpv4-sp-d16
 326              	_PostTerminalSwitch:
 327              	.LVL43:
 328              	.LFB3:
 454:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 329              		.loc 1 454 88 is_stmt 1 view -0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 8
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 454:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 333              		.loc 1 454 88 is_stmt 0 view .LVU101
 334 0000 00B5     		push	{lr}
 335              	.LCFI2:
 336              		.cfi_def_cfa_offset 4
 337              		.cfi_offset 14, -4
 338 0002 83B0     		sub	sp, sp, #12
 339              	.LCFI3:
 340              		.cfi_def_cfa_offset 16
 455:Core/Src/SEGGER_RTT.c **** 
 341              		.loc 1 455 3 is_stmt 1 view .LVU102
 457:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 342              		.loc 1 457 3 view .LVU103
 457:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 343              		.loc 1 457 9 is_stmt 0 view .LVU104
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 17


 344 0004 FF23     		movs	r3, #255
 345 0006 8DF80430 		strb	r3, [sp, #4]
 458:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 346              		.loc 1 458 3 is_stmt 1 view .LVU105
 458:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 347              		.loc 1 458 23 is_stmt 0 view .LVU106
 348 000a 054B     		ldr	r3, .L20
 349 000c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 458:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 350              		.loc 1 458 9 view .LVU107
 351 000e 8DF80530 		strb	r3, [sp, #5]
 459:Core/Src/SEGGER_RTT.c **** }
 352              		.loc 1 459 3 is_stmt 1 view .LVU108
 353 0012 0222     		movs	r2, #2
 354 0014 01A9     		add	r1, sp, #4
 355              	.LVL44:
 459:Core/Src/SEGGER_RTT.c **** }
 356              		.loc 1 459 3 is_stmt 0 view .LVU109
 357 0016 FFF7FEFF 		bl	_WriteBlocking
 358              	.LVL45:
 460:Core/Src/SEGGER_RTT.c **** 
 359              		.loc 1 460 1 view .LVU110
 360 001a 03B0     		add	sp, sp, #12
 361              	.LCFI4:
 362              		.cfi_def_cfa_offset 4
 363              		@ sp needed
 364 001c 5DF804FB 		ldr	pc, [sp], #4
 365              	.L21:
 366              		.align	2
 367              	.L20:
 368 0020 00000000 		.word	.LANCHOR0
 369              		.cfi_endproc
 370              	.LFE3:
 372              		.section	.rodata._DoInit.str1.4,"aMS",%progbits,1
 373              		.align	2
 374              	.LC0:
 375 0000 5465726D 		.ascii	"Terminal\000"
 375      696E616C 
 375      00
 376 0009 000000   		.align	2
 377              	.LC1:
 378 000c 52545400 		.ascii	"RTT\000"
 379              		.align	2
 380              	.LC2:
 381 0010 53454747 		.ascii	"SEGGER\000"
 381      455200
 382              		.section	.text._DoInit,"ax",%progbits
 383              		.align	1
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 387              		.fpu fpv4-sp-d16
 389              	_DoInit:
 390              	.LFB0:
 271:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_CB* p;
 391              		.loc 1 271 27 is_stmt 1 view -0
 392              		.cfi_startproc
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 18


 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 272:Core/Src/SEGGER_RTT.c ****   //
 396              		.loc 1 272 3 view .LVU112
 276:Core/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 397              		.loc 1 276 3 view .LVU113
 398              	.LVL46:
 277:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 399              		.loc 1 277 3 view .LVU114
 277:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 400              		.loc 1 277 25 is_stmt 0 view .LVU115
 401 0000 124B     		ldr	r3, .L23
 402 0002 0322     		movs	r2, #3
 403 0004 1A61     		str	r2, [r3, #16]
 278:Core/Src/SEGGER_RTT.c ****   //
 404              		.loc 1 278 3 is_stmt 1 view .LVU116
 278:Core/Src/SEGGER_RTT.c ****   //
 405              		.loc 1 278 25 is_stmt 0 view .LVU117
 406 0006 5A61     		str	r2, [r3, #20]
 282:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 407              		.loc 1 282 3 is_stmt 1 view .LVU118
 282:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 408              		.loc 1 282 27 is_stmt 0 view .LVU119
 409 0008 1149     		ldr	r1, .L23+4
 410 000a 9961     		str	r1, [r3, #24]
 283:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 411              		.loc 1 283 3 is_stmt 1 view .LVU120
 283:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 412              		.loc 1 283 27 is_stmt 0 view .LVU121
 413 000c 114A     		ldr	r2, .L23+8
 414 000e DA61     		str	r2, [r3, #28]
 284:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 415              		.loc 1 284 3 is_stmt 1 view .LVU122
 284:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 416              		.loc 1 284 27 is_stmt 0 view .LVU123
 417 0010 4FF48062 		mov	r2, #1024
 418 0014 1A62     		str	r2, [r3, #32]
 285:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 419              		.loc 1 285 3 is_stmt 1 view .LVU124
 285:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 420              		.loc 1 285 27 is_stmt 0 view .LVU125
 421 0016 0022     		movs	r2, #0
 422 0018 9A62     		str	r2, [r3, #40]
 286:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 423              		.loc 1 286 3 is_stmt 1 view .LVU126
 286:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 424              		.loc 1 286 27 is_stmt 0 view .LVU127
 425 001a 5A62     		str	r2, [r3, #36]
 287:Core/Src/SEGGER_RTT.c ****   //
 426              		.loc 1 287 3 is_stmt 1 view .LVU128
 287:Core/Src/SEGGER_RTT.c ****   //
 427              		.loc 1 287 27 is_stmt 0 view .LVU129
 428 001c DA62     		str	r2, [r3, #44]
 291:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 429              		.loc 1 291 3 is_stmt 1 view .LVU130
 291:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 19


 430              		.loc 1 291 29 is_stmt 0 view .LVU131
 431 001e 1966     		str	r1, [r3, #96]
 292:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 432              		.loc 1 292 3 is_stmt 1 view .LVU132
 292:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 433              		.loc 1 292 29 is_stmt 0 view .LVU133
 434 0020 0D49     		ldr	r1, .L23+12
 435 0022 5966     		str	r1, [r3, #100]
 293:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 436              		.loc 1 293 3 is_stmt 1 view .LVU134
 293:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 437              		.loc 1 293 29 is_stmt 0 view .LVU135
 438 0024 1021     		movs	r1, #16
 439 0026 9966     		str	r1, [r3, #104]
 294:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 440              		.loc 1 294 3 is_stmt 1 view .LVU136
 294:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 441              		.loc 1 294 29 is_stmt 0 view .LVU137
 442 0028 1A67     		str	r2, [r3, #112]
 295:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 443              		.loc 1 295 3 is_stmt 1 view .LVU138
 295:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 444              		.loc 1 295 29 is_stmt 0 view .LVU139
 445 002a DA66     		str	r2, [r3, #108]
 296:Core/Src/SEGGER_RTT.c ****   //
 446              		.loc 1 296 3 is_stmt 1 view .LVU140
 296:Core/Src/SEGGER_RTT.c ****   //
 447              		.loc 1 296 29 is_stmt 0 view .LVU141
 448 002c 5A67     		str	r2, [r3, #116]
 302:Core/Src/SEGGER_RTT.c ****   strcpy(&p->acID[0], "SEGGER");
 449              		.loc 1 302 3 is_stmt 1 view .LVU142
 450 002e 0B4A     		ldr	r2, .L23+16
 451 0030 1068     		ldr	r0, [r2]
 452 0032 C3F80700 		str	r0, [r3, #7]	@ unaligned
 303:Core/Src/SEGGER_RTT.c ****   p->acID[6] = ' ';
 453              		.loc 1 303 3 view .LVU143
 454 0036 0A4A     		ldr	r2, .L23+20
 455 0038 92E80300 		ldm	r2, {r0, r1}
 456 003c 1860     		str	r0, [r3]
 457 003e 9980     		strh	r1, [r3, #4]	@ movhi
 458 0040 090C     		lsrs	r1, r1, #16
 459 0042 9971     		strb	r1, [r3, #6]
 304:Core/Src/SEGGER_RTT.c **** }
 460              		.loc 1 304 3 view .LVU144
 304:Core/Src/SEGGER_RTT.c **** }
 461              		.loc 1 304 14 is_stmt 0 view .LVU145
 462 0044 2022     		movs	r2, #32
 463 0046 9A71     		strb	r2, [r3, #6]
 305:Core/Src/SEGGER_RTT.c **** 
 464              		.loc 1 305 1 view .LVU146
 465 0048 7047     		bx	lr
 466              	.L24:
 467 004a 00BF     		.align	2
 468              	.L23:
 469 004c 00000000 		.word	.LANCHOR1
 470 0050 00000000 		.word	.LC0
 471 0054 00000000 		.word	.LANCHOR2
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 20


 472 0058 00000000 		.word	.LANCHOR3
 473 005c 0C000000 		.word	.LC1
 474 0060 10000000 		.word	.LC2
 475              		.cfi_endproc
 476              	.LFE0:
 478              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 479              		.align	1
 480              		.global	SEGGER_RTT_ReadNoLock
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu fpv4-sp-d16
 486              	SEGGER_RTT_ReadNoLock:
 487              	.LVL47:
 488              	.LFB5:
 493:Core/Src/SEGGER_RTT.c **** 
 494:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 495:Core/Src/SEGGER_RTT.c **** *
 496:Core/Src/SEGGER_RTT.c **** *       Public code
 497:Core/Src/SEGGER_RTT.c **** *
 498:Core/Src/SEGGER_RTT.c **** **********************************************************************
 499:Core/Src/SEGGER_RTT.c **** */
 500:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 501:Core/Src/SEGGER_RTT.c **** *
 502:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 503:Core/Src/SEGGER_RTT.c **** *
 504:Core/Src/SEGGER_RTT.c **** *  Function description
 505:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 506:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 507:Core/Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 508:Core/Src/SEGGER_RTT.c **** *
 509:Core/Src/SEGGER_RTT.c **** *  Parameters
 510:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 511:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 512:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 513:Core/Src/SEGGER_RTT.c **** *
 514:Core/Src/SEGGER_RTT.c **** *  Return value
 515:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 516:Core/Src/SEGGER_RTT.c **** */
 517:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 489              		.loc 1 517 88 is_stmt 1 view -0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              		.loc 1 517 88 is_stmt 0 view .LVU148
 494 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 495              	.LCFI5:
 496              		.cfi_def_cfa_offset 32
 497              		.cfi_offset 4, -32
 498              		.cfi_offset 5, -28
 499              		.cfi_offset 6, -24
 500              		.cfi_offset 7, -20
 501              		.cfi_offset 8, -16
 502              		.cfi_offset 9, -12
 503              		.cfi_offset 10, -8
 504              		.cfi_offset 14, -4
 505 0004 0446     		mov	r4, r0
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 21


 506 0006 8846     		mov	r8, r1
 507 0008 9146     		mov	r9, r2
 518:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 508              		.loc 1 518 3 is_stmt 1 view .LVU149
 519:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 509              		.loc 1 519 3 view .LVU150
 520:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 510              		.loc 1 520 3 view .LVU151
 521:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 511              		.loc 1 521 3 view .LVU152
 522:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 512              		.loc 1 522 3 view .LVU153
 523:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 513              		.loc 1 523 3 view .LVU154
 524:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 525:Core/Src/SEGGER_RTT.c ****   const char*             pSrc;
 526:Core/Src/SEGGER_RTT.c **** #endif
 527:Core/Src/SEGGER_RTT.c ****   //
 528:Core/Src/SEGGER_RTT.c ****   INIT();
 514              		.loc 1 528 3 view .LVU155
 515              		.loc 1 528 3 view .LVU156
 516 000a 244B     		ldr	r3, .L36
 517 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 518 000e C3B1     		cbz	r3, .L33
 519              	.LVL48:
 520              	.L26:
 521              		.loc 1 528 3 discriminator 3 view .LVU157
 529:Core/Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 522              		.loc 1 529 3 discriminator 3 view .LVU158
 530:Core/Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 523              		.loc 1 530 3 discriminator 3 view .LVU159
 531:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 524              		.loc 1 531 3 discriminator 3 view .LVU160
 525              		.loc 1 531 9 is_stmt 0 discriminator 3 view .LVU161
 526 0010 04EB4403 		add	r3, r4, r4, lsl #1
 527 0014 214A     		ldr	r2, .L36
 528 0016 02EBC303 		add	r3, r2, r3, lsl #3
 529 001a 1F6F     		ldr	r7, [r3, #112]
 530              	.LVL49:
 532:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 531              		.loc 1 532 3 is_stmt 1 discriminator 3 view .LVU162
 532              		.loc 1 532 9 is_stmt 0 discriminator 3 view .LVU163
 533 001c DD6E     		ldr	r5, [r3, #108]
 534              	.LVL50:
 533:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 535              		.loc 1 533 3 is_stmt 1 discriminator 3 view .LVU164
 534:Core/Src/SEGGER_RTT.c ****   //
 535:Core/Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 536:Core/Src/SEGGER_RTT.c ****   //
 537:Core/Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 536              		.loc 1 537 3 discriminator 3 view .LVU165
 537              		.loc 1 537 6 is_stmt 0 discriminator 3 view .LVU166
 538 001e AF42     		cmp	r7, r5
 539 0020 12D8     		bhi	.L34
 533:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 540              		.loc 1 533 16 view .LVU167
 541 0022 0026     		movs	r6, #0
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 22


 542              	.LVL51:
 543              	.L27:
 538:Core/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 539:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 540:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 541:Core/Src/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 542:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 543:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 544:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 545:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 546:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 547:Core/Src/SEGGER_RTT.c ****     };
 548:Core/Src/SEGGER_RTT.c **** #else
 549:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 550:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 551:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 552:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 553:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 554:Core/Src/SEGGER_RTT.c **** #endif
 555:Core/Src/SEGGER_RTT.c ****     //
 556:Core/Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 557:Core/Src/SEGGER_RTT.c ****     //
 558:Core/Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 559:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 560:Core/Src/SEGGER_RTT.c ****     }
 561:Core/Src/SEGGER_RTT.c ****   }
 562:Core/Src/SEGGER_RTT.c ****   //
 563:Core/Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 564:Core/Src/SEGGER_RTT.c ****   //
 565:Core/Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 544              		.loc 1 565 3 is_stmt 1 view .LVU168
 545              		.loc 1 565 15 is_stmt 0 view .LVU169
 546 0024 ED1B     		subs	r5, r5, r7
 547              	.LVL52:
 566:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 548              		.loc 1 566 3 is_stmt 1 view .LVU170
 549              		.loc 1 566 15 is_stmt 0 view .LVU171
 550 0026 4D45     		cmp	r5, r9
 551 0028 28BF     		it	cs
 552 002a 4D46     		movcs	r5, r9
 553              	.LVL53:
 567:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 554              		.loc 1 567 3 is_stmt 1 view .LVU172
 555              		.loc 1 567 6 is_stmt 0 view .LVU173
 556 002c 3DBB     		cbnz	r5, .L35
 557              	.LVL54:
 558              	.L28:
 568:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 569:Core/Src/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 570:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 571:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 572:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 573:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 574:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 575:Core/Src/SEGGER_RTT.c ****     };
 576:Core/Src/SEGGER_RTT.c **** #else
 577:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 23


 578:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 579:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 580:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 581:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 582:Core/Src/SEGGER_RTT.c **** #endif
 583:Core/Src/SEGGER_RTT.c ****   }
 584:Core/Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 559              		.loc 1 584 3 is_stmt 1 view .LVU174
 560              		.loc 1 584 6 is_stmt 0 view .LVU175
 561 002e 2EB1     		cbz	r6, .L25
 585:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 562              		.loc 1 585 5 is_stmt 1 view .LVU176
 563              		.loc 1 585 18 is_stmt 0 view .LVU177
 564 0030 04EB4404 		add	r4, r4, r4, lsl #1
 565              	.LVL55:
 566              		.loc 1 585 18 view .LVU178
 567 0034 1948     		ldr	r0, .L36
 568 0036 00EBC404 		add	r4, r0, r4, lsl #3
 569 003a 2767     		str	r7, [r4, #112]
 586:Core/Src/SEGGER_RTT.c ****   }
 587:Core/Src/SEGGER_RTT.c ****   //
 588:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 570              		.loc 1 588 3 is_stmt 1 view .LVU179
 571              	.L25:
 589:Core/Src/SEGGER_RTT.c **** }
 572              		.loc 1 589 1 is_stmt 0 view .LVU180
 573 003c 3046     		mov	r0, r6
 574 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 575              	.LVL56:
 576              	.L33:
 528:Core/Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 577              		.loc 1 528 3 is_stmt 1 discriminator 1 view .LVU181
 578 0042 FFF7FEFF 		bl	_DoInit
 579              	.LVL57:
 528:Core/Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 580              		.loc 1 528 3 is_stmt 0 discriminator 1 view .LVU182
 581 0046 E3E7     		b	.L26
 582              	.LVL58:
 583              	.L34:
 538:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 584              		.loc 1 538 5 is_stmt 1 view .LVU183
 538:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 585              		.loc 1 538 24 is_stmt 0 view .LVU184
 586 0048 04EB440A 		add	r10, r4, r4, lsl #1
 587 004c 02EBCA0A 		add	r10, r2, r10, lsl #3
 588 0050 DAF86860 		ldr	r6, [r10, #104]
 538:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 589              		.loc 1 538 17 view .LVU185
 590 0054 F61B     		subs	r6, r6, r7
 591              	.LVL59:
 539:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 592              		.loc 1 539 5 is_stmt 1 view .LVU186
 539:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 593              		.loc 1 539 17 is_stmt 0 view .LVU187
 594 0056 4E45     		cmp	r6, r9
 595 0058 28BF     		it	cs
 596 005a 4E46     		movcs	r6, r9
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 24


 597              	.LVL60:
 549:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 598              		.loc 1 549 5 is_stmt 1 view .LVU188
 599 005c DAF86410 		ldr	r1, [r10, #100]
 600 0060 3246     		mov	r2, r6
 601 0062 3944     		add	r1, r1, r7
 602 0064 4046     		mov	r0, r8
 603 0066 FFF7FEFF 		bl	memcpy
 604              	.LVL61:
 550:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 605              		.loc 1 550 5 view .LVU189
 551:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 606              		.loc 1 551 5 view .LVU190
 551:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 607              		.loc 1 551 18 is_stmt 0 view .LVU191
 608 006a B044     		add	r8, r8, r6
 609              	.LVL62:
 552:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 610              		.loc 1 552 5 is_stmt 1 view .LVU192
 552:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 611              		.loc 1 552 18 is_stmt 0 view .LVU193
 612 006c A9EB0609 		sub	r9, r9, r6
 613              	.LVL63:
 553:Core/Src/SEGGER_RTT.c **** #endif
 614              		.loc 1 553 5 is_stmt 1 view .LVU194
 553:Core/Src/SEGGER_RTT.c **** #endif
 615              		.loc 1 553 18 is_stmt 0 view .LVU195
 616 0070 3744     		add	r7, r7, r6
 617              	.LVL64:
 558:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 618              		.loc 1 558 5 is_stmt 1 view .LVU196
 558:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 619              		.loc 1 558 23 is_stmt 0 view .LVU197
 620 0072 DAF86830 		ldr	r3, [r10, #104]
 558:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 621              		.loc 1 558 8 view .LVU198
 622 0076 BB42     		cmp	r3, r7
 623 0078 D4D1     		bne	.L27
 559:Core/Src/SEGGER_RTT.c ****     }
 624              		.loc 1 559 13 view .LVU199
 625 007a 0027     		movs	r7, #0
 626              	.LVL65:
 559:Core/Src/SEGGER_RTT.c ****     }
 627              		.loc 1 559 13 view .LVU200
 628 007c D2E7     		b	.L27
 629              	.LVL66:
 630              	.L35:
 577:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 631              		.loc 1 577 5 is_stmt 1 view .LVU201
 632 007e 04EB4403 		add	r3, r4, r4, lsl #1
 633 0082 064A     		ldr	r2, .L36
 634 0084 02EBC303 		add	r3, r2, r3, lsl #3
 635 0088 596E     		ldr	r1, [r3, #100]
 636 008a 2A46     		mov	r2, r5
 637 008c 3944     		add	r1, r1, r7
 638 008e 4046     		mov	r0, r8
 639 0090 FFF7FEFF 		bl	memcpy
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 25


 640              	.LVL67:
 578:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 641              		.loc 1 578 5 view .LVU202
 578:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 642              		.loc 1 578 18 is_stmt 0 view .LVU203
 643 0094 2E44     		add	r6, r6, r5
 644              	.LVL68:
 579:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 645              		.loc 1 579 5 is_stmt 1 view .LVU204
 580:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 646              		.loc 1 580 5 view .LVU205
 581:Core/Src/SEGGER_RTT.c **** #endif
 647              		.loc 1 581 5 view .LVU206
 581:Core/Src/SEGGER_RTT.c **** #endif
 648              		.loc 1 581 18 is_stmt 0 view .LVU207
 649 0096 2F44     		add	r7, r7, r5
 650              	.LVL69:
 581:Core/Src/SEGGER_RTT.c **** #endif
 651              		.loc 1 581 18 view .LVU208
 652 0098 C9E7     		b	.L28
 653              	.L37:
 654 009a 00BF     		.align	2
 655              	.L36:
 656 009c 00000000 		.word	.LANCHOR1
 657              		.cfi_endproc
 658              	.LFE5:
 660              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 661              		.align	1
 662              		.global	SEGGER_RTT_Read
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu fpv4-sp-d16
 668              	SEGGER_RTT_Read:
 669              	.LVL70:
 670              	.LFB6:
 590:Core/Src/SEGGER_RTT.c **** 
 591:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 592:Core/Src/SEGGER_RTT.c **** *
 593:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 594:Core/Src/SEGGER_RTT.c **** *
 595:Core/Src/SEGGER_RTT.c **** *  Function description
 596:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 597:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 598:Core/Src/SEGGER_RTT.c **** *
 599:Core/Src/SEGGER_RTT.c **** *  Parameters
 600:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 601:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 602:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 603:Core/Src/SEGGER_RTT.c **** *
 604:Core/Src/SEGGER_RTT.c **** *  Return value
 605:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 606:Core/Src/SEGGER_RTT.c **** */
 607:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 671              		.loc 1 607 84 is_stmt 1 view -0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 26


 674              		@ frame_needed = 0, uses_anonymous_args = 0
 675              		.loc 1 607 84 is_stmt 0 view .LVU210
 676 0000 10B5     		push	{r4, lr}
 677              	.LCFI6:
 678              		.cfi_def_cfa_offset 8
 679              		.cfi_offset 4, -8
 680              		.cfi_offset 14, -4
 681 0002 0B46     		mov	r3, r1
 608:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 682              		.loc 1 608 3 is_stmt 1 view .LVU211
 683              	.LBB2:
 609:Core/Src/SEGGER_RTT.c ****   //
 610:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 684              		.loc 1 610 3 view .LVU212
 685              		.loc 1 610 3 view .LVU213
 686              		.syntax unified
 687              	@ 610 "Core/Src/SEGGER_RTT.c" 1
 688 0004 EFF31184 		mrs   r4, basepri  
 689 0008 4FF02001 		mov   r1, #32       
 690 000c 81F31188 		msr   basepri, r1  
 691              		
 692              	@ 0 "" 2
 693              	.LVL71:
 694              		.loc 1 610 20 view .LVU214
 611:Core/Src/SEGGER_RTT.c ****   //
 612:Core/Src/SEGGER_RTT.c ****   // Call the non-locking read function
 613:Core/Src/SEGGER_RTT.c ****   //
 614:Core/Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 695              		.loc 1 614 3 view .LVU215
 696              		.loc 1 614 18 is_stmt 0 view .LVU216
 697              		.thumb
 698              		.syntax unified
 699 0010 1946     		mov	r1, r3
 700 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 701              	.LVL72:
 615:Core/Src/SEGGER_RTT.c ****   //
 616:Core/Src/SEGGER_RTT.c ****   // Finish up.
 617:Core/Src/SEGGER_RTT.c ****   //
 618:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 702              		.loc 1 618 3 is_stmt 1 view .LVU217
 703              		.syntax unified
 704              	@ 618 "Core/Src/SEGGER_RTT.c" 1
 705 0016 84F31188 		msr   basepri, r4  
 706              		
 707              	@ 0 "" 2
 708              		.thumb
 709              		.syntax unified
 710              	.LBE2:
 711              		.loc 1 618 22 view .LVU218
 619:Core/Src/SEGGER_RTT.c ****   //
 620:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 712              		.loc 1 620 3 view .LVU219
 621:Core/Src/SEGGER_RTT.c **** }
 713              		.loc 1 621 1 is_stmt 0 view .LVU220
 714 001a 10BD     		pop	{r4, pc}
 715              		.loc 1 621 1 view .LVU221
 716              		.cfi_endproc
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 27


 717              	.LFE6:
 719              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 720              		.align	1
 721              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 722              		.syntax unified
 723              		.thumb
 724              		.thumb_func
 725              		.fpu fpv4-sp-d16
 727              	SEGGER_RTT_WriteWithOverwriteNoLock:
 728              	.LVL73:
 729              	.LFB7:
 622:Core/Src/SEGGER_RTT.c **** 
 623:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 624:Core/Src/SEGGER_RTT.c **** *
 625:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 626:Core/Src/SEGGER_RTT.c **** *
 627:Core/Src/SEGGER_RTT.c **** *  Function description
 628:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 629:Core/Src/SEGGER_RTT.c **** *    control block.
 630:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 631:Core/Src/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 632:Core/Src/SEGGER_RTT.c **** *
 633:Core/Src/SEGGER_RTT.c **** *  Parameters
 634:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 635:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 636:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 637:Core/Src/SEGGER_RTT.c **** *
 638:Core/Src/SEGGER_RTT.c **** *  Notes
 639:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 640:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 641:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 642:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 643:Core/Src/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 644:Core/Src/SEGGER_RTT.c **** *        connection reads RTT data.
 645:Core/Src/SEGGER_RTT.c **** */
 646:Core/Src/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 730              		.loc 1 646 104 is_stmt 1 view -0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734              		.loc 1 646 104 is_stmt 0 view .LVU223
 735 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 736              	.LCFI7:
 737              		.cfi_def_cfa_offset 32
 738              		.cfi_offset 3, -32
 739              		.cfi_offset 4, -28
 740              		.cfi_offset 5, -24
 741              		.cfi_offset 6, -20
 742              		.cfi_offset 7, -16
 743              		.cfi_offset 8, -12
 744              		.cfi_offset 9, -8
 745              		.cfi_offset 14, -4
 746 0004 0646     		mov	r6, r0
 747 0006 8846     		mov	r8, r1
 748 0008 1746     		mov	r7, r2
 647:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 749              		.loc 1 647 3 is_stmt 1 view .LVU224
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 28


 648:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 750              		.loc 1 648 3 view .LVU225
 649:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 751              		.loc 1 649 3 view .LVU226
 650:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 651:Core/Src/SEGGER_RTT.c ****   char*                 pDst;
 652:Core/Src/SEGGER_RTT.c **** #endif
 653:Core/Src/SEGGER_RTT.c **** 
 654:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 752              		.loc 1 654 3 view .LVU227
 753              	.LVL74:
 655:Core/Src/SEGGER_RTT.c ****   //
 656:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 657:Core/Src/SEGGER_RTT.c ****   //
 658:Core/Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 754              		.loc 1 658 3 view .LVU228
 659:Core/Src/SEGGER_RTT.c ****   //
 660:Core/Src/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 661:Core/Src/SEGGER_RTT.c ****   //
 662:Core/Src/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 755              		.loc 1 662 3 view .LVU229
 756              		.loc 1 662 12 is_stmt 0 view .LVU230
 757 000a 00EB4002 		add	r2, r0, r0, lsl #1
 758              	.LVL75:
 759              		.loc 1 662 12 view .LVU231
 760 000e 3F4B     		ldr	r3, .L53
 761 0010 03EBC203 		add	r3, r3, r2, lsl #3
 762 0014 596A     		ldr	r1, [r3, #36]
 763              	.LVL76:
 764              		.loc 1 662 28 view .LVU232
 765 0016 9B6A     		ldr	r3, [r3, #40]
 766              		.loc 1 662 6 view .LVU233
 767 0018 9942     		cmp	r1, r3
 768 001a 0FD0     		beq	.L51
 663:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 664:Core/Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 769              		.loc 1 664 10 is_stmt 1 view .LVU234
 770              		.loc 1 664 35 is_stmt 0 view .LVU235
 771 001c 00EB4003 		add	r3, r0, r0, lsl #1
 772 0020 3A4A     		ldr	r2, .L53
 773 0022 02EBC303 		add	r3, r2, r3, lsl #3
 774 0026 9B6A     		ldr	r3, [r3, #40]
 775              		.loc 1 664 13 view .LVU236
 776 0028 9942     		cmp	r1, r3
 777 002a 19D2     		bcs	.L43
 665:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 778              		.loc 1 665 5 is_stmt 1 view .LVU237
 779              		.loc 1 665 18 is_stmt 0 view .LVU238
 780 002c 00EB4003 		add	r3, r0, r0, lsl #1
 781 0030 02EBC303 		add	r3, r2, r3, lsl #3
 782 0034 9B6A     		ldr	r3, [r3, #40]
 783              		.loc 1 665 26 view .LVU239
 784 0036 5B1A     		subs	r3, r3, r1
 785              		.loc 1 665 11 view .LVU240
 786 0038 013B     		subs	r3, r3, #1
 787              	.LVL77:
 788              		.loc 1 665 11 view .LVU241
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 29


 789 003a 05E0     		b	.L42
 790              	.LVL78:
 791              	.L51:
 663:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 792              		.loc 1 663 5 is_stmt 1 view .LVU242
 663:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 793              		.loc 1 663 18 is_stmt 0 view .LVU243
 794 003c 1346     		mov	r3, r2
 795 003e 334A     		ldr	r2, .L53
 796 0040 02EBC303 		add	r3, r2, r3, lsl #3
 797 0044 1B6A     		ldr	r3, [r3, #32]
 663:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 798              		.loc 1 663 11 view .LVU244
 799 0046 013B     		subs	r3, r3, #1
 800              	.LVL79:
 801              	.L42:
 666:Core/Src/SEGGER_RTT.c ****   } else {
 667:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 668:Core/Src/SEGGER_RTT.c ****   }
 669:Core/Src/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 802              		.loc 1 669 3 is_stmt 1 view .LVU245
 803              		.loc 1 669 6 is_stmt 0 view .LVU246
 804 0048 BB42     		cmp	r3, r7
 805 004a 25D2     		bcs	.L44
 670:Core/Src/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 806              		.loc 1 670 5 is_stmt 1 view .LVU247
 807              		.loc 1 670 18 is_stmt 0 view .LVU248
 808 004c 06EB4602 		add	r2, r6, r6, lsl #1
 809 0050 2E48     		ldr	r0, .L53
 810              	.LVL80:
 811              		.loc 1 670 18 view .LVU249
 812 0052 00EBC202 		add	r2, r0, r2, lsl #3
 813 0056 906A     		ldr	r0, [r2, #40]
 814              		.loc 1 670 31 view .LVU250
 815 0058 FB1A     		subs	r3, r7, r3
 816              	.LVL81:
 817              		.loc 1 670 18 view .LVU251
 818 005a 0344     		add	r3, r3, r0
 819 005c 9362     		str	r3, [r2, #40]
 671:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 820              		.loc 1 671 5 is_stmt 1 view .LVU252
 821              		.loc 1 671 11 is_stmt 0 view .LVU253
 822 005e 12E0     		b	.L45
 823              	.LVL82:
 824              	.L43:
 667:Core/Src/SEGGER_RTT.c ****   }
 825              		.loc 1 667 5 is_stmt 1 view .LVU254
 667:Core/Src/SEGGER_RTT.c ****   }
 826              		.loc 1 667 18 is_stmt 0 view .LVU255
 827 0060 00EB4002 		add	r2, r0, r0, lsl #1
 828 0064 294B     		ldr	r3, .L53
 829 0066 03EBC202 		add	r2, r3, r2, lsl #3
 830 006a 936A     		ldr	r3, [r2, #40]
 667:Core/Src/SEGGER_RTT.c ****   }
 831              		.loc 1 667 26 view .LVU256
 832 006c 5B1A     		subs	r3, r3, r1
 667:Core/Src/SEGGER_RTT.c ****   }
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 30


 833              		.loc 1 667 53 view .LVU257
 834 006e 126A     		ldr	r2, [r2, #32]
 667:Core/Src/SEGGER_RTT.c ****   }
 835              		.loc 1 667 46 view .LVU258
 836 0070 1344     		add	r3, r3, r2
 667:Core/Src/SEGGER_RTT.c ****   }
 837              		.loc 1 667 11 view .LVU259
 838 0072 013B     		subs	r3, r3, #1
 839              	.LVL83:
 667:Core/Src/SEGGER_RTT.c ****   }
 840              		.loc 1 667 11 view .LVU260
 841 0074 E8E7     		b	.L42
 842              	.LVL84:
 843              	.L46:
 672:Core/Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 844              		.loc 1 672 7 is_stmt 1 view .LVU261
 845              		.loc 1 672 20 is_stmt 0 view .LVU262
 846 0076 06EB4603 		add	r3, r6, r6, lsl #1
 847 007a 244A     		ldr	r2, .L53
 848 007c 02EBC303 		add	r3, r2, r3, lsl #3
 849 0080 9A6A     		ldr	r2, [r3, #40]
 850 0082 121A     		subs	r2, r2, r0
 851 0084 9A62     		str	r2, [r3, #40]
 852              	.L45:
 671:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 853              		.loc 1 671 11 is_stmt 1 view .LVU263
 671:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 854              		.loc 1 671 17 is_stmt 0 view .LVU264
 855 0086 06EB4603 		add	r3, r6, r6, lsl #1
 856 008a 204A     		ldr	r2, .L53
 857 008c 02EBC303 		add	r3, r2, r3, lsl #3
 858 0090 9A6A     		ldr	r2, [r3, #40]
 671:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 859              		.loc 1 671 33 view .LVU265
 860 0092 186A     		ldr	r0, [r3, #32]
 671:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 861              		.loc 1 671 11 view .LVU266
 862 0094 8242     		cmp	r2, r0
 863 0096 EED2     		bcs	.L46
 864              	.L44:
 673:Core/Src/SEGGER_RTT.c ****     }
 674:Core/Src/SEGGER_RTT.c ****   }
 675:Core/Src/SEGGER_RTT.c ****   //
 676:Core/Src/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 677:Core/Src/SEGGER_RTT.c ****   //
 678:Core/Src/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 865              		.loc 1 678 3 is_stmt 1 view .LVU267
 866              		.loc 1 678 16 is_stmt 0 view .LVU268
 867 0098 06EB4603 		add	r3, r6, r6, lsl #1
 868 009c 1B4A     		ldr	r2, .L53
 869 009e 02EBC303 		add	r3, r2, r3, lsl #3
 870 00a2 1C6A     		ldr	r4, [r3, #32]
 871              		.loc 1 678 9 view .LVU269
 872 00a4 641A     		subs	r4, r4, r1
 873              	.LVL85:
 874              	.L49:
 679:Core/Src/SEGGER_RTT.c ****   do {
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 31


 875              		.loc 1 679 3 is_stmt 1 view .LVU270
 680:Core/Src/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 876              		.loc 1 680 5 view .LVU271
 877              		.loc 1 680 8 is_stmt 0 view .LVU272
 878 00a6 A742     		cmp	r7, r4
 879 00a8 19D3     		bcc	.L52
 681:Core/Src/SEGGER_RTT.c ****       //
 682:Core/Src/SEGGER_RTT.c ****       // Last round
 683:Core/Src/SEGGER_RTT.c ****       //
 684:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 685:Core/Src/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 686:Core/Src/SEGGER_RTT.c ****       Avail = NumBytes;
 687:Core/Src/SEGGER_RTT.c ****       while (NumBytes--) {
 688:Core/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 689:Core/Src/SEGGER_RTT.c ****       };
 690:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 691:Core/Src/SEGGER_RTT.c **** #else
 692:Core/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + pRing->WrOff, pData, NumBytes);
 693:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 694:Core/Src/SEGGER_RTT.c **** #endif
 695:Core/Src/SEGGER_RTT.c ****       break;
 696:Core/Src/SEGGER_RTT.c ****     } else {
 697:Core/Src/SEGGER_RTT.c ****       //
 698:Core/Src/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 699:Core/Src/SEGGER_RTT.c ****       //
 700:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 701:Core/Src/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 702:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 703:Core/Src/SEGGER_RTT.c ****       while (Avail--) {
 704:Core/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 705:Core/Src/SEGGER_RTT.c ****       };
 706:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 707:Core/Src/SEGGER_RTT.c **** #else
 708:Core/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + pRing->WrOff, pData, Avail);
 880              		.loc 1 708 7 is_stmt 1 view .LVU273
 881 00aa 184D     		ldr	r5, .L53
 882 00ac 731C     		adds	r3, r6, #1
 883 00ae 03EB4303 		add	r3, r3, r3, lsl #1
 884 00b2 05EBC303 		add	r3, r5, r3, lsl #3
 885 00b6 5868     		ldr	r0, [r3, #4]
 886 00b8 06EB4603 		add	r3, r6, r6, lsl #1
 887 00bc 05EBC305 		add	r5, r5, r3, lsl #3
 888 00c0 6B6A     		ldr	r3, [r5, #36]
 889 00c2 2246     		mov	r2, r4
 890 00c4 4146     		mov	r1, r8
 891 00c6 1844     		add	r0, r0, r3
 892 00c8 FFF7FEFF 		bl	memcpy
 893              	.LVL86:
 709:Core/Src/SEGGER_RTT.c ****       pData += Avail;
 894              		.loc 1 709 7 view .LVU274
 895              		.loc 1 709 13 is_stmt 0 view .LVU275
 896 00cc A044     		add	r8, r8, r4
 897              	.LVL87:
 710:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 898              		.loc 1 710 7 is_stmt 1 view .LVU276
 899              		.loc 1 710 20 is_stmt 0 view .LVU277
 900 00ce 0023     		movs	r3, #0
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 32


 901 00d0 6B62     		str	r3, [r5, #36]
 711:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 902              		.loc 1 711 7 is_stmt 1 view .LVU278
 903              		.loc 1 711 16 is_stmt 0 view .LVU279
 904 00d2 3F1B     		subs	r7, r7, r4
 905              	.LVL88:
 712:Core/Src/SEGGER_RTT.c **** #endif
 713:Core/Src/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 906              		.loc 1 713 7 is_stmt 1 view .LVU280
 907              		.loc 1 713 21 is_stmt 0 view .LVU281
 908 00d4 2C6A     		ldr	r4, [r5, #32]
 909              	.LVL89:
 910              		.loc 1 713 13 view .LVU282
 911 00d6 013C     		subs	r4, r4, #1
 912              	.LVL90:
 714:Core/Src/SEGGER_RTT.c ****     }
 715:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 913              		.loc 1 715 11 is_stmt 1 view .LVU283
 914              		.loc 1 715 3 is_stmt 0 view .LVU284
 915 00d8 002F     		cmp	r7, #0
 916 00da E4D1     		bne	.L49
 917 00dc 13E0     		b	.L40
 918              	.L52:
 692:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 919              		.loc 1 692 7 is_stmt 1 view .LVU285
 920 00de 0B4C     		ldr	r4, .L53
 921              	.LVL91:
 692:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 922              		.loc 1 692 7 is_stmt 0 view .LVU286
 923 00e0 731C     		adds	r3, r6, #1
 924 00e2 03EB4303 		add	r3, r3, r3, lsl #1
 925 00e6 04EBC303 		add	r3, r4, r3, lsl #3
 926 00ea 5868     		ldr	r0, [r3, #4]
 927 00ec 06EB4605 		add	r5, r6, r6, lsl #1
 928 00f0 04EBC505 		add	r5, r4, r5, lsl #3
 929 00f4 6B6A     		ldr	r3, [r5, #36]
 930 00f6 3A46     		mov	r2, r7
 931 00f8 4146     		mov	r1, r8
 932 00fa 1844     		add	r0, r0, r3
 933 00fc FFF7FEFF 		bl	memcpy
 934              	.LVL92:
 693:Core/Src/SEGGER_RTT.c **** #endif
 935              		.loc 1 693 7 is_stmt 1 view .LVU287
 693:Core/Src/SEGGER_RTT.c **** #endif
 936              		.loc 1 693 20 is_stmt 0 view .LVU288
 937 0100 6B6A     		ldr	r3, [r5, #36]
 938 0102 1F44     		add	r7, r7, r3
 939              	.LVL93:
 693:Core/Src/SEGGER_RTT.c **** #endif
 940              		.loc 1 693 20 view .LVU289
 941 0104 6F62     		str	r7, [r5, #36]
 695:Core/Src/SEGGER_RTT.c ****     } else {
 942              		.loc 1 695 7 is_stmt 1 view .LVU290
 943              	.L40:
 716:Core/Src/SEGGER_RTT.c **** }
 944              		.loc 1 716 1 is_stmt 0 view .LVU291
 945 0106 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 33


 946              	.LVL94:
 947              	.L54:
 948              		.loc 1 716 1 view .LVU292
 949 010a 00BF     		.align	2
 950              	.L53:
 951 010c 00000000 		.word	.LANCHOR1
 952              		.cfi_endproc
 953              	.LFE7:
 955              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 956              		.align	1
 957              		.global	SEGGER_RTT_WriteNoLock
 958              		.syntax unified
 959              		.thumb
 960              		.thumb_func
 961              		.fpu fpv4-sp-d16
 963              	SEGGER_RTT_WriteNoLock:
 964              	.LVL95:
 965              	.LFB8:
 717:Core/Src/SEGGER_RTT.c **** 
 718:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 719:Core/Src/SEGGER_RTT.c **** *
 720:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 721:Core/Src/SEGGER_RTT.c **** *
 722:Core/Src/SEGGER_RTT.c **** *  Function description
 723:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 724:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
 725:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 726:Core/Src/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 727:Core/Src/SEGGER_RTT.c **** *
 728:Core/Src/SEGGER_RTT.c **** *  Parameters
 729:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 730:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 731:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 732:Core/Src/SEGGER_RTT.c **** *                 MUST be > 0!!!
 733:Core/Src/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 734:Core/Src/SEGGER_RTT.c **** *
 735:Core/Src/SEGGER_RTT.c **** *  Return value
 736:Core/Src/SEGGER_RTT.c **** *    1: Data has been copied
 737:Core/Src/SEGGER_RTT.c **** *    0: No space, data has not been copied
 738:Core/Src/SEGGER_RTT.c **** *
 739:Core/Src/SEGGER_RTT.c **** *  Notes
 740:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 741:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 742:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 743:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 744:Core/Src/SEGGER_RTT.c **** */
 745:Core/Src/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 746:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 747:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 748:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 749:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 750:Core/Src/SEGGER_RTT.c ****   unsigned              RdOff;
 751:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 752:Core/Src/SEGGER_RTT.c ****   unsigned              Rem;
 753:Core/Src/SEGGER_RTT.c ****   //
 754:Core/Src/SEGGER_RTT.c ****   // Cases:
 755:Core/Src/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 34


 756:Core/Src/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 757:Core/Src/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 758:Core/Src/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 759:Core/Src/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 760:Core/Src/SEGGER_RTT.c ****   //
 761:Core/Src/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 762:Core/Src/SEGGER_RTT.c ****   //
 763:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 764:Core/Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 765:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 766:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 767:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 768:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 769:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 770:Core/Src/SEGGER_RTT.c **** CopyStraight:
 771:Core/Src/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 772:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 773:Core/Src/SEGGER_RTT.c ****       return 1;
 774:Core/Src/SEGGER_RTT.c ****     }
 775:Core/Src/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 776:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 777:Core/Src/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 778:Core/Src/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
 779:Core/Src/SEGGER_RTT.c ****       NumBytes -= Rem;
 780:Core/Src/SEGGER_RTT.c ****       //
 781:Core/Src/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 782:Core/Src/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 783:Core/Src/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 784:Core/Src/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 785:Core/Src/SEGGER_RTT.c ****       //
 786:Core/Src/SEGGER_RTT.c ****       if (NumBytes) {
 787:Core/Src/SEGGER_RTT.c ****         memcpy(pRing->pBuffer, pData + Rem, NumBytes);
 788:Core/Src/SEGGER_RTT.c ****       }
 789:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 790:Core/Src/SEGGER_RTT.c ****       return 1;
 791:Core/Src/SEGGER_RTT.c ****     }
 792:Core/Src/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 793:Core/Src/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 794:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 795:Core/Src/SEGGER_RTT.c ****       goto CopyStraight;
 796:Core/Src/SEGGER_RTT.c ****     }
 797:Core/Src/SEGGER_RTT.c ****   }
 798:Core/Src/SEGGER_RTT.c ****   return 0;     // No space in buffer
 799:Core/Src/SEGGER_RTT.c **** }
 800:Core/Src/SEGGER_RTT.c **** #endif
 801:Core/Src/SEGGER_RTT.c **** 
 802:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 803:Core/Src/SEGGER_RTT.c **** *
 804:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
 805:Core/Src/SEGGER_RTT.c **** *
 806:Core/Src/SEGGER_RTT.c **** *  Function description
 807:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 808:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
 809:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
 810:Core/Src/SEGGER_RTT.c **** *
 811:Core/Src/SEGGER_RTT.c **** *  Parameters
 812:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 35


 813:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 814:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 815:Core/Src/SEGGER_RTT.c **** *
 816:Core/Src/SEGGER_RTT.c **** *  Return value
 817:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 818:Core/Src/SEGGER_RTT.c **** *
 819:Core/Src/SEGGER_RTT.c **** *  Notes
 820:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
 821:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 822:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 823:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 824:Core/Src/SEGGER_RTT.c **** */
 825:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 966              		.loc 1 825 95 is_stmt 1 view -0
 967              		.cfi_startproc
 968              		@ args = 0, pretend = 0, frame = 0
 969              		@ frame_needed = 0, uses_anonymous_args = 0
 970              		.loc 1 825 95 is_stmt 0 view .LVU294
 971 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 972              	.LCFI8:
 973              		.cfi_def_cfa_offset 24
 974              		.cfi_offset 3, -24
 975              		.cfi_offset 4, -20
 976              		.cfi_offset 5, -16
 977              		.cfi_offset 6, -12
 978              		.cfi_offset 7, -8
 979              		.cfi_offset 14, -4
 980 0002 0F46     		mov	r7, r1
 981 0004 1646     		mov	r6, r2
 826:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 982              		.loc 1 826 3 is_stmt 1 view .LVU295
 827:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 983              		.loc 1 827 3 view .LVU296
 828:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 984              		.loc 1 828 3 view .LVU297
 829:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 985              		.loc 1 829 3 view .LVU298
 830:Core/Src/SEGGER_RTT.c **** 
 831:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 986              		.loc 1 831 3 view .LVU299
 987              	.LVL96:
 832:Core/Src/SEGGER_RTT.c ****   //
 833:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
 834:Core/Src/SEGGER_RTT.c ****   //
 835:Core/Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 988              		.loc 1 835 3 view .LVU300
 989              		.loc 1 835 9 is_stmt 0 view .LVU301
 990 0006 184B     		ldr	r3, .L62
 991 0008 451C     		adds	r5, r0, #1
 992 000a 05EB4505 		add	r5, r5, r5, lsl #1
 993 000e 03EBC505 		add	r5, r3, r5, lsl #3
 994              	.LVL97:
 836:Core/Src/SEGGER_RTT.c ****   //
 837:Core/Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
 838:Core/Src/SEGGER_RTT.c ****   //
 839:Core/Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 995              		.loc 1 839 3 is_stmt 1 view .LVU302
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 36


 996              		.loc 1 839 16 is_stmt 0 view .LVU303
 997 0012 00EB4000 		add	r0, r0, r0, lsl #1
 998              	.LVL98:
 999              		.loc 1 839 16 view .LVU304
 1000 0016 03EBC000 		add	r0, r3, r0, lsl #3
 1001 001a C46A     		ldr	r4, [r0, #44]
 1002              		.loc 1 839 3 view .LVU305
 1003 001c 012C     		cmp	r4, #1
 1004 001e 11D0     		beq	.L56
 1005 0020 022C     		cmp	r4, #2
 1006 0022 1CD0     		beq	.L57
 1007 0024 14B1     		cbz	r4, .L61
 1008 0026 0024     		movs	r4, #0
 1009              	.LVL99:
 840:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
 841:Core/Src/SEGGER_RTT.c ****     //
 842:Core/Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
 843:Core/Src/SEGGER_RTT.c ****     // of this output, don't bother.
 844:Core/Src/SEGGER_RTT.c ****     //
 845:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 846:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 847:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 848:Core/Src/SEGGER_RTT.c ****     } else {
 849:Core/Src/SEGGER_RTT.c ****       Status = NumBytes;
 850:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 851:Core/Src/SEGGER_RTT.c ****     }
 852:Core/Src/SEGGER_RTT.c ****     break;
 853:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
 854:Core/Src/SEGGER_RTT.c ****     //
 855:Core/Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
 856:Core/Src/SEGGER_RTT.c ****     //
 857:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 858:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 859:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 860:Core/Src/SEGGER_RTT.c ****     break;
 861:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 862:Core/Src/SEGGER_RTT.c ****     //
 863:Core/Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
 864:Core/Src/SEGGER_RTT.c ****     //
 865:Core/Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
 866:Core/Src/SEGGER_RTT.c ****     break;
 867:Core/Src/SEGGER_RTT.c ****   default:
 868:Core/Src/SEGGER_RTT.c ****     Status = 0u;
 869:Core/Src/SEGGER_RTT.c ****     break;
 870:Core/Src/SEGGER_RTT.c ****   }
 871:Core/Src/SEGGER_RTT.c ****   //
 872:Core/Src/SEGGER_RTT.c ****   // Finish up.
 873:Core/Src/SEGGER_RTT.c ****   //
 874:Core/Src/SEGGER_RTT.c ****   return Status;
 1010              		.loc 1 874 3 is_stmt 1 view .LVU306
 1011              	.L55:
 875:Core/Src/SEGGER_RTT.c **** }
 1012              		.loc 1 875 1 is_stmt 0 view .LVU307
 1013 0028 2046     		mov	r0, r4
 1014 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1015              	.LVL100:
 1016              	.L61:
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 37


 845:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1017              		.loc 1 845 5 is_stmt 1 view .LVU308
 845:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1018              		.loc 1 845 13 is_stmt 0 view .LVU309
 1019 002c 2846     		mov	r0, r5
 1020 002e FFF7FEFF 		bl	_GetAvailWriteSpace
 1021              	.LVL101:
 846:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1022              		.loc 1 846 5 is_stmt 1 view .LVU310
 846:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1023              		.loc 1 846 8 is_stmt 0 view .LVU311
 1024 0032 8642     		cmp	r6, r0
 1025 0034 F8D8     		bhi	.L55
 849:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1026              		.loc 1 849 7 is_stmt 1 view .LVU312
 1027              	.LVL102:
 850:Core/Src/SEGGER_RTT.c ****     }
 1028              		.loc 1 850 7 view .LVU313
 1029 0036 3246     		mov	r2, r6
 1030 0038 3946     		mov	r1, r7
 1031 003a 2846     		mov	r0, r5
 1032              	.LVL103:
 850:Core/Src/SEGGER_RTT.c ****     }
 1033              		.loc 1 850 7 is_stmt 0 view .LVU314
 1034 003c FFF7FEFF 		bl	_WriteNoCheck
 1035              	.LVL104:
 849:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1036              		.loc 1 849 14 view .LVU315
 1037 0040 3446     		mov	r4, r6
 1038 0042 F1E7     		b	.L55
 1039              	.LVL105:
 1040              	.L56:
 857:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1041              		.loc 1 857 5 is_stmt 1 view .LVU316
 857:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1042              		.loc 1 857 13 is_stmt 0 view .LVU317
 1043 0044 2846     		mov	r0, r5
 1044 0046 FFF7FEFF 		bl	_GetAvailWriteSpace
 1045              	.LVL106:
 858:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1046              		.loc 1 858 5 is_stmt 1 view .LVU318
 858:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1047              		.loc 1 858 12 is_stmt 0 view .LVU319
 1048 004a 3446     		mov	r4, r6
 1049 004c 8642     		cmp	r6, r0
 1050 004e 28BF     		it	cs
 1051 0050 0446     		movcs	r4, r0
 1052              	.LVL107:
 859:Core/Src/SEGGER_RTT.c ****     break;
 1053              		.loc 1 859 5 is_stmt 1 view .LVU320
 1054 0052 2246     		mov	r2, r4
 1055 0054 3946     		mov	r1, r7
 1056 0056 2846     		mov	r0, r5
 1057              	.LVL108:
 859:Core/Src/SEGGER_RTT.c ****     break;
 1058              		.loc 1 859 5 is_stmt 0 view .LVU321
 1059 0058 FFF7FEFF 		bl	_WriteNoCheck
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 38


 1060              	.LVL109:
 860:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1061              		.loc 1 860 5 is_stmt 1 view .LVU322
 1062 005c E4E7     		b	.L55
 1063              	.LVL110:
 1064              	.L57:
 865:Core/Src/SEGGER_RTT.c ****     break;
 1065              		.loc 1 865 5 view .LVU323
 865:Core/Src/SEGGER_RTT.c ****     break;
 1066              		.loc 1 865 14 is_stmt 0 view .LVU324
 1067 005e 2846     		mov	r0, r5
 1068 0060 FFF7FEFF 		bl	_WriteBlocking
 1069              	.LVL111:
 865:Core/Src/SEGGER_RTT.c ****     break;
 1070              		.loc 1 865 14 view .LVU325
 1071 0064 0446     		mov	r4, r0
 1072              	.LVL112:
 866:Core/Src/SEGGER_RTT.c ****   default:
 1073              		.loc 1 866 5 is_stmt 1 view .LVU326
 1074 0066 DFE7     		b	.L55
 1075              	.L63:
 1076              		.align	2
 1077              	.L62:
 1078 0068 00000000 		.word	.LANCHOR1
 1079              		.cfi_endproc
 1080              	.LFE8:
 1082              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1083              		.align	1
 1084              		.global	SEGGER_RTT_Write
 1085              		.syntax unified
 1086              		.thumb
 1087              		.thumb_func
 1088              		.fpu fpv4-sp-d16
 1090              	SEGGER_RTT_Write:
 1091              	.LVL113:
 1092              	.LFB9:
 876:Core/Src/SEGGER_RTT.c **** 
 877:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 878:Core/Src/SEGGER_RTT.c **** *
 879:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Write
 880:Core/Src/SEGGER_RTT.c **** *
 881:Core/Src/SEGGER_RTT.c **** *  Function description
 882:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 883:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
 884:Core/Src/SEGGER_RTT.c **** *
 885:Core/Src/SEGGER_RTT.c **** *  Parameters
 886:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 887:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 888:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 889:Core/Src/SEGGER_RTT.c **** *
 890:Core/Src/SEGGER_RTT.c **** *  Return value
 891:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 892:Core/Src/SEGGER_RTT.c **** *
 893:Core/Src/SEGGER_RTT.c **** *  Notes
 894:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
 895:Core/Src/SEGGER_RTT.c **** */
 896:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 39


 1093              		.loc 1 896 89 view -0
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 0
 1096              		@ frame_needed = 0, uses_anonymous_args = 0
 1097              		.loc 1 896 89 is_stmt 0 view .LVU328
 1098 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1099              	.LCFI9:
 1100              		.cfi_def_cfa_offset 24
 1101              		.cfi_offset 3, -24
 1102              		.cfi_offset 4, -20
 1103              		.cfi_offset 5, -16
 1104              		.cfi_offset 6, -12
 1105              		.cfi_offset 7, -8
 1106              		.cfi_offset 14, -4
 1107 0002 0446     		mov	r4, r0
 1108 0004 0D46     		mov	r5, r1
 1109 0006 1646     		mov	r6, r2
 897:Core/Src/SEGGER_RTT.c ****   unsigned Status;
 1110              		.loc 1 897 3 is_stmt 1 view .LVU329
 898:Core/Src/SEGGER_RTT.c ****   //
 899:Core/Src/SEGGER_RTT.c ****   INIT();
 1111              		.loc 1 899 3 view .LVU330
 1112              		.loc 1 899 3 view .LVU331
 1113 0008 094B     		ldr	r3, .L68
 1114 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1115 000c 6BB1     		cbz	r3, .L67
 1116              	.LVL114:
 1117              	.L65:
 1118              		.loc 1 899 3 discriminator 3 view .LVU332
 1119              	.LBB3:
 900:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1120              		.loc 1 900 3 discriminator 3 view .LVU333
 1121              		.loc 1 900 3 discriminator 3 view .LVU334
 1122              		.syntax unified
 1123              	@ 900 "Core/Src/SEGGER_RTT.c" 1
 1124 000e EFF31187 		mrs   r7, basepri  
 1125 0012 4FF02001 		mov   r1, #32       
 1126 0016 81F31188 		msr   basepri, r1  
 1127              		
 1128              	@ 0 "" 2
 1129              	.LVL115:
 1130              		.loc 1 900 20 discriminator 3 view .LVU335
 901:Core/Src/SEGGER_RTT.c ****   //
 902:Core/Src/SEGGER_RTT.c ****   // Call the non-locking write function
 903:Core/Src/SEGGER_RTT.c ****   //
 904:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 1131              		.loc 1 904 3 discriminator 3 view .LVU336
 1132              		.loc 1 904 12 is_stmt 0 discriminator 3 view .LVU337
 1133              		.thumb
 1134              		.syntax unified
 1135 001a 3246     		mov	r2, r6
 1136 001c 2946     		mov	r1, r5
 1137 001e 2046     		mov	r0, r4
 1138 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1139              	.LVL116:
 905:Core/Src/SEGGER_RTT.c ****   //
 906:Core/Src/SEGGER_RTT.c ****   // Finish up.
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 40


 907:Core/Src/SEGGER_RTT.c ****   //
 908:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1140              		.loc 1 908 3 is_stmt 1 discriminator 3 view .LVU338
 1141              		.syntax unified
 1142              	@ 908 "Core/Src/SEGGER_RTT.c" 1
 1143 0024 87F31188 		msr   basepri, r7  
 1144              		
 1145              	@ 0 "" 2
 1146              		.thumb
 1147              		.syntax unified
 1148              	.LBE3:
 1149              		.loc 1 908 22 discriminator 3 view .LVU339
 909:Core/Src/SEGGER_RTT.c ****   //
 910:Core/Src/SEGGER_RTT.c ****   return Status;
 1150              		.loc 1 910 3 discriminator 3 view .LVU340
 911:Core/Src/SEGGER_RTT.c **** }
 1151              		.loc 1 911 1 is_stmt 0 discriminator 3 view .LVU341
 1152 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1153              	.LVL117:
 1154              	.L67:
 899:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1155              		.loc 1 899 3 is_stmt 1 discriminator 1 view .LVU342
 1156 002a FFF7FEFF 		bl	_DoInit
 1157              	.LVL118:
 899:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1158              		.loc 1 899 3 is_stmt 0 discriminator 1 view .LVU343
 1159 002e EEE7     		b	.L65
 1160              	.L69:
 1161              		.align	2
 1162              	.L68:
 1163 0030 00000000 		.word	.LANCHOR1
 1164              		.cfi_endproc
 1165              	.LFE9:
 1167              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1168              		.align	1
 1169              		.global	SEGGER_RTT_WriteString
 1170              		.syntax unified
 1171              		.thumb
 1172              		.thumb_func
 1173              		.fpu fpv4-sp-d16
 1175              	SEGGER_RTT_WriteString:
 1176              	.LVL119:
 1177              	.LFB10:
 912:Core/Src/SEGGER_RTT.c **** 
 913:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 914:Core/Src/SEGGER_RTT.c **** *
 915:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
 916:Core/Src/SEGGER_RTT.c **** *
 917:Core/Src/SEGGER_RTT.c **** *  Function description
 918:Core/Src/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
 919:Core/Src/SEGGER_RTT.c **** *    This data is read by the host.
 920:Core/Src/SEGGER_RTT.c **** *
 921:Core/Src/SEGGER_RTT.c **** *  Parameters
 922:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 923:Core/Src/SEGGER_RTT.c **** *    s            Pointer to string.
 924:Core/Src/SEGGER_RTT.c **** *
 925:Core/Src/SEGGER_RTT.c **** *  Return value
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 41


 926:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 927:Core/Src/SEGGER_RTT.c **** *
 928:Core/Src/SEGGER_RTT.c **** *  Notes
 929:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
 930:Core/Src/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
 931:Core/Src/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
 932:Core/Src/SEGGER_RTT.c **** */
 933:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1178              		.loc 1 933 70 is_stmt 1 view -0
 1179              		.cfi_startproc
 1180              		@ args = 0, pretend = 0, frame = 0
 1181              		@ frame_needed = 0, uses_anonymous_args = 0
 1182              		.loc 1 933 70 is_stmt 0 view .LVU345
 1183 0000 38B5     		push	{r3, r4, r5, lr}
 1184              	.LCFI10:
 1185              		.cfi_def_cfa_offset 16
 1186              		.cfi_offset 3, -16
 1187              		.cfi_offset 4, -12
 1188              		.cfi_offset 5, -8
 1189              		.cfi_offset 14, -4
 1190 0002 0546     		mov	r5, r0
 1191 0004 0C46     		mov	r4, r1
 934:Core/Src/SEGGER_RTT.c ****   unsigned Len;
 1192              		.loc 1 934 3 is_stmt 1 view .LVU346
 935:Core/Src/SEGGER_RTT.c **** 
 936:Core/Src/SEGGER_RTT.c ****   Len = STRLEN(s);
 1193              		.loc 1 936 3 view .LVU347
 1194              		.loc 1 936 9 is_stmt 0 view .LVU348
 1195 0006 0846     		mov	r0, r1
 1196              	.LVL120:
 1197              		.loc 1 936 9 view .LVU349
 1198 0008 FFF7FEFF 		bl	strlen
 1199              	.LVL121:
 1200              		.loc 1 936 9 view .LVU350
 1201 000c 0246     		mov	r2, r0
 1202              	.LVL122:
 937:Core/Src/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1203              		.loc 1 937 3 is_stmt 1 view .LVU351
 1204              		.loc 1 937 10 is_stmt 0 view .LVU352
 1205 000e 2146     		mov	r1, r4
 1206 0010 2846     		mov	r0, r5
 1207              	.LVL123:
 1208              		.loc 1 937 10 view .LVU353
 1209 0012 FFF7FEFF 		bl	SEGGER_RTT_Write
 1210              	.LVL124:
 938:Core/Src/SEGGER_RTT.c **** }
 1211              		.loc 1 938 1 view .LVU354
 1212 0016 38BD     		pop	{r3, r4, r5, pc}
 1213              		.loc 1 938 1 view .LVU355
 1214              		.cfi_endproc
 1215              	.LFE10:
 1217              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1218              		.align	1
 1219              		.global	SEGGER_RTT_PutCharSkipNoLock
 1220              		.syntax unified
 1221              		.thumb
 1222              		.thumb_func
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 42


 1223              		.fpu fpv4-sp-d16
 1225              	SEGGER_RTT_PutCharSkipNoLock:
 1226              	.LVL125:
 1227              	.LFB11:
 939:Core/Src/SEGGER_RTT.c **** 
 940:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 941:Core/Src/SEGGER_RTT.c **** *
 942:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
 943:Core/Src/SEGGER_RTT.c **** *
 944:Core/Src/SEGGER_RTT.c **** *  Function description
 945:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
 946:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
 947:Core/Src/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
 948:Core/Src/SEGGER_RTT.c **** *
 949:Core/Src/SEGGER_RTT.c **** *  Parameters
 950:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 951:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
 952:Core/Src/SEGGER_RTT.c **** *
 953:Core/Src/SEGGER_RTT.c **** *  Return value
 954:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
 955:Core/Src/SEGGER_RTT.c **** *
 956:Core/Src/SEGGER_RTT.c **** *  Notes
 957:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
 958:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 959:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 960:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 961:Core/Src/SEGGER_RTT.c **** */
 962:Core/Src/SEGGER_RTT.c **** 
 963:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1228              		.loc 1 963 69 is_stmt 1 view -0
 1229              		.cfi_startproc
 1230              		@ args = 0, pretend = 0, frame = 0
 1231              		@ frame_needed = 0, uses_anonymous_args = 0
 1232              		@ link register save eliminated.
 1233              		.loc 1 963 69 is_stmt 0 view .LVU357
 1234 0000 30B4     		push	{r4, r5}
 1235              	.LCFI11:
 1236              		.cfi_def_cfa_offset 8
 1237              		.cfi_offset 4, -8
 1238              		.cfi_offset 5, -4
 964:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1239              		.loc 1 964 3 is_stmt 1 view .LVU358
 965:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 1240              		.loc 1 965 3 view .LVU359
 966:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1241              		.loc 1 966 3 view .LVU360
 967:Core/Src/SEGGER_RTT.c ****   //
 968:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
 969:Core/Src/SEGGER_RTT.c ****   //
 970:Core/Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1242              		.loc 1 970 3 view .LVU361
 1243              	.LVL126:
 971:Core/Src/SEGGER_RTT.c ****   //
 972:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
 973:Core/Src/SEGGER_RTT.c ****   //
 974:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1244              		.loc 1 974 3 view .LVU362
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 43


 1245              		.loc 1 974 16 is_stmt 0 view .LVU363
 1246 0002 00EB4002 		add	r2, r0, r0, lsl #1
 1247 0006 114B     		ldr	r3, .L79
 1248 0008 03EBC203 		add	r3, r3, r2, lsl #3
 1249 000c 5D6A     		ldr	r5, [r3, #36]
 1250              		.loc 1 974 9 view .LVU364
 1251 000e 6A1C     		adds	r2, r5, #1
 1252              	.LVL127:
 975:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1253              		.loc 1 975 3 is_stmt 1 view .LVU365
 1254              		.loc 1 975 21 is_stmt 0 view .LVU366
 1255 0010 1B6A     		ldr	r3, [r3, #32]
 1256              		.loc 1 975 6 view .LVU367
 1257 0012 9342     		cmp	r3, r2
 1258 0014 16D0     		beq	.L78
 1259              	.LVL128:
 1260              	.L73:
 976:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
 977:Core/Src/SEGGER_RTT.c ****   }
 978:Core/Src/SEGGER_RTT.c ****   //
 979:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
 980:Core/Src/SEGGER_RTT.c ****   //
 981:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1261              		.loc 1 981 3 is_stmt 1 view .LVU368
 1262              		.loc 1 981 21 is_stmt 0 view .LVU369
 1263 0016 00EB4003 		add	r3, r0, r0, lsl #1
 1264 001a 0C4C     		ldr	r4, .L79
 1265 001c 04EBC303 		add	r3, r4, r3, lsl #3
 1266 0020 9B6A     		ldr	r3, [r3, #40]
 1267              		.loc 1 981 6 view .LVU370
 1268 0022 9342     		cmp	r3, r2
 1269 0024 10D0     		beq	.L76
 982:Core/Src/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1270              		.loc 1 982 5 is_stmt 1 view .LVU371
 1271              		.loc 1 982 10 is_stmt 0 view .LVU372
 1272 0026 431C     		adds	r3, r0, #1
 1273 0028 03EB4303 		add	r3, r3, r3, lsl #1
 1274 002c 04EBC303 		add	r3, r4, r3, lsl #3
 1275 0030 5B68     		ldr	r3, [r3, #4]
 1276              		.loc 1 982 34 view .LVU373
 1277 0032 5955     		strb	r1, [r3, r5]
 983:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1278              		.loc 1 983 5 is_stmt 1 view .LVU374
 1279              		.loc 1 983 18 is_stmt 0 view .LVU375
 1280 0034 00EB4000 		add	r0, r0, r0, lsl #1
 1281              	.LVL129:
 1282              		.loc 1 983 18 view .LVU376
 1283 0038 04EBC000 		add	r0, r4, r0, lsl #3
 1284 003c 4262     		str	r2, [r0, #36]
 984:Core/Src/SEGGER_RTT.c ****     Status = 1;
 1285              		.loc 1 984 5 is_stmt 1 view .LVU377
 1286              	.LVL130:
 1287              		.loc 1 984 12 is_stmt 0 view .LVU378
 1288 003e 0120     		movs	r0, #1
 1289              	.LVL131:
 1290              	.L72:
 985:Core/Src/SEGGER_RTT.c ****   } else {
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 44


 986:Core/Src/SEGGER_RTT.c ****     Status = 0;
 987:Core/Src/SEGGER_RTT.c ****   }
 988:Core/Src/SEGGER_RTT.c ****   //
 989:Core/Src/SEGGER_RTT.c ****   return Status;
 990:Core/Src/SEGGER_RTT.c **** }
 1291              		.loc 1 990 1 view .LVU379
 1292 0040 30BC     		pop	{r4, r5}
 1293              	.LCFI12:
 1294              		.cfi_remember_state
 1295              		.cfi_restore 5
 1296              		.cfi_restore 4
 1297              		.cfi_def_cfa_offset 0
 1298 0042 7047     		bx	lr
 1299              	.LVL132:
 1300              	.L78:
 1301              	.LCFI13:
 1302              		.cfi_restore_state
 976:Core/Src/SEGGER_RTT.c ****   }
 1303              		.loc 1 976 11 view .LVU380
 1304 0044 0022     		movs	r2, #0
 1305              	.LVL133:
 976:Core/Src/SEGGER_RTT.c ****   }
 1306              		.loc 1 976 11 view .LVU381
 1307 0046 E6E7     		b	.L73
 1308              	.LVL134:
 1309              	.L76:
 986:Core/Src/SEGGER_RTT.c ****   }
 1310              		.loc 1 986 12 view .LVU382
 1311 0048 0020     		movs	r0, #0
 1312              	.LVL135:
 989:Core/Src/SEGGER_RTT.c **** }
 1313              		.loc 1 989 3 is_stmt 1 view .LVU383
 989:Core/Src/SEGGER_RTT.c **** }
 1314              		.loc 1 989 10 is_stmt 0 view .LVU384
 1315 004a F9E7     		b	.L72
 1316              	.L80:
 1317              		.align	2
 1318              	.L79:
 1319 004c 00000000 		.word	.LANCHOR1
 1320              		.cfi_endproc
 1321              	.LFE11:
 1323              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1324              		.align	1
 1325              		.global	SEGGER_RTT_PutCharSkip
 1326              		.syntax unified
 1327              		.thumb
 1328              		.thumb_func
 1329              		.fpu fpv4-sp-d16
 1331              	SEGGER_RTT_PutCharSkip:
 1332              	.LVL136:
 1333              	.LFB12:
 991:Core/Src/SEGGER_RTT.c **** 
 992:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 993:Core/Src/SEGGER_RTT.c **** *
 994:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
 995:Core/Src/SEGGER_RTT.c **** *
 996:Core/Src/SEGGER_RTT.c **** *  Function description
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 45


 997:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
 998:Core/Src/SEGGER_RTT.c **** *
 999:Core/Src/SEGGER_RTT.c **** *  Parameters
1000:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1001:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1002:Core/Src/SEGGER_RTT.c **** *
1003:Core/Src/SEGGER_RTT.c **** *  Return value
1004:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1005:Core/Src/SEGGER_RTT.c **** *
1006:Core/Src/SEGGER_RTT.c **** *  Notes
1007:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1008:Core/Src/SEGGER_RTT.c **** */
1009:Core/Src/SEGGER_RTT.c **** 
1010:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1334              		.loc 1 1010 63 is_stmt 1 view -0
 1335              		.cfi_startproc
 1336              		@ args = 0, pretend = 0, frame = 0
 1337              		@ frame_needed = 0, uses_anonymous_args = 0
 1338              		.loc 1 1010 63 is_stmt 0 view .LVU386
 1339 0000 38B5     		push	{r3, r4, r5, lr}
 1340              	.LCFI14:
 1341              		.cfi_def_cfa_offset 16
 1342              		.cfi_offset 3, -16
 1343              		.cfi_offset 4, -12
 1344              		.cfi_offset 5, -8
 1345              		.cfi_offset 14, -4
 1346 0002 0446     		mov	r4, r0
 1347 0004 0D46     		mov	r5, r1
1011:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1348              		.loc 1 1011 3 is_stmt 1 view .LVU387
1012:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 1349              		.loc 1 1012 3 view .LVU388
1013:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1350              		.loc 1 1013 3 view .LVU389
1014:Core/Src/SEGGER_RTT.c ****   //
1015:Core/Src/SEGGER_RTT.c ****   // Prepare
1016:Core/Src/SEGGER_RTT.c ****   //
1017:Core/Src/SEGGER_RTT.c ****   INIT();
 1351              		.loc 1 1017 3 view .LVU390
 1352              		.loc 1 1017 3 view .LVU391
 1353 0006 194B     		ldr	r3, .L90
 1354 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1355 000a 3BB3     		cbz	r3, .L88
 1356              	.LVL137:
 1357              	.L82:
 1358              		.loc 1 1017 3 discriminator 3 view .LVU392
 1359              	.LBB4:
1018:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1360              		.loc 1 1018 3 discriminator 3 view .LVU393
 1361              		.loc 1 1018 3 discriminator 3 view .LVU394
 1362              		.syntax unified
 1363              	@ 1018 "Core/Src/SEGGER_RTT.c" 1
 1364 000c EFF3118C 		mrs   ip, basepri  
 1365 0010 4FF02001 		mov   r1, #32       
 1366 0014 81F31188 		msr   basepri, r1  
 1367              		
 1368              	@ 0 "" 2
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 46


 1369              	.LVL138:
 1370              		.loc 1 1018 20 discriminator 3 view .LVU395
1019:Core/Src/SEGGER_RTT.c ****   //
1020:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1021:Core/Src/SEGGER_RTT.c ****   //
1022:Core/Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1371              		.loc 1 1022 3 discriminator 3 view .LVU396
1023:Core/Src/SEGGER_RTT.c ****   //
1024:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1025:Core/Src/SEGGER_RTT.c ****   //
1026:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1372              		.loc 1 1026 3 discriminator 3 view .LVU397
 1373              		.loc 1 1026 16 is_stmt 0 discriminator 3 view .LVU398
 1374              		.thumb
 1375              		.syntax unified
 1376 0018 04EB4403 		add	r3, r4, r4, lsl #1
 1377 001c 134A     		ldr	r2, .L90
 1378 001e 02EBC303 		add	r3, r2, r3, lsl #3
 1379 0022 586A     		ldr	r0, [r3, #36]
 1380              		.loc 1 1026 9 discriminator 3 view .LVU399
 1381 0024 421C     		adds	r2, r0, #1
 1382              	.LVL139:
1027:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1383              		.loc 1 1027 3 is_stmt 1 discriminator 3 view .LVU400
 1384              		.loc 1 1027 21 is_stmt 0 discriminator 3 view .LVU401
 1385 0026 1B6A     		ldr	r3, [r3, #32]
 1386              		.loc 1 1027 6 discriminator 3 view .LVU402
 1387 0028 9342     		cmp	r3, r2
 1388 002a 1AD0     		beq	.L89
 1389              	.LVL140:
 1390              	.L83:
1028:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
1029:Core/Src/SEGGER_RTT.c ****   }
1030:Core/Src/SEGGER_RTT.c ****   //
1031:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1032:Core/Src/SEGGER_RTT.c ****   //
1033:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1391              		.loc 1 1033 3 is_stmt 1 view .LVU403
 1392              		.loc 1 1033 21 is_stmt 0 view .LVU404
 1393 002c 04EB4403 		add	r3, r4, r4, lsl #1
 1394 0030 0E49     		ldr	r1, .L90
 1395 0032 01EBC303 		add	r3, r1, r3, lsl #3
 1396 0036 9B6A     		ldr	r3, [r3, #40]
 1397              		.loc 1 1033 6 view .LVU405
 1398 0038 9342     		cmp	r3, r2
 1399 003a 14D0     		beq	.L86
1034:Core/Src/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1400              		.loc 1 1034 5 is_stmt 1 view .LVU406
 1401              		.loc 1 1034 10 is_stmt 0 view .LVU407
 1402 003c 631C     		adds	r3, r4, #1
 1403 003e 03EB4303 		add	r3, r3, r3, lsl #1
 1404 0042 01EBC303 		add	r3, r1, r3, lsl #3
 1405 0046 5B68     		ldr	r3, [r3, #4]
 1406              		.loc 1 1034 34 view .LVU408
 1407 0048 1D54     		strb	r5, [r3, r0]
1035:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1408              		.loc 1 1035 5 is_stmt 1 view .LVU409
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 47


 1409              		.loc 1 1035 18 is_stmt 0 view .LVU410
 1410 004a 04EB4404 		add	r4, r4, r4, lsl #1
 1411              	.LVL141:
 1412              		.loc 1 1035 18 view .LVU411
 1413 004e 01EBC404 		add	r4, r1, r4, lsl #3
 1414 0052 6262     		str	r2, [r4, #36]
1036:Core/Src/SEGGER_RTT.c ****     Status = 1;
 1415              		.loc 1 1036 5 is_stmt 1 view .LVU412
 1416              	.LVL142:
 1417              		.loc 1 1036 12 is_stmt 0 view .LVU413
 1418 0054 0120     		movs	r0, #1
 1419              	.LVL143:
 1420              	.L84:
1037:Core/Src/SEGGER_RTT.c ****   } else {
1038:Core/Src/SEGGER_RTT.c ****     Status = 0;
1039:Core/Src/SEGGER_RTT.c ****   }
1040:Core/Src/SEGGER_RTT.c ****   //
1041:Core/Src/SEGGER_RTT.c ****   // Finish up.
1042:Core/Src/SEGGER_RTT.c ****   //
1043:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1421              		.loc 1 1043 3 is_stmt 1 view .LVU414
 1422              		.syntax unified
 1423              	@ 1043 "Core/Src/SEGGER_RTT.c" 1
 1424 0056 8CF31188 		msr   basepri, ip  
 1425              		
 1426              	@ 0 "" 2
 1427              		.thumb
 1428              		.syntax unified
 1429              	.LBE4:
 1430              		.loc 1 1043 22 view .LVU415
1044:Core/Src/SEGGER_RTT.c ****   //
1045:Core/Src/SEGGER_RTT.c ****   return Status;
 1431              		.loc 1 1045 3 view .LVU416
1046:Core/Src/SEGGER_RTT.c **** }
 1432              		.loc 1 1046 1 is_stmt 0 view .LVU417
 1433 005a 38BD     		pop	{r3, r4, r5, pc}
 1434              	.LVL144:
 1435              	.L88:
1017:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1436              		.loc 1 1017 3 is_stmt 1 discriminator 1 view .LVU418
 1437 005c FFF7FEFF 		bl	_DoInit
 1438              	.LVL145:
1017:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1439              		.loc 1 1017 3 is_stmt 0 discriminator 1 view .LVU419
 1440 0060 D4E7     		b	.L82
 1441              	.LVL146:
 1442              	.L89:
 1443              	.LBB5:
1028:Core/Src/SEGGER_RTT.c ****   }
 1444              		.loc 1 1028 11 view .LVU420
 1445 0062 0022     		movs	r2, #0
 1446              	.LVL147:
1028:Core/Src/SEGGER_RTT.c ****   }
 1447              		.loc 1 1028 11 view .LVU421
 1448 0064 E2E7     		b	.L83
 1449              	.LVL148:
 1450              	.L86:
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 48


1038:Core/Src/SEGGER_RTT.c ****   }
 1451              		.loc 1 1038 12 view .LVU422
 1452 0066 0020     		movs	r0, #0
 1453 0068 F5E7     		b	.L84
 1454              	.L91:
 1455 006a 00BF     		.align	2
 1456              	.L90:
 1457 006c 00000000 		.word	.LANCHOR1
 1458              	.LBE5:
 1459              		.cfi_endproc
 1460              	.LFE12:
 1462              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 1463              		.align	1
 1464              		.global	SEGGER_RTT_PutChar
 1465              		.syntax unified
 1466              		.thumb
 1467              		.thumb_func
 1468              		.fpu fpv4-sp-d16
 1470              	SEGGER_RTT_PutChar:
 1471              	.LVL149:
 1472              	.LFB13:
1047:Core/Src/SEGGER_RTT.c **** 
1048:Core/Src/SEGGER_RTT.c ****  /*********************************************************************
1049:Core/Src/SEGGER_RTT.c **** *
1050:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1051:Core/Src/SEGGER_RTT.c **** *
1052:Core/Src/SEGGER_RTT.c **** *  Function description
1053:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1054:Core/Src/SEGGER_RTT.c **** *
1055:Core/Src/SEGGER_RTT.c **** *  Parameters
1056:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1057:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1058:Core/Src/SEGGER_RTT.c **** *
1059:Core/Src/SEGGER_RTT.c **** *  Return value
1060:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1061:Core/Src/SEGGER_RTT.c **** *
1062:Core/Src/SEGGER_RTT.c **** *  Notes
1063:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1064:Core/Src/SEGGER_RTT.c **** */
1065:Core/Src/SEGGER_RTT.c **** 
1066:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 1473              		.loc 1 1066 59 is_stmt 1 view -0
 1474              		.cfi_startproc
 1475              		@ args = 0, pretend = 0, frame = 0
 1476              		@ frame_needed = 0, uses_anonymous_args = 0
 1477              		.loc 1 1066 59 is_stmt 0 view .LVU424
 1478 0000 38B5     		push	{r3, r4, r5, lr}
 1479              	.LCFI15:
 1480              		.cfi_def_cfa_offset 16
 1481              		.cfi_offset 3, -16
 1482              		.cfi_offset 4, -12
 1483              		.cfi_offset 5, -8
 1484              		.cfi_offset 14, -4
 1485 0002 0446     		mov	r4, r0
 1486 0004 0D46     		mov	r5, r1
1067:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1487              		.loc 1 1067 3 is_stmt 1 view .LVU425
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 49


1068:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 1488              		.loc 1 1068 3 view .LVU426
1069:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
 1489              		.loc 1 1069 3 view .LVU427
1070:Core/Src/SEGGER_RTT.c ****   //
1071:Core/Src/SEGGER_RTT.c ****   // Prepare
1072:Core/Src/SEGGER_RTT.c ****   //
1073:Core/Src/SEGGER_RTT.c ****   INIT();
 1490              		.loc 1 1073 3 view .LVU428
 1491              		.loc 1 1073 3 view .LVU429
 1492 0006 214B     		ldr	r3, .L103
 1493 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1494 000a 7BB3     		cbz	r3, .L101
 1495              	.LVL150:
 1496              	.L93:
 1497              		.loc 1 1073 3 discriminator 3 view .LVU430
 1498              	.LBB6:
1074:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1499              		.loc 1 1074 3 discriminator 3 view .LVU431
 1500              		.loc 1 1074 3 discriminator 3 view .LVU432
 1501              		.syntax unified
 1502              	@ 1074 "Core/Src/SEGGER_RTT.c" 1
 1503 000c EFF3118C 		mrs   ip, basepri  
 1504 0010 4FF02001 		mov   r1, #32       
 1505 0014 81F31188 		msr   basepri, r1  
 1506              		
 1507              	@ 0 "" 2
 1508              	.LVL151:
 1509              		.loc 1 1074 20 discriminator 3 view .LVU433
1075:Core/Src/SEGGER_RTT.c ****   //
1076:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1077:Core/Src/SEGGER_RTT.c ****   //
1078:Core/Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1510              		.loc 1 1078 3 discriminator 3 view .LVU434
1079:Core/Src/SEGGER_RTT.c ****   //
1080:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1081:Core/Src/SEGGER_RTT.c ****   //
1082:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1511              		.loc 1 1082 3 discriminator 3 view .LVU435
 1512              		.loc 1 1082 16 is_stmt 0 discriminator 3 view .LVU436
 1513              		.thumb
 1514              		.syntax unified
 1515 0018 04EB4403 		add	r3, r4, r4, lsl #1
 1516 001c 1B4A     		ldr	r2, .L103
 1517 001e 02EBC303 		add	r3, r2, r3, lsl #3
 1518 0022 596A     		ldr	r1, [r3, #36]
 1519              		.loc 1 1082 9 discriminator 3 view .LVU437
 1520 0024 481C     		adds	r0, r1, #1
 1521              	.LVL152:
1083:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1522              		.loc 1 1083 3 is_stmt 1 discriminator 3 view .LVU438
 1523              		.loc 1 1083 21 is_stmt 0 discriminator 3 view .LVU439
 1524 0026 1B6A     		ldr	r3, [r3, #32]
 1525              		.loc 1 1083 6 discriminator 3 view .LVU440
 1526 0028 8342     		cmp	r3, r0
 1527 002a 22D0     		beq	.L102
 1528              	.LVL153:
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 50


 1529              	.L94:
1084:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
1085:Core/Src/SEGGER_RTT.c ****   }
1086:Core/Src/SEGGER_RTT.c ****   //
1087:Core/Src/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1088:Core/Src/SEGGER_RTT.c ****   //
1089:Core/Src/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 1530              		.loc 1 1089 3 is_stmt 1 view .LVU441
 1531              		.loc 1 1089 12 is_stmt 0 view .LVU442
 1532 002c 04EB4403 		add	r3, r4, r4, lsl #1
 1533 0030 164A     		ldr	r2, .L103
 1534 0032 02EBC303 		add	r3, r2, r3, lsl #3
 1535 0036 DB6A     		ldr	r3, [r3, #44]
 1536              		.loc 1 1089 6 view .LVU443
 1537 0038 022B     		cmp	r3, #2
 1538 003a 1CD0     		beq	.L96
 1539              	.L95:
1090:Core/Src/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
1091:Core/Src/SEGGER_RTT.c ****       ;
1092:Core/Src/SEGGER_RTT.c ****     }
1093:Core/Src/SEGGER_RTT.c ****   }
1094:Core/Src/SEGGER_RTT.c ****   //
1095:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1096:Core/Src/SEGGER_RTT.c ****   //
1097:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1540              		.loc 1 1097 3 is_stmt 1 view .LVU444
 1541              		.loc 1 1097 21 is_stmt 0 view .LVU445
 1542 003c 04EB4403 		add	r3, r4, r4, lsl #1
 1543 0040 124A     		ldr	r2, .L103
 1544 0042 02EBC303 		add	r3, r2, r3, lsl #3
 1545 0046 9B6A     		ldr	r3, [r3, #40]
 1546              		.loc 1 1097 6 view .LVU446
 1547 0048 8342     		cmp	r3, r0
 1548 004a 1DD0     		beq	.L99
1098:Core/Src/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1549              		.loc 1 1098 5 is_stmt 1 view .LVU447
 1550              		.loc 1 1098 10 is_stmt 0 view .LVU448
 1551 004c 631C     		adds	r3, r4, #1
 1552 004e 03EB4303 		add	r3, r3, r3, lsl #1
 1553 0052 02EBC303 		add	r3, r2, r3, lsl #3
 1554 0056 5B68     		ldr	r3, [r3, #4]
 1555              		.loc 1 1098 34 view .LVU449
 1556 0058 5D54     		strb	r5, [r3, r1]
1099:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1557              		.loc 1 1099 5 is_stmt 1 view .LVU450
 1558              		.loc 1 1099 18 is_stmt 0 view .LVU451
 1559 005a 04EB4404 		add	r4, r4, r4, lsl #1
 1560              	.LVL154:
 1561              		.loc 1 1099 18 view .LVU452
 1562 005e 02EBC404 		add	r4, r2, r4, lsl #3
 1563 0062 6062     		str	r0, [r4, #36]
1100:Core/Src/SEGGER_RTT.c ****     Status = 1;
 1564              		.loc 1 1100 5 is_stmt 1 view .LVU453
 1565              	.LVL155:
 1566              		.loc 1 1100 12 is_stmt 0 view .LVU454
 1567 0064 0120     		movs	r0, #1
 1568              	.LVL156:
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 51


 1569              	.L97:
1101:Core/Src/SEGGER_RTT.c ****   } else {
1102:Core/Src/SEGGER_RTT.c ****     Status = 0;
1103:Core/Src/SEGGER_RTT.c ****   }
1104:Core/Src/SEGGER_RTT.c ****   //
1105:Core/Src/SEGGER_RTT.c ****   // Finish up.
1106:Core/Src/SEGGER_RTT.c ****   //
1107:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1570              		.loc 1 1107 3 is_stmt 1 view .LVU455
 1571              		.syntax unified
 1572              	@ 1107 "Core/Src/SEGGER_RTT.c" 1
 1573 0066 8CF31188 		msr   basepri, ip  
 1574              		
 1575              	@ 0 "" 2
 1576              		.thumb
 1577              		.syntax unified
 1578              	.LBE6:
 1579              		.loc 1 1107 22 view .LVU456
1108:Core/Src/SEGGER_RTT.c ****   //
1109:Core/Src/SEGGER_RTT.c ****   return Status;
 1580              		.loc 1 1109 3 view .LVU457
1110:Core/Src/SEGGER_RTT.c **** }
 1581              		.loc 1 1110 1 is_stmt 0 view .LVU458
 1582 006a 38BD     		pop	{r3, r4, r5, pc}
 1583              	.LVL157:
 1584              	.L101:
1073:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1585              		.loc 1 1073 3 is_stmt 1 discriminator 1 view .LVU459
 1586 006c FFF7FEFF 		bl	_DoInit
 1587              	.LVL158:
1073:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1588              		.loc 1 1073 3 is_stmt 0 discriminator 1 view .LVU460
 1589 0070 CCE7     		b	.L93
 1590              	.LVL159:
 1591              	.L102:
 1592              	.LBB7:
1084:Core/Src/SEGGER_RTT.c ****   }
 1593              		.loc 1 1084 11 view .LVU461
 1594 0072 0020     		movs	r0, #0
 1595              	.LVL160:
1084:Core/Src/SEGGER_RTT.c ****   }
 1596              		.loc 1 1084 11 view .LVU462
 1597 0074 DAE7     		b	.L94
 1598              	.LVL161:
 1599              	.L96:
1091:Core/Src/SEGGER_RTT.c ****     }
 1600              		.loc 1 1091 7 is_stmt 1 discriminator 1 view .LVU463
1090:Core/Src/SEGGER_RTT.c ****       ;
 1601              		.loc 1 1090 11 discriminator 1 view .LVU464
1090:Core/Src/SEGGER_RTT.c ****       ;
 1602              		.loc 1 1090 26 is_stmt 0 discriminator 1 view .LVU465
 1603 0076 04EB4403 		add	r3, r4, r4, lsl #1
 1604 007a 044A     		ldr	r2, .L103
 1605 007c 02EBC303 		add	r3, r2, r3, lsl #3
 1606 0080 9B6A     		ldr	r3, [r3, #40]
1090:Core/Src/SEGGER_RTT.c ****       ;
 1607              		.loc 1 1090 11 discriminator 1 view .LVU466
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 52


 1608 0082 8342     		cmp	r3, r0
 1609 0084 F7D0     		beq	.L96
 1610 0086 D9E7     		b	.L95
 1611              	.L99:
1102:Core/Src/SEGGER_RTT.c ****   }
 1612              		.loc 1 1102 12 view .LVU467
 1613 0088 0020     		movs	r0, #0
 1614              	.LVL162:
1102:Core/Src/SEGGER_RTT.c ****   }
 1615              		.loc 1 1102 12 view .LVU468
 1616 008a ECE7     		b	.L97
 1617              	.L104:
 1618              		.align	2
 1619              	.L103:
 1620 008c 00000000 		.word	.LANCHOR1
 1621              	.LBE7:
 1622              		.cfi_endproc
 1623              	.LFE13:
 1625              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 1626              		.align	1
 1627              		.global	SEGGER_RTT_GetKey
 1628              		.syntax unified
 1629              		.thumb
 1630              		.thumb_func
 1631              		.fpu fpv4-sp-d16
 1633              	SEGGER_RTT_GetKey:
 1634              	.LFB14:
1111:Core/Src/SEGGER_RTT.c **** 
1112:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1113:Core/Src/SEGGER_RTT.c **** *
1114:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1115:Core/Src/SEGGER_RTT.c **** *
1116:Core/Src/SEGGER_RTT.c **** *  Function description
1117:Core/Src/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1118:Core/Src/SEGGER_RTT.c **** *    Host has previously stored data there.
1119:Core/Src/SEGGER_RTT.c **** *
1120:Core/Src/SEGGER_RTT.c **** *  Return value
1121:Core/Src/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1122:Core/Src/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1123:Core/Src/SEGGER_RTT.c **** *
1124:Core/Src/SEGGER_RTT.c **** *  Notes
1125:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1126:Core/Src/SEGGER_RTT.c **** */
1127:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 1635              		.loc 1 1127 29 is_stmt 1 view -0
 1636              		.cfi_startproc
 1637              		@ args = 0, pretend = 0, frame = 8
 1638              		@ frame_needed = 0, uses_anonymous_args = 0
 1639 0000 00B5     		push	{lr}
 1640              	.LCFI16:
 1641              		.cfi_def_cfa_offset 4
 1642              		.cfi_offset 14, -4
 1643 0002 83B0     		sub	sp, sp, #12
 1644              	.LCFI17:
 1645              		.cfi_def_cfa_offset 16
1128:Core/Src/SEGGER_RTT.c ****   char c;
 1646              		.loc 1 1128 3 view .LVU470
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 53


1129:Core/Src/SEGGER_RTT.c ****   int r;
 1647              		.loc 1 1129 3 view .LVU471
1130:Core/Src/SEGGER_RTT.c **** 
1131:Core/Src/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 1648              		.loc 1 1131 3 view .LVU472
 1649              		.loc 1 1131 12 is_stmt 0 view .LVU473
 1650 0004 0122     		movs	r2, #1
 1651 0006 0DF10701 		add	r1, sp, #7
 1652 000a 0020     		movs	r0, #0
 1653 000c FFF7FEFF 		bl	SEGGER_RTT_Read
 1654              	.LVL163:
1132:Core/Src/SEGGER_RTT.c ****   if (r == 1) {
 1655              		.loc 1 1132 3 is_stmt 1 view .LVU474
 1656              		.loc 1 1132 6 is_stmt 0 view .LVU475
 1657 0010 0128     		cmp	r0, #1
 1658 0012 04D1     		bne	.L107
1133:Core/Src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 1659              		.loc 1 1133 5 is_stmt 1 view .LVU476
 1660              		.loc 1 1133 9 is_stmt 0 view .LVU477
 1661 0014 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1662              	.LVL164:
 1663              	.L105:
1134:Core/Src/SEGGER_RTT.c ****   } else {
1135:Core/Src/SEGGER_RTT.c ****     r = -1;
1136:Core/Src/SEGGER_RTT.c ****   }
1137:Core/Src/SEGGER_RTT.c ****   return r;
1138:Core/Src/SEGGER_RTT.c **** }
 1664              		.loc 1 1138 1 view .LVU478
 1665 0018 03B0     		add	sp, sp, #12
 1666              	.LCFI18:
 1667              		.cfi_remember_state
 1668              		.cfi_def_cfa_offset 4
 1669              		@ sp needed
 1670 001a 5DF804FB 		ldr	pc, [sp], #4
 1671              	.LVL165:
 1672              	.L107:
 1673              	.LCFI19:
 1674              		.cfi_restore_state
1135:Core/Src/SEGGER_RTT.c ****   }
 1675              		.loc 1 1135 7 view .LVU479
 1676 001e 4FF0FF30 		mov	r0, #-1
 1677              	.LVL166:
1137:Core/Src/SEGGER_RTT.c **** }
 1678              		.loc 1 1137 3 is_stmt 1 view .LVU480
1137:Core/Src/SEGGER_RTT.c **** }
 1679              		.loc 1 1137 10 is_stmt 0 view .LVU481
 1680 0022 F9E7     		b	.L105
 1681              		.cfi_endproc
 1682              	.LFE14:
 1684              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 1685              		.align	1
 1686              		.global	SEGGER_RTT_WaitKey
 1687              		.syntax unified
 1688              		.thumb
 1689              		.thumb_func
 1690              		.fpu fpv4-sp-d16
 1692              	SEGGER_RTT_WaitKey:
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 54


 1693              	.LFB15:
1139:Core/Src/SEGGER_RTT.c **** 
1140:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1141:Core/Src/SEGGER_RTT.c **** *
1142:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1143:Core/Src/SEGGER_RTT.c **** *
1144:Core/Src/SEGGER_RTT.c **** *  Function description
1145:Core/Src/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1146:Core/Src/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1147:Core/Src/SEGGER_RTT.c **** *
1148:Core/Src/SEGGER_RTT.c **** *  Return value
1149:Core/Src/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1150:Core/Src/SEGGER_RTT.c **** *
1151:Core/Src/SEGGER_RTT.c **** *  Notes
1152:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1153:Core/Src/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1154:Core/Src/SEGGER_RTT.c **** */
1155:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 1694              		.loc 1 1155 30 is_stmt 1 view -0
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 0
 1697              		@ frame_needed = 0, uses_anonymous_args = 0
 1698 0000 08B5     		push	{r3, lr}
 1699              	.LCFI20:
 1700              		.cfi_def_cfa_offset 8
 1701              		.cfi_offset 3, -8
 1702              		.cfi_offset 14, -4
 1703              	.L110:
1156:Core/Src/SEGGER_RTT.c ****   int r;
 1704              		.loc 1 1156 3 discriminator 1 view .LVU483
1157:Core/Src/SEGGER_RTT.c **** 
1158:Core/Src/SEGGER_RTT.c ****   do {
 1705              		.loc 1 1158 3 discriminator 1 view .LVU484
1159:Core/Src/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 1706              		.loc 1 1159 5 discriminator 1 view .LVU485
 1707              		.loc 1 1159 9 is_stmt 0 discriminator 1 view .LVU486
 1708 0002 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 1709              	.LVL167:
1160:Core/Src/SEGGER_RTT.c ****   } while (r < 0);
 1710              		.loc 1 1160 11 is_stmt 1 discriminator 1 view .LVU487
 1711              		.loc 1 1160 3 is_stmt 0 discriminator 1 view .LVU488
 1712 0006 0028     		cmp	r0, #0
 1713              		.loc 1 1160 3 discriminator 1 view .LVU489
 1714 0008 FBDB     		blt	.L110
1161:Core/Src/SEGGER_RTT.c ****   return r;
 1715              		.loc 1 1161 3 is_stmt 1 view .LVU490
1162:Core/Src/SEGGER_RTT.c **** }
 1716              		.loc 1 1162 1 is_stmt 0 view .LVU491
 1717 000a 08BD     		pop	{r3, pc}
 1718              		.cfi_endproc
 1719              	.LFE15:
 1721              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 1722              		.align	1
 1723              		.global	SEGGER_RTT_HasKey
 1724              		.syntax unified
 1725              		.thumb
 1726              		.thumb_func
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 55


 1727              		.fpu fpv4-sp-d16
 1729              	SEGGER_RTT_HasKey:
 1730              	.LFB16:
1163:Core/Src/SEGGER_RTT.c **** 
1164:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1165:Core/Src/SEGGER_RTT.c **** *
1166:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1167:Core/Src/SEGGER_RTT.c **** *
1168:Core/Src/SEGGER_RTT.c **** *  Function description
1169:Core/Src/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1170:Core/Src/SEGGER_RTT.c **** *
1171:Core/Src/SEGGER_RTT.c **** *  Return value
1172:Core/Src/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1173:Core/Src/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1174:Core/Src/SEGGER_RTT.c **** *
1175:Core/Src/SEGGER_RTT.c **** *  Notes
1176:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1177:Core/Src/SEGGER_RTT.c **** */
1178:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 1731              		.loc 1 1178 29 is_stmt 1 view -0
 1732              		.cfi_startproc
 1733              		@ args = 0, pretend = 0, frame = 0
 1734              		@ frame_needed = 0, uses_anonymous_args = 0
 1735 0000 08B5     		push	{r3, lr}
 1736              	.LCFI21:
 1737              		.cfi_def_cfa_offset 8
 1738              		.cfi_offset 3, -8
 1739              		.cfi_offset 14, -4
1179:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 1740              		.loc 1 1179 3 view .LVU493
1180:Core/Src/SEGGER_RTT.c ****   int r;
 1741              		.loc 1 1180 3 view .LVU494
1181:Core/Src/SEGGER_RTT.c **** 
1182:Core/Src/SEGGER_RTT.c ****   INIT();
 1742              		.loc 1 1182 3 view .LVU495
 1743              		.loc 1 1182 3 view .LVU496
 1744 0002 074B     		ldr	r3, .L118
 1745 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1746 0006 33B1     		cbz	r3, .L117
 1747              	.L113:
 1748              		.loc 1 1182 3 discriminator 3 view .LVU497
1183:Core/Src/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aDown[0].RdOff;
 1749              		.loc 1 1183 3 discriminator 3 view .LVU498
 1750              		.loc 1 1183 9 is_stmt 0 discriminator 3 view .LVU499
 1751 0008 054B     		ldr	r3, .L118
 1752 000a 1A6F     		ldr	r2, [r3, #112]
 1753              	.LVL168:
1184:Core/Src/SEGGER_RTT.c ****   if (RdOff != _SEGGER_RTT.aDown[0].WrOff) {
 1754              		.loc 1 1184 3 is_stmt 1 discriminator 3 view .LVU500
 1755              		.loc 1 1184 36 is_stmt 0 discriminator 3 view .LVU501
 1756 000c DB6E     		ldr	r3, [r3, #108]
 1757              		.loc 1 1184 6 discriminator 3 view .LVU502
 1758 000e 9342     		cmp	r3, r2
 1759 0010 04D0     		beq	.L115
1185:Core/Src/SEGGER_RTT.c ****     r = 1;
 1760              		.loc 1 1185 7 view .LVU503
 1761 0012 0120     		movs	r0, #1
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 56


 1762              	.L112:
1186:Core/Src/SEGGER_RTT.c ****   } else {
1187:Core/Src/SEGGER_RTT.c ****     r = 0;
1188:Core/Src/SEGGER_RTT.c ****   }
1189:Core/Src/SEGGER_RTT.c ****   return r;
1190:Core/Src/SEGGER_RTT.c **** }
 1763              		.loc 1 1190 1 view .LVU504
 1764 0014 08BD     		pop	{r3, pc}
 1765              	.LVL169:
 1766              	.L117:
1182:Core/Src/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aDown[0].RdOff;
 1767              		.loc 1 1182 3 is_stmt 1 discriminator 1 view .LVU505
 1768 0016 FFF7FEFF 		bl	_DoInit
 1769              	.LVL170:
 1770 001a F5E7     		b	.L113
 1771              	.LVL171:
 1772              	.L115:
1187:Core/Src/SEGGER_RTT.c ****   }
 1773              		.loc 1 1187 7 is_stmt 0 view .LVU506
 1774 001c 0020     		movs	r0, #0
 1775              	.LVL172:
1189:Core/Src/SEGGER_RTT.c **** }
 1776              		.loc 1 1189 3 is_stmt 1 view .LVU507
1189:Core/Src/SEGGER_RTT.c **** }
 1777              		.loc 1 1189 10 is_stmt 0 view .LVU508
 1778 001e F9E7     		b	.L112
 1779              	.L119:
 1780              		.align	2
 1781              	.L118:
 1782 0020 00000000 		.word	.LANCHOR1
 1783              		.cfi_endproc
 1784              	.LFE16:
 1786              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 1787              		.align	1
 1788              		.global	SEGGER_RTT_HasData
 1789              		.syntax unified
 1790              		.thumb
 1791              		.thumb_func
 1792              		.fpu fpv4-sp-d16
 1794              	SEGGER_RTT_HasData:
 1795              	.LVL173:
 1796              	.LFB17:
1191:Core/Src/SEGGER_RTT.c **** 
1192:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1193:Core/Src/SEGGER_RTT.c **** *
1194:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1195:Core/Src/SEGGER_RTT.c **** *
1196:Core/Src/SEGGER_RTT.c **** *  Function description
1197:Core/Src/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1198:Core/Src/SEGGER_RTT.c **** *
1199:Core/Src/SEGGER_RTT.c **** *  Return value:
1200:Core/Src/SEGGER_RTT.c **** *  ==0:  No data
1201:Core/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1202:Core/Src/SEGGER_RTT.c **** *
1203:Core/Src/SEGGER_RTT.c **** */
1204:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 1797              		.loc 1 1204 51 is_stmt 1 view -0
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 57


 1798              		.cfi_startproc
 1799              		@ args = 0, pretend = 0, frame = 0
 1800              		@ frame_needed = 0, uses_anonymous_args = 0
 1801              		@ link register save eliminated.
1205:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 1802              		.loc 1 1205 3 view .LVU510
1206:Core/Src/SEGGER_RTT.c ****   unsigned                v;
 1803              		.loc 1 1206 3 view .LVU511
1207:Core/Src/SEGGER_RTT.c **** 
1208:Core/Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 1804              		.loc 1 1208 3 view .LVU512
1209:Core/Src/SEGGER_RTT.c ****   v = pRing->WrOff;
 1805              		.loc 1 1209 3 view .LVU513
 1806              		.loc 1 1209 5 is_stmt 0 view .LVU514
 1807 0000 064B     		ldr	r3, .L121
 1808 0002 00EB4002 		add	r2, r0, r0, lsl #1
 1809 0006 03EBC202 		add	r2, r3, r2, lsl #3
 1810 000a D26E     		ldr	r2, [r2, #108]
 1811              	.LVL174:
1210:Core/Src/SEGGER_RTT.c ****   return v - pRing->RdOff;
 1812              		.loc 1 1210 3 is_stmt 1 view .LVU515
 1813              		.loc 1 1210 19 is_stmt 0 view .LVU516
 1814 000c 00EB4000 		add	r0, r0, r0, lsl #1
 1815              	.LVL175:
 1816              		.loc 1 1210 19 view .LVU517
 1817 0010 03EBC000 		add	r0, r3, r0, lsl #3
 1818 0014 006F     		ldr	r0, [r0, #112]
1211:Core/Src/SEGGER_RTT.c **** }
 1819              		.loc 1 1211 1 view .LVU518
 1820 0016 101A     		subs	r0, r2, r0
 1821 0018 7047     		bx	lr
 1822              	.L122:
 1823 001a 00BF     		.align	2
 1824              	.L121:
 1825 001c 00000000 		.word	.LANCHOR1
 1826              		.cfi_endproc
 1827              	.LFE17:
 1829              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 1830              		.align	1
 1831              		.global	SEGGER_RTT_HasDataUp
 1832              		.syntax unified
 1833              		.thumb
 1834              		.thumb_func
 1835              		.fpu fpv4-sp-d16
 1837              	SEGGER_RTT_HasDataUp:
 1838              	.LVL176:
 1839              	.LFB18:
1212:Core/Src/SEGGER_RTT.c **** 
1213:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1214:Core/Src/SEGGER_RTT.c **** *
1215:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1216:Core/Src/SEGGER_RTT.c **** *
1217:Core/Src/SEGGER_RTT.c **** *  Function description
1218:Core/Src/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1219:Core/Src/SEGGER_RTT.c **** *
1220:Core/Src/SEGGER_RTT.c **** *  Return value:
1221:Core/Src/SEGGER_RTT.c **** *  ==0:  No data
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 58


1222:Core/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1223:Core/Src/SEGGER_RTT.c **** *
1224:Core/Src/SEGGER_RTT.c **** */
1225:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 1840              		.loc 1 1225 53 is_stmt 1 view -0
 1841              		.cfi_startproc
 1842              		@ args = 0, pretend = 0, frame = 0
 1843              		@ frame_needed = 0, uses_anonymous_args = 0
 1844              		@ link register save eliminated.
1226:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1845              		.loc 1 1226 3 view .LVU520
1227:Core/Src/SEGGER_RTT.c ****   unsigned                v;
 1846              		.loc 1 1227 3 view .LVU521
1228:Core/Src/SEGGER_RTT.c **** 
1229:Core/Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1847              		.loc 1 1229 3 view .LVU522
1230:Core/Src/SEGGER_RTT.c ****   v = pRing->RdOff;
 1848              		.loc 1 1230 3 view .LVU523
 1849              		.loc 1 1230 5 is_stmt 0 view .LVU524
 1850 0000 064B     		ldr	r3, .L124
 1851 0002 00EB4002 		add	r2, r0, r0, lsl #1
 1852 0006 03EBC202 		add	r2, r3, r2, lsl #3
 1853 000a 926A     		ldr	r2, [r2, #40]
 1854              	.LVL177:
1231:Core/Src/SEGGER_RTT.c ****   return pRing->WrOff - v;
 1855              		.loc 1 1231 3 is_stmt 1 view .LVU525
 1856              		.loc 1 1231 15 is_stmt 0 view .LVU526
 1857 000c 00EB4000 		add	r0, r0, r0, lsl #1
 1858              	.LVL178:
 1859              		.loc 1 1231 15 view .LVU527
 1860 0010 03EBC000 		add	r0, r3, r0, lsl #3
 1861 0014 406A     		ldr	r0, [r0, #36]
1232:Core/Src/SEGGER_RTT.c **** }
 1862              		.loc 1 1232 1 view .LVU528
 1863 0016 801A     		subs	r0, r0, r2
 1864 0018 7047     		bx	lr
 1865              	.L125:
 1866 001a 00BF     		.align	2
 1867              	.L124:
 1868 001c 00000000 		.word	.LANCHOR1
 1869              		.cfi_endproc
 1870              	.LFE18:
 1872              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 1873              		.align	1
 1874              		.global	SEGGER_RTT_AllocDownBuffer
 1875              		.syntax unified
 1876              		.thumb
 1877              		.thumb_func
 1878              		.fpu fpv4-sp-d16
 1880              	SEGGER_RTT_AllocDownBuffer:
 1881              	.LVL179:
 1882              	.LFB19:
1233:Core/Src/SEGGER_RTT.c **** 
1234:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1235:Core/Src/SEGGER_RTT.c **** *
1236:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1237:Core/Src/SEGGER_RTT.c **** *
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 59


1238:Core/Src/SEGGER_RTT.c **** *  Function description
1239:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1240:Core/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1241:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1242:Core/Src/SEGGER_RTT.c **** *
1243:Core/Src/SEGGER_RTT.c **** *  Parameters
1244:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1245:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1246:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1247:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1248:Core/Src/SEGGER_RTT.c **** *
1249:Core/Src/SEGGER_RTT.c **** *  Return value
1250:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1251:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1252:Core/Src/SEGGER_RTT.c **** */
1253:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 1883              		.loc 1 1253 103 is_stmt 1 view -0
 1884              		.cfi_startproc
 1885              		@ args = 0, pretend = 0, frame = 0
 1886              		@ frame_needed = 0, uses_anonymous_args = 0
 1887              		.loc 1 1253 103 is_stmt 0 view .LVU530
 1888 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1889              	.LCFI22:
 1890              		.cfi_def_cfa_offset 24
 1891              		.cfi_offset 4, -24
 1892              		.cfi_offset 5, -20
 1893              		.cfi_offset 6, -16
 1894              		.cfi_offset 7, -12
 1895              		.cfi_offset 8, -8
 1896              		.cfi_offset 14, -4
 1897 0004 8046     		mov	r8, r0
 1898 0006 0F46     		mov	r7, r1
 1899 0008 1646     		mov	r6, r2
 1900 000a 1D46     		mov	r5, r3
1254:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
 1901              		.loc 1 1254 3 is_stmt 1 view .LVU531
1255:Core/Src/SEGGER_RTT.c **** 
1256:Core/Src/SEGGER_RTT.c ****   INIT();
 1902              		.loc 1 1256 3 view .LVU532
 1903              		.loc 1 1256 3 view .LVU533
 1904 000c 184B     		ldr	r3, .L134
 1905              	.LVL180:
 1906              		.loc 1 1256 3 is_stmt 0 view .LVU534
 1907 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1908 0010 3BB3     		cbz	r3, .L133
 1909              	.LVL181:
 1910              	.L127:
 1911              		.loc 1 1256 3 is_stmt 1 discriminator 3 view .LVU535
 1912              	.LBB8:
1257:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1913              		.loc 1 1257 3 discriminator 3 view .LVU536
 1914              		.loc 1 1257 3 discriminator 3 view .LVU537
 1915              		.syntax unified
 1916              	@ 1257 "Core/Src/SEGGER_RTT.c" 1
 1917 0012 EFF31182 		mrs   r2, basepri  
 1918 0016 4FF02001 		mov   r1, #32       
 1919 001a 81F31188 		msr   basepri, r1  
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 60


 1920              		
 1921              	@ 0 "" 2
 1922              	.LVL182:
 1923              		.loc 1 1257 20 discriminator 3 view .LVU538
1258:Core/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 1924              		.loc 1 1258 3 discriminator 3 view .LVU539
 1925              		.loc 1 1258 15 is_stmt 0 discriminator 3 view .LVU540
 1926              		.thumb
 1927              		.syntax unified
 1928 001e 0020     		movs	r0, #0
 1929              	.LVL183:
 1930              	.L129:
1259:Core/Src/SEGGER_RTT.c ****   do {
 1931              		.loc 1 1259 3 is_stmt 1 view .LVU541
1260:Core/Src/SEGGER_RTT.c ****     if (_SEGGER_RTT.aDown[BufferIndex].pBuffer == NULL) {
 1932              		.loc 1 1260 5 view .LVU542
 1933              		.loc 1 1260 39 is_stmt 0 view .LVU543
 1934 0020 00EB400C 		add	ip, r0, r0, lsl #1
 1935 0024 124C     		ldr	r4, .L134
 1936 0026 04EBCC0C 		add	ip, r4, ip, lsl #3
 1937 002a DCF86430 		ldr	r3, [ip, #100]
 1938              		.loc 1 1260 8 view .LVU544
 1939 002e 1BB1     		cbz	r3, .L128
1261:Core/Src/SEGGER_RTT.c ****       break;
1262:Core/Src/SEGGER_RTT.c ****     }
1263:Core/Src/SEGGER_RTT.c ****     BufferIndex++;
 1940              		.loc 1 1263 5 is_stmt 1 view .LVU545
 1941              		.loc 1 1263 16 is_stmt 0 view .LVU546
 1942 0030 0130     		adds	r0, r0, #1
 1943              	.LVL184:
1264:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers);
 1944              		.loc 1 1264 11 is_stmt 1 view .LVU547
 1945              		.loc 1 1264 37 is_stmt 0 view .LVU548
 1946 0032 6369     		ldr	r3, [r4, #20]
 1947              		.loc 1 1264 3 view .LVU549
 1948 0034 8342     		cmp	r3, r0
 1949 0036 F3DC     		bgt	.L129
 1950              	.L128:
1265:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers) {
 1951              		.loc 1 1265 3 is_stmt 1 view .LVU550
 1952              		.loc 1 1265 32 is_stmt 0 view .LVU551
 1953 0038 0D4B     		ldr	r3, .L134
 1954 003a 5B69     		ldr	r3, [r3, #20]
 1955              		.loc 1 1265 6 view .LVU552
 1956 003c 8342     		cmp	r3, r0
 1957 003e 13DD     		ble	.L131
1266:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 1958              		.loc 1 1266 5 is_stmt 1 view .LVU553
 1959              		.loc 1 1266 49 is_stmt 0 view .LVU554
 1960 0040 00EB4003 		add	r3, r0, r0, lsl #1
 1961 0044 0A49     		ldr	r1, .L134
 1962 0046 01EBC303 		add	r3, r1, r3, lsl #3
 1963 004a C3F86080 		str	r8, [r3, #96]
1267:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 1964              		.loc 1 1267 5 is_stmt 1 view .LVU555
 1965              		.loc 1 1267 49 is_stmt 0 view .LVU556
 1966 004e 5F66     		str	r7, [r3, #100]
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 61


1268:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 1967              		.loc 1 1268 5 is_stmt 1 view .LVU557
 1968              		.loc 1 1268 49 is_stmt 0 view .LVU558
 1969 0050 9E66     		str	r6, [r3, #104]
1269:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 1970              		.loc 1 1269 5 is_stmt 1 view .LVU559
 1971              		.loc 1 1269 49 is_stmt 0 view .LVU560
 1972 0052 0021     		movs	r1, #0
 1973 0054 1967     		str	r1, [r3, #112]
1270:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 1974              		.loc 1 1270 5 is_stmt 1 view .LVU561
 1975              		.loc 1 1270 49 is_stmt 0 view .LVU562
 1976 0056 D966     		str	r1, [r3, #108]
1271:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags        = Flags;
 1977              		.loc 1 1271 5 is_stmt 1 view .LVU563
 1978              		.loc 1 1271 49 is_stmt 0 view .LVU564
 1979 0058 5D67     		str	r5, [r3, #116]
 1980              	.LVL185:
 1981              	.L130:
1272:Core/Src/SEGGER_RTT.c ****   } else {
1273:Core/Src/SEGGER_RTT.c ****     BufferIndex = -1;
1274:Core/Src/SEGGER_RTT.c ****   }
1275:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1982              		.loc 1 1275 3 is_stmt 1 view .LVU565
 1983              		.syntax unified
 1984              	@ 1275 "Core/Src/SEGGER_RTT.c" 1
 1985 005a 82F31188 		msr   basepri, r2  
 1986              		
 1987              	@ 0 "" 2
 1988              		.thumb
 1989              		.syntax unified
 1990              	.LBE8:
 1991              		.loc 1 1275 22 view .LVU566
1276:Core/Src/SEGGER_RTT.c ****   return BufferIndex;
 1992              		.loc 1 1276 3 view .LVU567
1277:Core/Src/SEGGER_RTT.c **** }
 1993              		.loc 1 1277 1 is_stmt 0 view .LVU568
 1994 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1995              	.LVL186:
 1996              	.L133:
1256:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1997              		.loc 1 1256 3 is_stmt 1 discriminator 1 view .LVU569
 1998 0062 FFF7FEFF 		bl	_DoInit
 1999              	.LVL187:
1256:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2000              		.loc 1 1256 3 is_stmt 0 discriminator 1 view .LVU570
 2001 0066 D4E7     		b	.L127
 2002              	.LVL188:
 2003              	.L131:
 2004              	.LBB9:
1273:Core/Src/SEGGER_RTT.c ****   }
 2005              		.loc 1 1273 17 view .LVU571
 2006 0068 4FF0FF30 		mov	r0, #-1
 2007              	.LVL189:
1273:Core/Src/SEGGER_RTT.c ****   }
 2008              		.loc 1 1273 17 view .LVU572
 2009 006c F5E7     		b	.L130
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 62


 2010              	.L135:
 2011 006e 00BF     		.align	2
 2012              	.L134:
 2013 0070 00000000 		.word	.LANCHOR1
 2014              	.LBE9:
 2015              		.cfi_endproc
 2016              	.LFE19:
 2018              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2019              		.align	1
 2020              		.global	SEGGER_RTT_AllocUpBuffer
 2021              		.syntax unified
 2022              		.thumb
 2023              		.thumb_func
 2024              		.fpu fpv4-sp-d16
 2026              	SEGGER_RTT_AllocUpBuffer:
 2027              	.LVL190:
 2028              	.LFB20:
1278:Core/Src/SEGGER_RTT.c **** 
1279:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1280:Core/Src/SEGGER_RTT.c **** *
1281:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1282:Core/Src/SEGGER_RTT.c **** *
1283:Core/Src/SEGGER_RTT.c **** *  Function description
1284:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1285:Core/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1286:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1287:Core/Src/SEGGER_RTT.c **** *
1288:Core/Src/SEGGER_RTT.c **** *  Parameters
1289:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1290:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1291:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1292:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1293:Core/Src/SEGGER_RTT.c **** *
1294:Core/Src/SEGGER_RTT.c **** *  Return value
1295:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1296:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1297:Core/Src/SEGGER_RTT.c **** */
1298:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2029              		.loc 1 1298 101 is_stmt 1 view -0
 2030              		.cfi_startproc
 2031              		@ args = 0, pretend = 0, frame = 0
 2032              		@ frame_needed = 0, uses_anonymous_args = 0
 2033              		.loc 1 1298 101 is_stmt 0 view .LVU574
 2034 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2035              	.LCFI23:
 2036              		.cfi_def_cfa_offset 24
 2037              		.cfi_offset 3, -24
 2038              		.cfi_offset 4, -20
 2039              		.cfi_offset 5, -16
 2040              		.cfi_offset 6, -12
 2041              		.cfi_offset 7, -8
 2042              		.cfi_offset 14, -4
 2043 0002 0746     		mov	r7, r0
 2044 0004 0E46     		mov	r6, r1
 2045 0006 1546     		mov	r5, r2
 2046 0008 1C46     		mov	r4, r3
1299:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 63


 2047              		.loc 1 1299 3 is_stmt 1 view .LVU575
1300:Core/Src/SEGGER_RTT.c **** 
1301:Core/Src/SEGGER_RTT.c ****   INIT();
 2048              		.loc 1 1301 3 view .LVU576
 2049              		.loc 1 1301 3 view .LVU577
 2050 000a 1C4B     		ldr	r3, .L144
 2051              	.LVL191:
 2052              		.loc 1 1301 3 is_stmt 0 view .LVU578
 2053 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2054 000e 73B3     		cbz	r3, .L143
 2055              	.LVL192:
 2056              	.L137:
 2057              		.loc 1 1301 3 is_stmt 1 discriminator 3 view .LVU579
 2058              	.LBB10:
1302:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2059              		.loc 1 1302 3 discriminator 3 view .LVU580
 2060              		.loc 1 1302 3 discriminator 3 view .LVU581
 2061              		.syntax unified
 2062              	@ 1302 "Core/Src/SEGGER_RTT.c" 1
 2063 0010 EFF31182 		mrs   r2, basepri  
 2064 0014 4FF02001 		mov   r1, #32       
 2065 0018 81F31188 		msr   basepri, r1  
 2066              		
 2067              	@ 0 "" 2
 2068              	.LVL193:
 2069              		.loc 1 1302 20 discriminator 3 view .LVU582
1303:Core/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2070              		.loc 1 1303 3 discriminator 3 view .LVU583
 2071              		.loc 1 1303 15 is_stmt 0 discriminator 3 view .LVU584
 2072              		.thumb
 2073              		.syntax unified
 2074 001c 0020     		movs	r0, #0
 2075              	.LVL194:
 2076              	.L139:
1304:Core/Src/SEGGER_RTT.c ****   do {
 2077              		.loc 1 1304 3 is_stmt 1 view .LVU585
1305:Core/Src/SEGGER_RTT.c ****     if (_SEGGER_RTT.aUp[BufferIndex].pBuffer == NULL) {
 2078              		.loc 1 1305 5 view .LVU586
 2079              		.loc 1 1305 37 is_stmt 0 view .LVU587
 2080 001e 00F1010C 		add	ip, r0, #1
 2081 0022 0CEB4C0C 		add	ip, ip, ip, lsl #1
 2082 0026 154B     		ldr	r3, .L144
 2083 0028 03EBCC0C 		add	ip, r3, ip, lsl #3
 2084 002c DCF80430 		ldr	r3, [ip, #4]
 2085              		.loc 1 1305 8 view .LVU588
 2086 0030 23B1     		cbz	r3, .L138
1306:Core/Src/SEGGER_RTT.c ****       break;
1307:Core/Src/SEGGER_RTT.c ****     }
1308:Core/Src/SEGGER_RTT.c ****     BufferIndex++;
 2087              		.loc 1 1308 5 is_stmt 1 view .LVU589
 2088              		.loc 1 1308 16 is_stmt 0 view .LVU590
 2089 0032 0130     		adds	r0, r0, #1
 2090              	.LVL195:
1309:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers);
 2091              		.loc 1 1309 11 is_stmt 1 view .LVU591
 2092              		.loc 1 1309 37 is_stmt 0 view .LVU592
 2093 0034 114B     		ldr	r3, .L144
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 64


 2094 0036 1B69     		ldr	r3, [r3, #16]
 2095              		.loc 1 1309 3 view .LVU593
 2096 0038 8342     		cmp	r3, r0
 2097 003a F0DC     		bgt	.L139
 2098              	.L138:
1310:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers) {
 2099              		.loc 1 1310 3 is_stmt 1 view .LVU594
 2100              		.loc 1 1310 32 is_stmt 0 view .LVU595
 2101 003c 0F4B     		ldr	r3, .L144
 2102 003e 1B69     		ldr	r3, [r3, #16]
 2103              		.loc 1 1310 6 view .LVU596
 2104 0040 8342     		cmp	r3, r0
 2105 0042 17DD     		ble	.L141
1311:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 2106              		.loc 1 1311 5 is_stmt 1 view .LVU597
 2107              		.loc 1 1311 47 is_stmt 0 view .LVU598
 2108 0044 0D4B     		ldr	r3, .L144
 2109 0046 411C     		adds	r1, r0, #1
 2110 0048 01EB410C 		add	ip, r1, r1, lsl #1
 2111 004c 43F83C70 		str	r7, [r3, ip, lsl #3]
1312:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2112              		.loc 1 1312 5 is_stmt 1 view .LVU599
 2113              		.loc 1 1312 47 is_stmt 0 view .LVU600
 2114 0050 03EBCC01 		add	r1, r3, ip, lsl #3
 2115 0054 4E60     		str	r6, [r1, #4]
1313:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2116              		.loc 1 1313 5 is_stmt 1 view .LVU601
 2117              		.loc 1 1313 47 is_stmt 0 view .LVU602
 2118 0056 00EB4001 		add	r1, r0, r0, lsl #1
 2119 005a 03EBC103 		add	r3, r3, r1, lsl #3
 2120 005e 1D62     		str	r5, [r3, #32]
1314:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 2121              		.loc 1 1314 5 is_stmt 1 view .LVU603
 2122              		.loc 1 1314 47 is_stmt 0 view .LVU604
 2123 0060 0021     		movs	r1, #0
 2124 0062 9962     		str	r1, [r3, #40]
1315:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 2125              		.loc 1 1315 5 is_stmt 1 view .LVU605
 2126              		.loc 1 1315 47 is_stmt 0 view .LVU606
 2127 0064 5962     		str	r1, [r3, #36]
1316:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags        = Flags;
 2128              		.loc 1 1316 5 is_stmt 1 view .LVU607
 2129              		.loc 1 1316 47 is_stmt 0 view .LVU608
 2130 0066 DC62     		str	r4, [r3, #44]
 2131              	.LVL196:
 2132              	.L140:
1317:Core/Src/SEGGER_RTT.c ****   } else {
1318:Core/Src/SEGGER_RTT.c ****     BufferIndex = -1;
1319:Core/Src/SEGGER_RTT.c ****   }
1320:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2133              		.loc 1 1320 3 is_stmt 1 view .LVU609
 2134              		.syntax unified
 2135              	@ 1320 "Core/Src/SEGGER_RTT.c" 1
 2136 0068 82F31188 		msr   basepri, r2  
 2137              		
 2138              	@ 0 "" 2
 2139              		.thumb
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 65


 2140              		.syntax unified
 2141              	.LBE10:
 2142              		.loc 1 1320 22 view .LVU610
1321:Core/Src/SEGGER_RTT.c ****   return BufferIndex;
 2143              		.loc 1 1321 3 view .LVU611
1322:Core/Src/SEGGER_RTT.c **** }
 2144              		.loc 1 1322 1 is_stmt 0 view .LVU612
 2145 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2146              	.LVL197:
 2147              	.L143:
1301:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2148              		.loc 1 1301 3 is_stmt 1 discriminator 1 view .LVU613
 2149 006e FFF7FEFF 		bl	_DoInit
 2150              	.LVL198:
1301:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2151              		.loc 1 1301 3 is_stmt 0 discriminator 1 view .LVU614
 2152 0072 CDE7     		b	.L137
 2153              	.LVL199:
 2154              	.L141:
 2155              	.LBB11:
1318:Core/Src/SEGGER_RTT.c ****   }
 2156              		.loc 1 1318 17 view .LVU615
 2157 0074 4FF0FF30 		mov	r0, #-1
 2158              	.LVL200:
1318:Core/Src/SEGGER_RTT.c ****   }
 2159              		.loc 1 1318 17 view .LVU616
 2160 0078 F6E7     		b	.L140
 2161              	.L145:
 2162 007a 00BF     		.align	2
 2163              	.L144:
 2164 007c 00000000 		.word	.LANCHOR1
 2165              	.LBE11:
 2166              		.cfi_endproc
 2167              	.LFE20:
 2169              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2170              		.align	1
 2171              		.global	SEGGER_RTT_ConfigUpBuffer
 2172              		.syntax unified
 2173              		.thumb
 2174              		.thumb_func
 2175              		.fpu fpv4-sp-d16
 2177              	SEGGER_RTT_ConfigUpBuffer:
 2178              	.LVL201:
 2179              	.LFB21:
1323:Core/Src/SEGGER_RTT.c **** 
1324:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1325:Core/Src/SEGGER_RTT.c **** *
1326:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1327:Core/Src/SEGGER_RTT.c **** *
1328:Core/Src/SEGGER_RTT.c **** *  Function description
1329:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1330:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1331:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1332:Core/Src/SEGGER_RTT.c **** *
1333:Core/Src/SEGGER_RTT.c **** *  Parameters
1334:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1335:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 66


1336:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1337:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1338:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1339:Core/Src/SEGGER_RTT.c **** *
1340:Core/Src/SEGGER_RTT.c **** *  Return value
1341:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K.
1342:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1343:Core/Src/SEGGER_RTT.c **** *
1344:Core/Src/SEGGER_RTT.c **** *  Additional information
1345:Core/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1346:Core/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1347:Core/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1348:Core/Src/SEGGER_RTT.c **** */
1349:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2180              		.loc 1 1349 124 is_stmt 1 view -0
 2181              		.cfi_startproc
 2182              		@ args = 4, pretend = 0, frame = 0
 2183              		@ frame_needed = 0, uses_anonymous_args = 0
 2184              		.loc 1 1349 124 is_stmt 0 view .LVU618
 2185 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2186              	.LCFI24:
 2187              		.cfi_def_cfa_offset 24
 2188              		.cfi_offset 4, -24
 2189              		.cfi_offset 5, -20
 2190              		.cfi_offset 6, -16
 2191              		.cfi_offset 7, -12
 2192              		.cfi_offset 8, -8
 2193              		.cfi_offset 14, -4
 2194 0004 0446     		mov	r4, r0
 2195 0006 8846     		mov	r8, r1
 2196 0008 1746     		mov	r7, r2
 2197 000a 1E46     		mov	r6, r3
1350:Core/Src/SEGGER_RTT.c ****   int r;
 2198              		.loc 1 1350 3 is_stmt 1 view .LVU619
1351:Core/Src/SEGGER_RTT.c **** 
1352:Core/Src/SEGGER_RTT.c ****   INIT();
 2199              		.loc 1 1352 3 view .LVU620
 2200              		.loc 1 1352 3 view .LVU621
 2201 000c 184B     		ldr	r3, .L153
 2202              	.LVL202:
 2203              		.loc 1 1352 3 is_stmt 0 view .LVU622
 2204 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2205 0010 3BB3     		cbz	r3, .L152
 2206              	.LVL203:
 2207              	.L147:
 2208              		.loc 1 1352 3 is_stmt 1 discriminator 3 view .LVU623
1353:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2209              		.loc 1 1353 3 discriminator 3 view .LVU624
 2210              		.loc 1 1353 42 is_stmt 0 discriminator 3 view .LVU625
 2211 0012 174B     		ldr	r3, .L153
 2212 0014 1B69     		ldr	r3, [r3, #16]
 2213              		.loc 1 1353 6 discriminator 3 view .LVU626
 2214 0016 A342     		cmp	r3, r4
 2215 0018 26D9     		bls	.L150
 2216              	.LBB12:
1354:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2217              		.loc 1 1354 5 is_stmt 1 view .LVU627
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 67


 2218              		.loc 1 1354 5 view .LVU628
 2219              		.syntax unified
 2220              	@ 1354 "Core/Src/SEGGER_RTT.c" 1
 2221 001a EFF31183 		mrs   r3, basepri  
 2222 001e 4FF02001 		mov   r1, #32       
 2223 0022 81F31188 		msr   basepri, r1  
 2224              		
 2225              	@ 0 "" 2
 2226              	.LVL204:
 2227              		.loc 1 1354 22 view .LVU629
1355:Core/Src/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2228              		.loc 1 1355 5 view .LVU630
 2229              		.loc 1 1355 8 is_stmt 0 view .LVU631
 2230              		.thumb
 2231              		.syntax unified
 2232 0026 84B1     		cbz	r4, .L149
1356:Core/Src/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 2233              		.loc 1 1356 7 is_stmt 1 view .LVU632
 2234              		.loc 1 1356 49 is_stmt 0 view .LVU633
 2235 0028 114D     		ldr	r5, .L153
 2236 002a 601C     		adds	r0, r4, #1
 2237 002c 00EB4002 		add	r2, r0, r0, lsl #1
 2238 0030 45F83280 		str	r8, [r5, r2, lsl #3]
1357:Core/Src/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2239              		.loc 1 1357 7 is_stmt 1 view .LVU634
 2240              		.loc 1 1357 49 is_stmt 0 view .LVU635
 2241 0034 05EBC200 		add	r0, r5, r2, lsl #3
 2242 0038 4760     		str	r7, [r0, #4]
1358:Core/Src/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2243              		.loc 1 1358 7 is_stmt 1 view .LVU636
 2244              		.loc 1 1358 49 is_stmt 0 view .LVU637
 2245 003a 04EB4402 		add	r2, r4, r4, lsl #1
 2246 003e 05EBC202 		add	r2, r5, r2, lsl #3
 2247 0042 1662     		str	r6, [r2, #32]
1359:Core/Src/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 2248              		.loc 1 1359 7 is_stmt 1 view .LVU638
 2249              		.loc 1 1359 49 is_stmt 0 view .LVU639
 2250 0044 0021     		movs	r1, #0
 2251 0046 9162     		str	r1, [r2, #40]
1360:Core/Src/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 2252              		.loc 1 1360 7 is_stmt 1 view .LVU640
 2253              		.loc 1 1360 49 is_stmt 0 view .LVU641
 2254 0048 5162     		str	r1, [r2, #36]
 2255              	.L149:
1361:Core/Src/SEGGER_RTT.c ****     }
1362:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 2256              		.loc 1 1362 5 is_stmt 1 view .LVU642
 2257              		.loc 1 1362 49 is_stmt 0 view .LVU643
 2258 004a 04EB4404 		add	r4, r4, r4, lsl #1
 2259              	.LVL205:
 2260              		.loc 1 1362 49 view .LVU644
 2261 004e 0848     		ldr	r0, .L153
 2262 0050 00EBC404 		add	r4, r0, r4, lsl #3
 2263 0054 069A     		ldr	r2, [sp, #24]
 2264 0056 E262     		str	r2, [r4, #44]
1363:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2265              		.loc 1 1363 5 is_stmt 1 view .LVU645
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 68


 2266              		.syntax unified
 2267              	@ 1363 "Core/Src/SEGGER_RTT.c" 1
 2268 0058 83F31188 		msr   basepri, r3  
 2269              		
 2270              	@ 0 "" 2
 2271              		.thumb
 2272              		.syntax unified
 2273              	.LBE12:
 2274              		.loc 1 1363 24 view .LVU646
1364:Core/Src/SEGGER_RTT.c ****     r =  0;
 2275              		.loc 1 1364 5 view .LVU647
 2276              	.LVL206:
 2277              		.loc 1 1364 7 is_stmt 0 view .LVU648
 2278 005c 0020     		movs	r0, #0
 2279              	.LVL207:
 2280              	.L146:
1365:Core/Src/SEGGER_RTT.c ****   } else {
1366:Core/Src/SEGGER_RTT.c ****     r = -1;
1367:Core/Src/SEGGER_RTT.c ****   }
1368:Core/Src/SEGGER_RTT.c ****   return r;
1369:Core/Src/SEGGER_RTT.c **** }
 2281              		.loc 1 1369 1 view .LVU649
 2282 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2283              	.LVL208:
 2284              	.L152:
1352:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2285              		.loc 1 1352 3 is_stmt 1 discriminator 1 view .LVU650
 2286 0062 FFF7FEFF 		bl	_DoInit
 2287              	.LVL209:
1352:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2288              		.loc 1 1352 3 is_stmt 0 discriminator 1 view .LVU651
 2289 0066 D4E7     		b	.L147
 2290              	.L150:
1366:Core/Src/SEGGER_RTT.c ****   }
 2291              		.loc 1 1366 7 view .LVU652
 2292 0068 4FF0FF30 		mov	r0, #-1
 2293              	.LVL210:
1368:Core/Src/SEGGER_RTT.c **** }
 2294              		.loc 1 1368 3 is_stmt 1 view .LVU653
1368:Core/Src/SEGGER_RTT.c **** }
 2295              		.loc 1 1368 10 is_stmt 0 view .LVU654
 2296 006c F7E7     		b	.L146
 2297              	.L154:
 2298 006e 00BF     		.align	2
 2299              	.L153:
 2300 0070 00000000 		.word	.LANCHOR1
 2301              		.cfi_endproc
 2302              	.LFE21:
 2304              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 2305              		.align	1
 2306              		.global	SEGGER_RTT_ConfigDownBuffer
 2307              		.syntax unified
 2308              		.thumb
 2309              		.thumb_func
 2310              		.fpu fpv4-sp-d16
 2312              	SEGGER_RTT_ConfigDownBuffer:
 2313              	.LVL211:
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 69


 2314              	.LFB22:
1370:Core/Src/SEGGER_RTT.c **** 
1371:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1372:Core/Src/SEGGER_RTT.c **** *
1373:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1374:Core/Src/SEGGER_RTT.c **** *
1375:Core/Src/SEGGER_RTT.c **** *  Function description
1376:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1377:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1378:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1379:Core/Src/SEGGER_RTT.c **** *
1380:Core/Src/SEGGER_RTT.c **** *  Parameters
1381:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1382:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1383:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1384:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1385:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1386:Core/Src/SEGGER_RTT.c **** *
1387:Core/Src/SEGGER_RTT.c **** *  Return value
1388:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1389:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1390:Core/Src/SEGGER_RTT.c **** *
1391:Core/Src/SEGGER_RTT.c **** *  Additional information
1392:Core/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1393:Core/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1394:Core/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1395:Core/Src/SEGGER_RTT.c **** */
1396:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 2315              		.loc 1 1396 126 is_stmt 1 view -0
 2316              		.cfi_startproc
 2317              		@ args = 4, pretend = 0, frame = 0
 2318              		@ frame_needed = 0, uses_anonymous_args = 0
 2319              		.loc 1 1396 126 is_stmt 0 view .LVU656
 2320 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2321              	.LCFI25:
 2322              		.cfi_def_cfa_offset 24
 2323              		.cfi_offset 4, -24
 2324              		.cfi_offset 5, -20
 2325              		.cfi_offset 6, -16
 2326              		.cfi_offset 7, -12
 2327              		.cfi_offset 8, -8
 2328              		.cfi_offset 14, -4
 2329 0004 0446     		mov	r4, r0
 2330 0006 8846     		mov	r8, r1
 2331 0008 1746     		mov	r7, r2
 2332 000a 1E46     		mov	r6, r3
1397:Core/Src/SEGGER_RTT.c ****   int r;
 2333              		.loc 1 1397 3 is_stmt 1 view .LVU657
1398:Core/Src/SEGGER_RTT.c **** 
1399:Core/Src/SEGGER_RTT.c ****   INIT();
 2334              		.loc 1 1399 3 view .LVU658
 2335              		.loc 1 1399 3 view .LVU659
 2336 000c 154B     		ldr	r3, .L162
 2337              	.LVL212:
 2338              		.loc 1 1399 3 is_stmt 0 view .LVU660
 2339 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2340 0010 13B3     		cbz	r3, .L161
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 70


 2341              	.LVL213:
 2342              	.L156:
 2343              		.loc 1 1399 3 is_stmt 1 discriminator 3 view .LVU661
1400:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2344              		.loc 1 1400 3 discriminator 3 view .LVU662
 2345              		.loc 1 1400 42 is_stmt 0 discriminator 3 view .LVU663
 2346 0012 144B     		ldr	r3, .L162
 2347 0014 5B69     		ldr	r3, [r3, #20]
 2348              		.loc 1 1400 6 discriminator 3 view .LVU664
 2349 0016 A342     		cmp	r3, r4
 2350 0018 21D9     		bls	.L159
 2351              	.LBB13:
1401:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2352              		.loc 1 1401 5 is_stmt 1 view .LVU665
 2353              		.loc 1 1401 5 view .LVU666
 2354              		.syntax unified
 2355              	@ 1401 "Core/Src/SEGGER_RTT.c" 1
 2356 001a EFF31183 		mrs   r3, basepri  
 2357 001e 4FF02001 		mov   r1, #32       
 2358 0022 81F31188 		msr   basepri, r1  
 2359              		
 2360              	@ 0 "" 2
 2361              	.LVL214:
 2362              		.loc 1 1401 22 view .LVU667
1402:Core/Src/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2363              		.loc 1 1402 5 view .LVU668
 2364              		.loc 1 1402 8 is_stmt 0 view .LVU669
 2365              		.thumb
 2366              		.syntax unified
 2367 0026 5CB1     		cbz	r4, .L158
1403:Core/Src/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 2368              		.loc 1 1403 7 is_stmt 1 view .LVU670
 2369              		.loc 1 1403 51 is_stmt 0 view .LVU671
 2370 0028 04EB4400 		add	r0, r4, r4, lsl #1
 2371 002c 0D4D     		ldr	r5, .L162
 2372 002e 05EBC000 		add	r0, r5, r0, lsl #3
 2373 0032 C0F86080 		str	r8, [r0, #96]
1404:Core/Src/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2374              		.loc 1 1404 7 is_stmt 1 view .LVU672
 2375              		.loc 1 1404 51 is_stmt 0 view .LVU673
 2376 0036 4766     		str	r7, [r0, #100]
1405:Core/Src/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2377              		.loc 1 1405 7 is_stmt 1 view .LVU674
 2378              		.loc 1 1405 51 is_stmt 0 view .LVU675
 2379 0038 8666     		str	r6, [r0, #104]
1406:Core/Src/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 2380              		.loc 1 1406 7 is_stmt 1 view .LVU676
 2381              		.loc 1 1406 51 is_stmt 0 view .LVU677
 2382 003a 0022     		movs	r2, #0
 2383 003c 0267     		str	r2, [r0, #112]
1407:Core/Src/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 2384              		.loc 1 1407 7 is_stmt 1 view .LVU678
 2385              		.loc 1 1407 51 is_stmt 0 view .LVU679
 2386 003e C266     		str	r2, [r0, #108]
 2387              	.L158:
1408:Core/Src/SEGGER_RTT.c ****     }
1409:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 71


 2388              		.loc 1 1409 5 is_stmt 1 view .LVU680
 2389              		.loc 1 1409 51 is_stmt 0 view .LVU681
 2390 0040 04EB4404 		add	r4, r4, r4, lsl #1
 2391              	.LVL215:
 2392              		.loc 1 1409 51 view .LVU682
 2393 0044 0748     		ldr	r0, .L162
 2394 0046 00EBC404 		add	r4, r0, r4, lsl #3
 2395 004a 069A     		ldr	r2, [sp, #24]
 2396 004c 6267     		str	r2, [r4, #116]
1410:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2397              		.loc 1 1410 5 is_stmt 1 view .LVU683
 2398              		.syntax unified
 2399              	@ 1410 "Core/Src/SEGGER_RTT.c" 1
 2400 004e 83F31188 		msr   basepri, r3  
 2401              		
 2402              	@ 0 "" 2
 2403              		.thumb
 2404              		.syntax unified
 2405              	.LBE13:
 2406              		.loc 1 1410 24 view .LVU684
1411:Core/Src/SEGGER_RTT.c ****     r =  0;
 2407              		.loc 1 1411 5 view .LVU685
 2408              	.LVL216:
 2409              		.loc 1 1411 7 is_stmt 0 view .LVU686
 2410 0052 0020     		movs	r0, #0
 2411              	.LVL217:
 2412              	.L155:
1412:Core/Src/SEGGER_RTT.c ****   } else {
1413:Core/Src/SEGGER_RTT.c ****     r = -1;
1414:Core/Src/SEGGER_RTT.c ****   }
1415:Core/Src/SEGGER_RTT.c ****   return r;
1416:Core/Src/SEGGER_RTT.c **** }
 2413              		.loc 1 1416 1 view .LVU687
 2414 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2415              	.LVL218:
 2416              	.L161:
1399:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2417              		.loc 1 1399 3 is_stmt 1 discriminator 1 view .LVU688
 2418 0058 FFF7FEFF 		bl	_DoInit
 2419              	.LVL219:
1399:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2420              		.loc 1 1399 3 is_stmt 0 discriminator 1 view .LVU689
 2421 005c D9E7     		b	.L156
 2422              	.L159:
1413:Core/Src/SEGGER_RTT.c ****   }
 2423              		.loc 1 1413 7 view .LVU690
 2424 005e 4FF0FF30 		mov	r0, #-1
 2425              	.LVL220:
1415:Core/Src/SEGGER_RTT.c **** }
 2426              		.loc 1 1415 3 is_stmt 1 view .LVU691
1415:Core/Src/SEGGER_RTT.c **** }
 2427              		.loc 1 1415 10 is_stmt 0 view .LVU692
 2428 0062 F7E7     		b	.L155
 2429              	.L163:
 2430              		.align	2
 2431              	.L162:
 2432 0064 00000000 		.word	.LANCHOR1
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 72


 2433              		.cfi_endproc
 2434              	.LFE22:
 2436              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 2437              		.align	1
 2438              		.global	SEGGER_RTT_SetNameUpBuffer
 2439              		.syntax unified
 2440              		.thumb
 2441              		.thumb_func
 2442              		.fpu fpv4-sp-d16
 2444              	SEGGER_RTT_SetNameUpBuffer:
 2445              	.LVL221:
 2446              	.LFB23:
1417:Core/Src/SEGGER_RTT.c **** 
1418:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1419:Core/Src/SEGGER_RTT.c **** *
1420:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1421:Core/Src/SEGGER_RTT.c **** *
1422:Core/Src/SEGGER_RTT.c **** *  Function description
1423:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1424:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1425:Core/Src/SEGGER_RTT.c **** *
1426:Core/Src/SEGGER_RTT.c **** *  Parameters
1427:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1428:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1429:Core/Src/SEGGER_RTT.c **** *
1430:Core/Src/SEGGER_RTT.c **** *  Return value
1431:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1432:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1433:Core/Src/SEGGER_RTT.c **** */
1434:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 2447              		.loc 1 1434 73 is_stmt 1 view -0
 2448              		.cfi_startproc
 2449              		@ args = 0, pretend = 0, frame = 0
 2450              		@ frame_needed = 0, uses_anonymous_args = 0
 2451              		.loc 1 1434 73 is_stmt 0 view .LVU694
 2452 0000 38B5     		push	{r3, r4, r5, lr}
 2453              	.LCFI26:
 2454              		.cfi_def_cfa_offset 16
 2455              		.cfi_offset 3, -16
 2456              		.cfi_offset 4, -12
 2457              		.cfi_offset 5, -8
 2458              		.cfi_offset 14, -4
 2459 0002 0446     		mov	r4, r0
 2460 0004 0D46     		mov	r5, r1
1435:Core/Src/SEGGER_RTT.c ****   int r;
 2461              		.loc 1 1435 3 is_stmt 1 view .LVU695
1436:Core/Src/SEGGER_RTT.c **** 
1437:Core/Src/SEGGER_RTT.c ****   INIT();
 2462              		.loc 1 1437 3 view .LVU696
 2463              		.loc 1 1437 3 view .LVU697
 2464 0006 0E4B     		ldr	r3, .L170
 2465 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2466 000a 9BB1     		cbz	r3, .L169
 2467              	.LVL222:
 2468              	.L165:
 2469              		.loc 1 1437 3 discriminator 3 view .LVU698
1438:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 73


 2470              		.loc 1 1438 3 discriminator 3 view .LVU699
 2471              		.loc 1 1438 42 is_stmt 0 discriminator 3 view .LVU700
 2472 000c 0C4B     		ldr	r3, .L170
 2473 000e 1B69     		ldr	r3, [r3, #16]
 2474              		.loc 1 1438 6 discriminator 3 view .LVU701
 2475 0010 A342     		cmp	r3, r4
 2476 0012 12D9     		bls	.L167
 2477              	.LBB14:
1439:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2478              		.loc 1 1439 5 is_stmt 1 view .LVU702
 2479              		.loc 1 1439 5 view .LVU703
 2480              		.syntax unified
 2481              	@ 1439 "Core/Src/SEGGER_RTT.c" 1
 2482 0014 EFF31183 		mrs   r3, basepri  
 2483 0018 4FF02001 		mov   r1, #32       
 2484 001c 81F31188 		msr   basepri, r1  
 2485              		
 2486              	@ 0 "" 2
 2487              	.LVL223:
 2488              		.loc 1 1439 22 view .LVU704
1440:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName = sName;
 2489              		.loc 1 1440 5 view .LVU705
 2490              		.loc 1 1440 40 is_stmt 0 view .LVU706
 2491              		.thumb
 2492              		.syntax unified
 2493 0020 0134     		adds	r4, r4, #1
 2494              	.LVL224:
 2495              		.loc 1 1440 40 view .LVU707
 2496 0022 04EB4404 		add	r4, r4, r4, lsl #1
 2497              	.LVL225:
 2498              		.loc 1 1440 40 view .LVU708
 2499 0026 064A     		ldr	r2, .L170
 2500 0028 42F83450 		str	r5, [r2, r4, lsl #3]
1441:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2501              		.loc 1 1441 5 is_stmt 1 view .LVU709
 2502              		.syntax unified
 2503              	@ 1441 "Core/Src/SEGGER_RTT.c" 1
 2504 002c 83F31188 		msr   basepri, r3  
 2505              		
 2506              	@ 0 "" 2
 2507              		.thumb
 2508              		.syntax unified
 2509              	.LBE14:
 2510              		.loc 1 1441 24 view .LVU710
1442:Core/Src/SEGGER_RTT.c ****     r =  0;
 2511              		.loc 1 1442 5 view .LVU711
 2512              	.LVL226:
 2513              		.loc 1 1442 7 is_stmt 0 view .LVU712
 2514 0030 0020     		movs	r0, #0
 2515              	.LVL227:
 2516              	.L164:
1443:Core/Src/SEGGER_RTT.c ****   } else {
1444:Core/Src/SEGGER_RTT.c ****     r = -1;
1445:Core/Src/SEGGER_RTT.c ****   }
1446:Core/Src/SEGGER_RTT.c ****   return r;
1447:Core/Src/SEGGER_RTT.c **** }
 2517              		.loc 1 1447 1 view .LVU713
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 74


 2518 0032 38BD     		pop	{r3, r4, r5, pc}
 2519              	.LVL228:
 2520              	.L169:
1437:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2521              		.loc 1 1437 3 is_stmt 1 discriminator 1 view .LVU714
 2522 0034 FFF7FEFF 		bl	_DoInit
 2523              	.LVL229:
1437:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2524              		.loc 1 1437 3 is_stmt 0 discriminator 1 view .LVU715
 2525 0038 E8E7     		b	.L165
 2526              	.L167:
1444:Core/Src/SEGGER_RTT.c ****   }
 2527              		.loc 1 1444 7 view .LVU716
 2528 003a 4FF0FF30 		mov	r0, #-1
 2529              	.LVL230:
1446:Core/Src/SEGGER_RTT.c **** }
 2530              		.loc 1 1446 3 is_stmt 1 view .LVU717
1446:Core/Src/SEGGER_RTT.c **** }
 2531              		.loc 1 1446 10 is_stmt 0 view .LVU718
 2532 003e F8E7     		b	.L164
 2533              	.L171:
 2534              		.align	2
 2535              	.L170:
 2536 0040 00000000 		.word	.LANCHOR1
 2537              		.cfi_endproc
 2538              	.LFE23:
 2540              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 2541              		.align	1
 2542              		.global	SEGGER_RTT_SetNameDownBuffer
 2543              		.syntax unified
 2544              		.thumb
 2545              		.thumb_func
 2546              		.fpu fpv4-sp-d16
 2548              	SEGGER_RTT_SetNameDownBuffer:
 2549              	.LVL231:
 2550              	.LFB24:
1448:Core/Src/SEGGER_RTT.c **** 
1449:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1450:Core/Src/SEGGER_RTT.c **** *
1451:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1452:Core/Src/SEGGER_RTT.c **** *
1453:Core/Src/SEGGER_RTT.c **** *  Function description
1454:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1455:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1456:Core/Src/SEGGER_RTT.c **** *
1457:Core/Src/SEGGER_RTT.c **** *  Parameters
1458:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1459:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1460:Core/Src/SEGGER_RTT.c **** *
1461:Core/Src/SEGGER_RTT.c **** *  Return value
1462:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1463:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1464:Core/Src/SEGGER_RTT.c **** */
1465:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 2551              		.loc 1 1465 75 is_stmt 1 view -0
 2552              		.cfi_startproc
 2553              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 75


 2554              		@ frame_needed = 0, uses_anonymous_args = 0
 2555              		.loc 1 1465 75 is_stmt 0 view .LVU720
 2556 0000 38B5     		push	{r3, r4, r5, lr}
 2557              	.LCFI27:
 2558              		.cfi_def_cfa_offset 16
 2559              		.cfi_offset 3, -16
 2560              		.cfi_offset 4, -12
 2561              		.cfi_offset 5, -8
 2562              		.cfi_offset 14, -4
 2563 0002 0446     		mov	r4, r0
 2564 0004 0D46     		mov	r5, r1
1466:Core/Src/SEGGER_RTT.c ****   int r;
 2565              		.loc 1 1466 3 is_stmt 1 view .LVU721
1467:Core/Src/SEGGER_RTT.c **** 
1468:Core/Src/SEGGER_RTT.c ****   INIT();
 2566              		.loc 1 1468 3 view .LVU722
 2567              		.loc 1 1468 3 view .LVU723
 2568 0006 0E4B     		ldr	r3, .L178
 2569 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2570 000a 9BB1     		cbz	r3, .L177
 2571              	.LVL232:
 2572              	.L173:
 2573              		.loc 1 1468 3 discriminator 3 view .LVU724
1469:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2574              		.loc 1 1469 3 discriminator 3 view .LVU725
 2575              		.loc 1 1469 42 is_stmt 0 discriminator 3 view .LVU726
 2576 000c 0C4B     		ldr	r3, .L178
 2577 000e 5B69     		ldr	r3, [r3, #20]
 2578              		.loc 1 1469 6 discriminator 3 view .LVU727
 2579 0010 A342     		cmp	r3, r4
 2580 0012 12D9     		bls	.L175
 2581              	.LBB15:
1470:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2582              		.loc 1 1470 5 is_stmt 1 view .LVU728
 2583              		.loc 1 1470 5 view .LVU729
 2584              		.syntax unified
 2585              	@ 1470 "Core/Src/SEGGER_RTT.c" 1
 2586 0014 EFF31183 		mrs   r3, basepri  
 2587 0018 4FF02001 		mov   r1, #32       
 2588 001c 81F31188 		msr   basepri, r1  
 2589              		
 2590              	@ 0 "" 2
 2591              	.LVL233:
 2592              		.loc 1 1470 22 view .LVU730
1471:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName = sName;
 2593              		.loc 1 1471 5 view .LVU731
 2594              		.loc 1 1471 42 is_stmt 0 view .LVU732
 2595              		.thumb
 2596              		.syntax unified
 2597 0020 04EB4404 		add	r4, r4, r4, lsl #1
 2598              	.LVL234:
 2599              		.loc 1 1471 42 view .LVU733
 2600 0024 0648     		ldr	r0, .L178
 2601 0026 00EBC404 		add	r4, r0, r4, lsl #3
 2602 002a 2566     		str	r5, [r4, #96]
1472:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2603              		.loc 1 1472 5 is_stmt 1 view .LVU734
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 76


 2604              		.syntax unified
 2605              	@ 1472 "Core/Src/SEGGER_RTT.c" 1
 2606 002c 83F31188 		msr   basepri, r3  
 2607              		
 2608              	@ 0 "" 2
 2609              		.thumb
 2610              		.syntax unified
 2611              	.LBE15:
 2612              		.loc 1 1472 24 view .LVU735
1473:Core/Src/SEGGER_RTT.c ****     r =  0;
 2613              		.loc 1 1473 5 view .LVU736
 2614              	.LVL235:
 2615              		.loc 1 1473 7 is_stmt 0 view .LVU737
 2616 0030 0020     		movs	r0, #0
 2617              	.LVL236:
 2618              	.L172:
1474:Core/Src/SEGGER_RTT.c ****   } else {
1475:Core/Src/SEGGER_RTT.c ****     r = -1;
1476:Core/Src/SEGGER_RTT.c ****   }
1477:Core/Src/SEGGER_RTT.c ****   return r;
1478:Core/Src/SEGGER_RTT.c **** }
 2619              		.loc 1 1478 1 view .LVU738
 2620 0032 38BD     		pop	{r3, r4, r5, pc}
 2621              	.LVL237:
 2622              	.L177:
1468:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2623              		.loc 1 1468 3 is_stmt 1 discriminator 1 view .LVU739
 2624 0034 FFF7FEFF 		bl	_DoInit
 2625              	.LVL238:
1468:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2626              		.loc 1 1468 3 is_stmt 0 discriminator 1 view .LVU740
 2627 0038 E8E7     		b	.L173
 2628              	.L175:
1475:Core/Src/SEGGER_RTT.c ****   }
 2629              		.loc 1 1475 7 view .LVU741
 2630 003a 4FF0FF30 		mov	r0, #-1
 2631              	.LVL239:
1477:Core/Src/SEGGER_RTT.c **** }
 2632              		.loc 1 1477 3 is_stmt 1 view .LVU742
1477:Core/Src/SEGGER_RTT.c **** }
 2633              		.loc 1 1477 10 is_stmt 0 view .LVU743
 2634 003e F8E7     		b	.L172
 2635              	.L179:
 2636              		.align	2
 2637              	.L178:
 2638 0040 00000000 		.word	.LANCHOR1
 2639              		.cfi_endproc
 2640              	.LFE24:
 2642              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 2643              		.align	1
 2644              		.global	SEGGER_RTT_SetFlagsUpBuffer
 2645              		.syntax unified
 2646              		.thumb
 2647              		.thumb_func
 2648              		.fpu fpv4-sp-d16
 2650              	SEGGER_RTT_SetFlagsUpBuffer:
 2651              	.LVL240:
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 77


 2652              	.LFB25:
1479:Core/Src/SEGGER_RTT.c **** 
1480:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1481:Core/Src/SEGGER_RTT.c **** *
1482:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1483:Core/Src/SEGGER_RTT.c **** *
1484:Core/Src/SEGGER_RTT.c **** *  Function description
1485:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1486:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1487:Core/Src/SEGGER_RTT.c **** *
1488:Core/Src/SEGGER_RTT.c **** *  Parameters
1489:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1490:Core/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1491:Core/Src/SEGGER_RTT.c **** *
1492:Core/Src/SEGGER_RTT.c **** *  Return value
1493:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1494:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1495:Core/Src/SEGGER_RTT.c **** */
1496:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 2653              		.loc 1 1496 71 is_stmt 1 view -0
 2654              		.cfi_startproc
 2655              		@ args = 0, pretend = 0, frame = 0
 2656              		@ frame_needed = 0, uses_anonymous_args = 0
 2657              		.loc 1 1496 71 is_stmt 0 view .LVU745
 2658 0000 38B5     		push	{r3, r4, r5, lr}
 2659              	.LCFI28:
 2660              		.cfi_def_cfa_offset 16
 2661              		.cfi_offset 3, -16
 2662              		.cfi_offset 4, -12
 2663              		.cfi_offset 5, -8
 2664              		.cfi_offset 14, -4
 2665 0002 0446     		mov	r4, r0
 2666 0004 0D46     		mov	r5, r1
1497:Core/Src/SEGGER_RTT.c ****   int r;
 2667              		.loc 1 1497 3 is_stmt 1 view .LVU746
1498:Core/Src/SEGGER_RTT.c **** 
1499:Core/Src/SEGGER_RTT.c ****   INIT();
 2668              		.loc 1 1499 3 view .LVU747
 2669              		.loc 1 1499 3 view .LVU748
 2670 0006 0E4B     		ldr	r3, .L186
 2671 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2672 000a 9BB1     		cbz	r3, .L185
 2673              	.LVL241:
 2674              	.L181:
 2675              		.loc 1 1499 3 discriminator 3 view .LVU749
1500:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2676              		.loc 1 1500 3 discriminator 3 view .LVU750
 2677              		.loc 1 1500 42 is_stmt 0 discriminator 3 view .LVU751
 2678 000c 0C4B     		ldr	r3, .L186
 2679 000e 1B69     		ldr	r3, [r3, #16]
 2680              		.loc 1 1500 6 discriminator 3 view .LVU752
 2681 0010 A342     		cmp	r3, r4
 2682 0012 12D9     		bls	.L183
 2683              	.LBB16:
1501:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2684              		.loc 1 1501 5 is_stmt 1 view .LVU753
 2685              		.loc 1 1501 5 view .LVU754
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 78


 2686              		.syntax unified
 2687              	@ 1501 "Core/Src/SEGGER_RTT.c" 1
 2688 0014 EFF31183 		mrs   r3, basepri  
 2689 0018 4FF02001 		mov   r1, #32       
 2690 001c 81F31188 		msr   basepri, r1  
 2691              		
 2692              	@ 0 "" 2
 2693              	.LVL242:
 2694              		.loc 1 1501 22 view .LVU755
1502:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags = Flags;
 2695              		.loc 1 1502 5 view .LVU756
 2696              		.loc 1 1502 40 is_stmt 0 view .LVU757
 2697              		.thumb
 2698              		.syntax unified
 2699 0020 04EB4404 		add	r4, r4, r4, lsl #1
 2700              	.LVL243:
 2701              		.loc 1 1502 40 view .LVU758
 2702 0024 0648     		ldr	r0, .L186
 2703 0026 00EBC404 		add	r4, r0, r4, lsl #3
 2704 002a E562     		str	r5, [r4, #44]
1503:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2705              		.loc 1 1503 5 is_stmt 1 view .LVU759
 2706              		.syntax unified
 2707              	@ 1503 "Core/Src/SEGGER_RTT.c" 1
 2708 002c 83F31188 		msr   basepri, r3  
 2709              		
 2710              	@ 0 "" 2
 2711              		.thumb
 2712              		.syntax unified
 2713              	.LBE16:
 2714              		.loc 1 1503 24 view .LVU760
1504:Core/Src/SEGGER_RTT.c ****     r =  0;
 2715              		.loc 1 1504 5 view .LVU761
 2716              	.LVL244:
 2717              		.loc 1 1504 7 is_stmt 0 view .LVU762
 2718 0030 0020     		movs	r0, #0
 2719              	.LVL245:
 2720              	.L180:
1505:Core/Src/SEGGER_RTT.c ****   } else {
1506:Core/Src/SEGGER_RTT.c ****     r = -1;
1507:Core/Src/SEGGER_RTT.c ****   }
1508:Core/Src/SEGGER_RTT.c ****   return r;
1509:Core/Src/SEGGER_RTT.c **** }
 2721              		.loc 1 1509 1 view .LVU763
 2722 0032 38BD     		pop	{r3, r4, r5, pc}
 2723              	.LVL246:
 2724              	.L185:
1499:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2725              		.loc 1 1499 3 is_stmt 1 discriminator 1 view .LVU764
 2726 0034 FFF7FEFF 		bl	_DoInit
 2727              	.LVL247:
1499:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2728              		.loc 1 1499 3 is_stmt 0 discriminator 1 view .LVU765
 2729 0038 E8E7     		b	.L181
 2730              	.L183:
1506:Core/Src/SEGGER_RTT.c ****   }
 2731              		.loc 1 1506 7 view .LVU766
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 79


 2732 003a 4FF0FF30 		mov	r0, #-1
 2733              	.LVL248:
1508:Core/Src/SEGGER_RTT.c **** }
 2734              		.loc 1 1508 3 is_stmt 1 view .LVU767
1508:Core/Src/SEGGER_RTT.c **** }
 2735              		.loc 1 1508 10 is_stmt 0 view .LVU768
 2736 003e F8E7     		b	.L180
 2737              	.L187:
 2738              		.align	2
 2739              	.L186:
 2740 0040 00000000 		.word	.LANCHOR1
 2741              		.cfi_endproc
 2742              	.LFE25:
 2744              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 2745              		.align	1
 2746              		.global	SEGGER_RTT_SetFlagsDownBuffer
 2747              		.syntax unified
 2748              		.thumb
 2749              		.thumb_func
 2750              		.fpu fpv4-sp-d16
 2752              	SEGGER_RTT_SetFlagsDownBuffer:
 2753              	.LVL249:
 2754              	.LFB26:
1510:Core/Src/SEGGER_RTT.c **** 
1511:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1512:Core/Src/SEGGER_RTT.c **** *
1513:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1514:Core/Src/SEGGER_RTT.c **** *
1515:Core/Src/SEGGER_RTT.c **** *  Function description
1516:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1517:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1518:Core/Src/SEGGER_RTT.c **** *
1519:Core/Src/SEGGER_RTT.c **** *  Parameters
1520:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1521:Core/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1522:Core/Src/SEGGER_RTT.c **** *
1523:Core/Src/SEGGER_RTT.c **** *  Return value
1524:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1525:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1526:Core/Src/SEGGER_RTT.c **** */
1527:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 2755              		.loc 1 1527 73 is_stmt 1 view -0
 2756              		.cfi_startproc
 2757              		@ args = 0, pretend = 0, frame = 0
 2758              		@ frame_needed = 0, uses_anonymous_args = 0
 2759              		.loc 1 1527 73 is_stmt 0 view .LVU770
 2760 0000 38B5     		push	{r3, r4, r5, lr}
 2761              	.LCFI29:
 2762              		.cfi_def_cfa_offset 16
 2763              		.cfi_offset 3, -16
 2764              		.cfi_offset 4, -12
 2765              		.cfi_offset 5, -8
 2766              		.cfi_offset 14, -4
 2767 0002 0446     		mov	r4, r0
 2768 0004 0D46     		mov	r5, r1
1528:Core/Src/SEGGER_RTT.c ****   int r;
 2769              		.loc 1 1528 3 is_stmt 1 view .LVU771
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 80


1529:Core/Src/SEGGER_RTT.c **** 
1530:Core/Src/SEGGER_RTT.c ****   INIT();
 2770              		.loc 1 1530 3 view .LVU772
 2771              		.loc 1 1530 3 view .LVU773
 2772 0006 0E4B     		ldr	r3, .L194
 2773 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2774 000a 9BB1     		cbz	r3, .L193
 2775              	.LVL250:
 2776              	.L189:
 2777              		.loc 1 1530 3 discriminator 3 view .LVU774
1531:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2778              		.loc 1 1531 3 discriminator 3 view .LVU775
 2779              		.loc 1 1531 42 is_stmt 0 discriminator 3 view .LVU776
 2780 000c 0C4B     		ldr	r3, .L194
 2781 000e 5B69     		ldr	r3, [r3, #20]
 2782              		.loc 1 1531 6 discriminator 3 view .LVU777
 2783 0010 A342     		cmp	r3, r4
 2784 0012 12D9     		bls	.L191
 2785              	.LBB17:
1532:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2786              		.loc 1 1532 5 is_stmt 1 view .LVU778
 2787              		.loc 1 1532 5 view .LVU779
 2788              		.syntax unified
 2789              	@ 1532 "Core/Src/SEGGER_RTT.c" 1
 2790 0014 EFF31183 		mrs   r3, basepri  
 2791 0018 4FF02001 		mov   r1, #32       
 2792 001c 81F31188 		msr   basepri, r1  
 2793              		
 2794              	@ 0 "" 2
 2795              	.LVL251:
 2796              		.loc 1 1532 22 view .LVU780
1533:Core/Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags = Flags;
 2797              		.loc 1 1533 5 view .LVU781
 2798              		.loc 1 1533 42 is_stmt 0 view .LVU782
 2799              		.thumb
 2800              		.syntax unified
 2801 0020 04EB4404 		add	r4, r4, r4, lsl #1
 2802              	.LVL252:
 2803              		.loc 1 1533 42 view .LVU783
 2804 0024 0648     		ldr	r0, .L194
 2805 0026 00EBC404 		add	r4, r0, r4, lsl #3
 2806 002a 6567     		str	r5, [r4, #116]
1534:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2807              		.loc 1 1534 5 is_stmt 1 view .LVU784
 2808              		.syntax unified
 2809              	@ 1534 "Core/Src/SEGGER_RTT.c" 1
 2810 002c 83F31188 		msr   basepri, r3  
 2811              		
 2812              	@ 0 "" 2
 2813              		.thumb
 2814              		.syntax unified
 2815              	.LBE17:
 2816              		.loc 1 1534 24 view .LVU785
1535:Core/Src/SEGGER_RTT.c ****     r =  0;
 2817              		.loc 1 1535 5 view .LVU786
 2818              	.LVL253:
 2819              		.loc 1 1535 7 is_stmt 0 view .LVU787
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 81


 2820 0030 0020     		movs	r0, #0
 2821              	.LVL254:
 2822              	.L188:
1536:Core/Src/SEGGER_RTT.c ****   } else {
1537:Core/Src/SEGGER_RTT.c ****     r = -1;
1538:Core/Src/SEGGER_RTT.c ****   }
1539:Core/Src/SEGGER_RTT.c ****   return r;
1540:Core/Src/SEGGER_RTT.c **** }
 2823              		.loc 1 1540 1 view .LVU788
 2824 0032 38BD     		pop	{r3, r4, r5, pc}
 2825              	.LVL255:
 2826              	.L193:
1530:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2827              		.loc 1 1530 3 is_stmt 1 discriminator 1 view .LVU789
 2828 0034 FFF7FEFF 		bl	_DoInit
 2829              	.LVL256:
1530:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2830              		.loc 1 1530 3 is_stmt 0 discriminator 1 view .LVU790
 2831 0038 E8E7     		b	.L189
 2832              	.L191:
1537:Core/Src/SEGGER_RTT.c ****   }
 2833              		.loc 1 1537 7 view .LVU791
 2834 003a 4FF0FF30 		mov	r0, #-1
 2835              	.LVL257:
1539:Core/Src/SEGGER_RTT.c **** }
 2836              		.loc 1 1539 3 is_stmt 1 view .LVU792
1539:Core/Src/SEGGER_RTT.c **** }
 2837              		.loc 1 1539 10 is_stmt 0 view .LVU793
 2838 003e F8E7     		b	.L188
 2839              	.L195:
 2840              		.align	2
 2841              	.L194:
 2842 0040 00000000 		.word	.LANCHOR1
 2843              		.cfi_endproc
 2844              	.LFE26:
 2846              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 2847              		.align	1
 2848              		.global	SEGGER_RTT_Init
 2849              		.syntax unified
 2850              		.thumb
 2851              		.thumb_func
 2852              		.fpu fpv4-sp-d16
 2854              	SEGGER_RTT_Init:
 2855              	.LFB27:
1541:Core/Src/SEGGER_RTT.c **** 
1542:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1543:Core/Src/SEGGER_RTT.c **** *
1544:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1545:Core/Src/SEGGER_RTT.c **** *
1546:Core/Src/SEGGER_RTT.c **** *  Function description
1547:Core/Src/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1548:Core/Src/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1549:Core/Src/SEGGER_RTT.c **** *
1550:Core/Src/SEGGER_RTT.c **** */
1551:Core/Src/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 2856              		.loc 1 1551 29 is_stmt 1 view -0
 2857              		.cfi_startproc
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 82


 2858              		@ args = 0, pretend = 0, frame = 0
 2859              		@ frame_needed = 0, uses_anonymous_args = 0
 2860 0000 08B5     		push	{r3, lr}
 2861              	.LCFI30:
 2862              		.cfi_def_cfa_offset 8
 2863              		.cfi_offset 3, -8
 2864              		.cfi_offset 14, -4
1552:Core/Src/SEGGER_RTT.c ****   _DoInit();
 2865              		.loc 1 1552 3 view .LVU795
 2866 0002 FFF7FEFF 		bl	_DoInit
 2867              	.LVL258:
1553:Core/Src/SEGGER_RTT.c **** }
 2868              		.loc 1 1553 1 is_stmt 0 view .LVU796
 2869 0006 08BD     		pop	{r3, pc}
 2870              		.cfi_endproc
 2871              	.LFE27:
 2873              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 2874              		.align	1
 2875              		.global	SEGGER_RTT_SetTerminal
 2876              		.syntax unified
 2877              		.thumb
 2878              		.thumb_func
 2879              		.fpu fpv4-sp-d16
 2881              	SEGGER_RTT_SetTerminal:
 2882              	.LVL259:
 2883              	.LFB28:
1554:Core/Src/SEGGER_RTT.c **** 
1555:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1556:Core/Src/SEGGER_RTT.c **** *
1557:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1558:Core/Src/SEGGER_RTT.c **** *
1559:Core/Src/SEGGER_RTT.c **** *  Function description
1560:Core/Src/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1561:Core/Src/SEGGER_RTT.c **** *
1562:Core/Src/SEGGER_RTT.c **** *  Parameters
1563:Core/Src/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1564:Core/Src/SEGGER_RTT.c **** *
1565:Core/Src/SEGGER_RTT.c **** *  Return value
1566:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1567:Core/Src/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1568:Core/Src/SEGGER_RTT.c **** */
1569:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 2884              		.loc 1 1569 55 is_stmt 1 view -0
 2885              		.cfi_startproc
 2886              		@ args = 0, pretend = 0, frame = 8
 2887              		@ frame_needed = 0, uses_anonymous_args = 0
 2888              		.loc 1 1569 55 is_stmt 0 view .LVU798
 2889 0000 30B5     		push	{r4, r5, lr}
 2890              	.LCFI31:
 2891              		.cfi_def_cfa_offset 12
 2892              		.cfi_offset 4, -12
 2893              		.cfi_offset 5, -8
 2894              		.cfi_offset 14, -4
 2895 0002 83B0     		sub	sp, sp, #12
 2896              	.LCFI32:
 2897              		.cfi_def_cfa_offset 24
 2898 0004 0446     		mov	r4, r0
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 83


1570:Core/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
 2899              		.loc 1 1570 3 is_stmt 1 view .LVU799
1571:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2900              		.loc 1 1571 3 view .LVU800
1572:Core/Src/SEGGER_RTT.c ****   unsigned Avail;
 2901              		.loc 1 1572 3 view .LVU801
1573:Core/Src/SEGGER_RTT.c ****   int r;
 2902              		.loc 1 1573 3 view .LVU802
1574:Core/Src/SEGGER_RTT.c ****   //
1575:Core/Src/SEGGER_RTT.c ****   INIT();
 2903              		.loc 1 1575 3 view .LVU803
 2904              		.loc 1 1575 3 view .LVU804
 2905 0006 1D4B     		ldr	r3, .L209
 2906 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2907 000a FBB1     		cbz	r3, .L206
 2908              	.LVL260:
 2909              	.L199:
 2910              		.loc 1 1575 3 discriminator 3 view .LVU805
1576:Core/Src/SEGGER_RTT.c ****   //
1577:Core/Src/SEGGER_RTT.c ****   r = 0;
 2911              		.loc 1 1577 3 discriminator 3 view .LVU806
1578:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 2912              		.loc 1 1578 3 discriminator 3 view .LVU807
 2913              		.loc 1 1578 9 is_stmt 0 discriminator 3 view .LVU808
 2914 000c FF23     		movs	r3, #255
 2915 000e 8DF80430 		strb	r3, [sp, #4]
1579:Core/Src/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 2916              		.loc 1 1579 3 is_stmt 1 discriminator 3 view .LVU809
 2917              		.loc 1 1579 6 is_stmt 0 discriminator 3 view .LVU810
 2918 0012 0F2C     		cmp	r4, #15
 2919 0014 2FD8     		bhi	.L203
1580:Core/Src/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 2920              		.loc 1 1580 5 is_stmt 1 view .LVU811
 2921              		.loc 1 1580 25 is_stmt 0 view .LVU812
 2922 0016 1A4B     		ldr	r3, .L209+4
 2923 0018 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 2924              		.loc 1 1580 11 view .LVU813
 2925 001a 8DF80530 		strb	r3, [sp, #5]
1581:Core/Src/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];    // Buffer 0 is always reserved for terminal I/O, so we can use 
 2926              		.loc 1 1581 5 is_stmt 1 view .LVU814
 2927              	.LVL261:
 2928              	.LBB18:
1582:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();    // Lock to make sure that no other task is writing into buffer, while we 
 2929              		.loc 1 1582 5 view .LVU815
 2930              		.loc 1 1582 5 view .LVU816
 2931              		.syntax unified
 2932              	@ 1582 "Core/Src/SEGGER_RTT.c" 1
 2933 001e EFF31185 		mrs   r5, basepri  
 2934 0022 4FF02001 		mov   r1, #32       
 2935 0026 81F31188 		msr   basepri, r1  
 2936              		
 2937              	@ 0 "" 2
 2938              	.LVL262:
 2939              		.loc 1 1582 22 view .LVU817
1583:Core/Src/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2940              		.loc 1 1583 5 view .LVU818
 2941              		.loc 1 1583 15 is_stmt 0 view .LVU819
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 84


 2942              		.thumb
 2943              		.syntax unified
 2944 002a 144B     		ldr	r3, .L209
 2945 002c DB6A     		ldr	r3, [r3, #44]
 2946              		.loc 1 1583 23 view .LVU820
 2947 002e 03F00303 		and	r3, r3, #3
 2948              		.loc 1 1583 8 view .LVU821
 2949 0032 022B     		cmp	r3, #2
 2950 0034 0DD0     		beq	.L207
1584:Core/Src/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
1585:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
1586:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1587:Core/Src/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 2951              		.loc 1 1587 7 is_stmt 1 view .LVU822
 2952              		.loc 1 1587 15 is_stmt 0 view .LVU823
 2953 0036 1348     		ldr	r0, .L209+8
 2954 0038 FFF7FEFF 		bl	_GetAvailWriteSpace
 2955              	.LVL263:
1588:Core/Src/SEGGER_RTT.c ****       if (Avail >= 2) {
 2956              		.loc 1 1588 7 is_stmt 1 view .LVU824
 2957              		.loc 1 1588 10 is_stmt 0 view .LVU825
 2958 003c 0128     		cmp	r0, #1
 2959 003e 11D8     		bhi	.L208
1589:Core/Src/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1590:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
1591:Core/Src/SEGGER_RTT.c ****       } else {
1592:Core/Src/SEGGER_RTT.c ****         r = -1;
 2960              		.loc 1 1592 11 view .LVU826
 2961 0040 4FF0FF30 		mov	r0, #-1
 2962              	.LVL264:
 2963              	.L202:
1593:Core/Src/SEGGER_RTT.c ****       }
1594:Core/Src/SEGGER_RTT.c ****     }
1595:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2964              		.loc 1 1595 5 is_stmt 1 view .LVU827
 2965              		.syntax unified
 2966              	@ 1595 "Core/Src/SEGGER_RTT.c" 1
 2967 0044 85F31188 		msr   basepri, r5  
 2968              		
 2969              	@ 0 "" 2
 2970              		.thumb
 2971              		.syntax unified
 2972              	.LBE18:
 2973              		.loc 1 1595 24 view .LVU828
 2974              	.LVL265:
 2975              	.L198:
1596:Core/Src/SEGGER_RTT.c ****   } else {
1597:Core/Src/SEGGER_RTT.c ****     r = -1;
1598:Core/Src/SEGGER_RTT.c ****   }
1599:Core/Src/SEGGER_RTT.c ****   return r;
1600:Core/Src/SEGGER_RTT.c **** }
 2976              		.loc 1 1600 1 is_stmt 0 view .LVU829
 2977 0048 03B0     		add	sp, sp, #12
 2978              	.LCFI33:
 2979              		.cfi_remember_state
 2980              		.cfi_def_cfa_offset 12
 2981              		@ sp needed
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 85


 2982 004a 30BD     		pop	{r4, r5, pc}
 2983              	.LVL266:
 2984              	.L206:
 2985              	.LCFI34:
 2986              		.cfi_restore_state
1575:Core/Src/SEGGER_RTT.c ****   //
 2987              		.loc 1 1575 3 is_stmt 1 discriminator 1 view .LVU830
 2988 004c FFF7FEFF 		bl	_DoInit
 2989              	.LVL267:
1575:Core/Src/SEGGER_RTT.c ****   //
 2990              		.loc 1 1575 3 is_stmt 0 discriminator 1 view .LVU831
 2991 0050 DCE7     		b	.L199
 2992              	.LVL268:
 2993              	.L207:
 2994              	.LBB19:
1584:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 2995              		.loc 1 1584 7 is_stmt 1 view .LVU832
1584:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 2996              		.loc 1 1584 23 is_stmt 0 view .LVU833
 2997 0052 0D4B     		ldr	r3, .L209+12
 2998 0054 1C70     		strb	r4, [r3]
1585:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 2999              		.loc 1 1585 7 is_stmt 1 view .LVU834
 3000 0056 0222     		movs	r2, #2
 3001 0058 01A9     		add	r1, sp, #4
 3002 005a 0A48     		ldr	r0, .L209+8
 3003 005c FFF7FEFF 		bl	_WriteBlocking
 3004              	.LVL269:
 3005              	.LBE19:
1577:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3006              		.loc 1 1577 5 is_stmt 0 view .LVU835
 3007 0060 0020     		movs	r0, #0
 3008              	.LBB20:
 3009 0062 EFE7     		b	.L202
 3010              	.LVL270:
 3011              	.L208:
1589:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3012              		.loc 1 1589 9 is_stmt 1 view .LVU836
1589:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3013              		.loc 1 1589 25 is_stmt 0 view .LVU837
 3014 0064 084B     		ldr	r3, .L209+12
 3015 0066 1C70     		strb	r4, [r3]
1590:Core/Src/SEGGER_RTT.c ****       } else {
 3016              		.loc 1 1590 9 is_stmt 1 view .LVU838
 3017 0068 0222     		movs	r2, #2
 3018 006a 01A9     		add	r1, sp, #4
 3019 006c 0548     		ldr	r0, .L209+8
 3020              	.LVL271:
1590:Core/Src/SEGGER_RTT.c ****       } else {
 3021              		.loc 1 1590 9 is_stmt 0 view .LVU839
 3022 006e FFF7FEFF 		bl	_WriteNoCheck
 3023              	.LVL272:
 3024              	.LBE20:
1577:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3025              		.loc 1 1577 5 view .LVU840
 3026 0072 0020     		movs	r0, #0
 3027              	.LBB21:
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 86


 3028 0074 E6E7     		b	.L202
 3029              	.LVL273:
 3030              	.L203:
1577:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3031              		.loc 1 1577 5 view .LVU841
 3032              	.LBE21:
1597:Core/Src/SEGGER_RTT.c ****   }
 3033              		.loc 1 1597 7 view .LVU842
 3034 0076 4FF0FF30 		mov	r0, #-1
 3035              	.LVL274:
1599:Core/Src/SEGGER_RTT.c **** }
 3036              		.loc 1 1599 3 is_stmt 1 view .LVU843
1599:Core/Src/SEGGER_RTT.c **** }
 3037              		.loc 1 1599 10 is_stmt 0 view .LVU844
 3038 007a E5E7     		b	.L198
 3039              	.L210:
 3040              		.align	2
 3041              	.L209:
 3042 007c 00000000 		.word	.LANCHOR1
 3043 0080 00000000 		.word	.LANCHOR0
 3044 0084 18000000 		.word	.LANCHOR1+24
 3045 0088 00000000 		.word	.LANCHOR4
 3046              		.cfi_endproc
 3047              	.LFE28:
 3049              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3050              		.align	1
 3051              		.global	SEGGER_RTT_TerminalOut
 3052              		.syntax unified
 3053              		.thumb
 3054              		.thumb_func
 3055              		.fpu fpv4-sp-d16
 3057              	SEGGER_RTT_TerminalOut:
 3058              	.LVL275:
 3059              	.LFB29:
1601:Core/Src/SEGGER_RTT.c **** 
1602:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1603:Core/Src/SEGGER_RTT.c **** *
1604:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1605:Core/Src/SEGGER_RTT.c **** *
1606:Core/Src/SEGGER_RTT.c **** *  Function description
1607:Core/Src/SEGGER_RTT.c **** *    Writes a string to the given terminal
1608:Core/Src/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1609:Core/Src/SEGGER_RTT.c **** *
1610:Core/Src/SEGGER_RTT.c **** *  Parameters
1611:Core/Src/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1612:Core/Src/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1613:Core/Src/SEGGER_RTT.c **** *
1614:Core/Src/SEGGER_RTT.c **** *  Return value
1615:Core/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1616:Core/Src/SEGGER_RTT.c **** *     < 0 - Error.
1617:Core/Src/SEGGER_RTT.c **** *
1618:Core/Src/SEGGER_RTT.c **** */
1619:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3060              		.loc 1 1619 70 is_stmt 1 view -0
 3061              		.cfi_startproc
 3062              		@ args = 0, pretend = 0, frame = 0
 3063              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 87


 3064              		.loc 1 1619 70 is_stmt 0 view .LVU846
 3065 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3066              	.LCFI35:
 3067              		.cfi_def_cfa_offset 32
 3068              		.cfi_offset 3, -32
 3069              		.cfi_offset 4, -28
 3070              		.cfi_offset 5, -24
 3071              		.cfi_offset 6, -20
 3072              		.cfi_offset 7, -16
 3073              		.cfi_offset 8, -12
 3074              		.cfi_offset 9, -8
 3075              		.cfi_offset 14, -4
 3076 0004 0446     		mov	r4, r0
 3077 0006 0D46     		mov	r5, r1
1620:Core/Src/SEGGER_RTT.c ****   int                   Status;
 3078              		.loc 1 1620 3 is_stmt 1 view .LVU847
1621:Core/Src/SEGGER_RTT.c ****   unsigned              FragLen;
 3079              		.loc 1 1621 3 view .LVU848
1622:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 3080              		.loc 1 1622 3 view .LVU849
1623:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3081              		.loc 1 1623 3 view .LVU850
1624:Core/Src/SEGGER_RTT.c ****   //
1625:Core/Src/SEGGER_RTT.c ****   INIT();
 3082              		.loc 1 1625 3 view .LVU851
 3083              		.loc 1 1625 3 view .LVU852
 3084 0008 354B     		ldr	r3, .L226
 3085 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3086 000c 03B3     		cbz	r3, .L222
 3087              	.LVL276:
 3088              	.L212:
 3089              		.loc 1 1625 3 discriminator 3 view .LVU853
1626:Core/Src/SEGGER_RTT.c ****   //
1627:Core/Src/SEGGER_RTT.c ****   // Validate terminal ID.
1628:Core/Src/SEGGER_RTT.c ****   //
1629:Core/Src/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3090              		.loc 1 1629 3 discriminator 3 view .LVU854
 3091              		.loc 1 1629 6 is_stmt 0 discriminator 3 view .LVU855
 3092 000e 0F2C     		cmp	r4, #15
 3093 0010 63D8     		bhi	.L217
1630:Core/Src/SEGGER_RTT.c ****     //
1631:Core/Src/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1632:Core/Src/SEGGER_RTT.c ****     //
1633:Core/Src/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];
 3094              		.loc 1 1633 5 is_stmt 1 view .LVU856
 3095              	.LVL277:
1634:Core/Src/SEGGER_RTT.c ****     //
1635:Core/Src/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1636:Core/Src/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1637:Core/Src/SEGGER_RTT.c ****     //
1638:Core/Src/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3096              		.loc 1 1638 5 view .LVU857
 3097              		.loc 1 1638 15 is_stmt 0 view .LVU858
 3098 0012 2846     		mov	r0, r5
 3099 0014 FFF7FEFF 		bl	strlen
 3100              	.LVL278:
 3101 0018 8046     		mov	r8, r0
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 88


 3102              	.LVL279:
 3103              	.LBB22:
1639:Core/Src/SEGGER_RTT.c ****     //
1640:Core/Src/SEGGER_RTT.c ****     // How we output depends upon the mode...
1641:Core/Src/SEGGER_RTT.c ****     //
1642:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3104              		.loc 1 1642 5 is_stmt 1 view .LVU859
 3105              		.loc 1 1642 5 view .LVU860
 3106              		.syntax unified
 3107              	@ 1642 "Core/Src/SEGGER_RTT.c" 1
 3108 001a EFF31186 		mrs   r6, basepri  
 3109 001e 4FF02001 		mov   r1, #32       
 3110 0022 81F31188 		msr   basepri, r1  
 3111              		
 3112              	@ 0 "" 2
 3113              	.LVL280:
 3114              		.loc 1 1642 22 view .LVU861
1643:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3115              		.loc 1 1643 5 view .LVU862
 3116              		.loc 1 1643 13 is_stmt 0 view .LVU863
 3117              		.thumb
 3118              		.syntax unified
 3119 0026 2E4F     		ldr	r7, .L226
 3120 0028 07F11800 		add	r0, r7, #24
 3121              	.LVL281:
 3122              		.loc 1 1643 13 view .LVU864
 3123 002c FFF7FEFF 		bl	_GetAvailWriteSpace
 3124              	.LVL282:
 3125 0030 8146     		mov	r9, r0
 3126              	.LVL283:
1644:Core/Src/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3127              		.loc 1 1644 5 is_stmt 1 view .LVU865
 3128              		.loc 1 1644 18 is_stmt 0 view .LVU866
 3129 0032 FB6A     		ldr	r3, [r7, #44]
 3130              		.loc 1 1644 26 view .LVU867
 3131 0034 03F00303 		and	r3, r3, #3
 3132              		.loc 1 1644 5 view .LVU868
 3133 0038 012B     		cmp	r3, #1
 3134 003a 23D0     		beq	.L214
 3135 003c 022B     		cmp	r3, #2
 3136 003e 3BD0     		beq	.L215
 3137 0040 4BB1     		cbz	r3, .L223
 3138 0042 4FF0FF34 		mov	r4, #-1
 3139              	.LVL284:
 3140              	.L216:
1645:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1646:Core/Src/SEGGER_RTT.c ****       //
1647:Core/Src/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1648:Core/Src/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1649:Core/Src/SEGGER_RTT.c ****       //
1650:Core/Src/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
1651:Core/Src/SEGGER_RTT.c ****         Status = 0;
1652:Core/Src/SEGGER_RTT.c ****       } else {
1653:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1654:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
1655:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1656:Core/Src/SEGGER_RTT.c ****       }
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 89


1657:Core/Src/SEGGER_RTT.c ****       break;
1658:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1659:Core/Src/SEGGER_RTT.c ****       //
1660:Core/Src/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
1661:Core/Src/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
1662:Core/Src/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
1663:Core/Src/SEGGER_RTT.c ****       //
1664:Core/Src/SEGGER_RTT.c ****       if (Avail < 4u) {
1665:Core/Src/SEGGER_RTT.c ****         Status = -1;
1666:Core/Src/SEGGER_RTT.c ****       } else {
1667:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1668:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
1669:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1670:Core/Src/SEGGER_RTT.c ****       }
1671:Core/Src/SEGGER_RTT.c ****       break;
1672:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1673:Core/Src/SEGGER_RTT.c ****       //
1674:Core/Src/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
1675:Core/Src/SEGGER_RTT.c ****       //
1676:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
1677:Core/Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
1678:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
1679:Core/Src/SEGGER_RTT.c ****       break;
1680:Core/Src/SEGGER_RTT.c ****     default:
1681:Core/Src/SEGGER_RTT.c ****       Status = -1;
1682:Core/Src/SEGGER_RTT.c ****       break;
1683:Core/Src/SEGGER_RTT.c ****     }
1684:Core/Src/SEGGER_RTT.c ****     //
1685:Core/Src/SEGGER_RTT.c ****     // Finish up.
1686:Core/Src/SEGGER_RTT.c ****     //
1687:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3141              		.loc 1 1687 5 is_stmt 1 view .LVU869
 3142              		.syntax unified
 3143              	@ 1687 "Core/Src/SEGGER_RTT.c" 1
 3144 0046 86F31188 		msr   basepri, r6  
 3145              		
 3146              	@ 0 "" 2
 3147              		.thumb
 3148              		.syntax unified
 3149              	.LBE22:
 3150              		.loc 1 1687 24 view .LVU870
 3151              	.LVL285:
 3152              	.L211:
1688:Core/Src/SEGGER_RTT.c ****   } else {
1689:Core/Src/SEGGER_RTT.c ****     Status = -1;
1690:Core/Src/SEGGER_RTT.c ****   }
1691:Core/Src/SEGGER_RTT.c ****   return Status;
1692:Core/Src/SEGGER_RTT.c **** }
 3153              		.loc 1 1692 1 is_stmt 0 view .LVU871
 3154 004a 2046     		mov	r0, r4
 3155 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3156              	.LVL286:
 3157              	.L222:
1625:Core/Src/SEGGER_RTT.c ****   //
 3158              		.loc 1 1625 3 is_stmt 1 discriminator 1 view .LVU872
 3159 0050 FFF7FEFF 		bl	_DoInit
 3160              	.LVL287:
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 90


1625:Core/Src/SEGGER_RTT.c ****   //
 3161              		.loc 1 1625 3 is_stmt 0 discriminator 1 view .LVU873
 3162 0054 DBE7     		b	.L212
 3163              	.LVL288:
 3164              	.L223:
 3165              	.LBB23:
1650:Core/Src/SEGGER_RTT.c ****         Status = 0;
 3166              		.loc 1 1650 7 is_stmt 1 view .LVU874
1650:Core/Src/SEGGER_RTT.c ****         Status = 0;
 3167              		.loc 1 1650 28 is_stmt 0 view .LVU875
 3168 0056 08F10403 		add	r3, r8, #4
1650:Core/Src/SEGGER_RTT.c ****         Status = 0;
 3169              		.loc 1 1650 10 view .LVU876
 3170 005a 8342     		cmp	r3, r0
 3171 005c 01D9     		bls	.L224
1651:Core/Src/SEGGER_RTT.c ****       } else {
 3172              		.loc 1 1651 16 view .LVU877
 3173 005e 0024     		movs	r4, #0
 3174 0060 F1E7     		b	.L216
 3175              	.L224:
1653:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3176              		.loc 1 1653 9 is_stmt 1 view .LVU878
 3177 0062 1837     		adds	r7, r7, #24
 3178 0064 2146     		mov	r1, r4
 3179 0066 3846     		mov	r0, r7
 3180              	.LVL289:
1653:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3181              		.loc 1 1653 9 is_stmt 0 view .LVU879
 3182 0068 FFF7FEFF 		bl	_PostTerminalSwitch
 3183              	.LVL290:
1654:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3184              		.loc 1 1654 9 is_stmt 1 view .LVU880
1654:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3185              		.loc 1 1654 23 is_stmt 0 view .LVU881
 3186 006c 4246     		mov	r2, r8
 3187 006e 2946     		mov	r1, r5
 3188 0070 3846     		mov	r0, r7
 3189 0072 FFF7FEFF 		bl	_WriteBlocking
 3190              	.LVL291:
 3191 0076 0446     		mov	r4, r0
 3192              	.LVL292:
1655:Core/Src/SEGGER_RTT.c ****       }
 3193              		.loc 1 1655 9 is_stmt 1 view .LVU882
 3194 0078 1A4B     		ldr	r3, .L226+4
 3195 007a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3196 007c 3846     		mov	r0, r7
 3197              	.LVL293:
1655:Core/Src/SEGGER_RTT.c ****       }
 3198              		.loc 1 1655 9 is_stmt 0 view .LVU883
 3199 007e FFF7FEFF 		bl	_PostTerminalSwitch
 3200              	.LVL294:
 3201 0082 E0E7     		b	.L216
 3202              	.LVL295:
 3203              	.L214:
1664:Core/Src/SEGGER_RTT.c ****         Status = -1;
 3204              		.loc 1 1664 7 is_stmt 1 view .LVU884
1664:Core/Src/SEGGER_RTT.c ****         Status = -1;
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 91


 3205              		.loc 1 1664 10 is_stmt 0 view .LVU885
 3206 0084 0328     		cmp	r0, #3
 3207 0086 02D8     		bhi	.L225
1665:Core/Src/SEGGER_RTT.c ****       } else {
 3208              		.loc 1 1665 16 view .LVU886
 3209 0088 4FF0FF34 		mov	r4, #-1
 3210 008c DBE7     		b	.L216
 3211              	.L225:
1667:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3212              		.loc 1 1667 9 is_stmt 1 view .LVU887
 3213 008e 164F     		ldr	r7, .L226+8
 3214 0090 2146     		mov	r1, r4
 3215 0092 3846     		mov	r0, r7
 3216              	.LVL296:
1667:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3217              		.loc 1 1667 9 is_stmt 0 view .LVU888
 3218 0094 FFF7FEFF 		bl	_PostTerminalSwitch
 3219              	.LVL297:
1668:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3220              		.loc 1 1668 9 is_stmt 1 view .LVU889
1668:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3221              		.loc 1 1668 66 is_stmt 0 view .LVU890
 3222 0098 A9F10402 		sub	r2, r9, #4
1668:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3223              		.loc 1 1668 23 view .LVU891
 3224 009c 4245     		cmp	r2, r8
 3225 009e 28BF     		it	cs
 3226 00a0 4246     		movcs	r2, r8
 3227 00a2 2946     		mov	r1, r5
 3228 00a4 3846     		mov	r0, r7
 3229 00a6 FFF7FEFF 		bl	_WriteBlocking
 3230              	.LVL298:
 3231 00aa 0446     		mov	r4, r0
 3232              	.LVL299:
1669:Core/Src/SEGGER_RTT.c ****       }
 3233              		.loc 1 1669 9 is_stmt 1 view .LVU892
 3234 00ac 0D4B     		ldr	r3, .L226+4
 3235 00ae 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3236 00b0 3846     		mov	r0, r7
 3237              	.LVL300:
1669:Core/Src/SEGGER_RTT.c ****       }
 3238              		.loc 1 1669 9 is_stmt 0 view .LVU893
 3239 00b2 FFF7FEFF 		bl	_PostTerminalSwitch
 3240              	.LVL301:
 3241 00b6 C6E7     		b	.L216
 3242              	.LVL302:
 3243              	.L215:
1676:Core/Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3244              		.loc 1 1676 7 is_stmt 1 view .LVU894
 3245 00b8 0B4F     		ldr	r7, .L226+8
 3246 00ba 2146     		mov	r1, r4
 3247 00bc 3846     		mov	r0, r7
 3248              	.LVL303:
1676:Core/Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3249              		.loc 1 1676 7 is_stmt 0 view .LVU895
 3250 00be FFF7FEFF 		bl	_PostTerminalSwitch
 3251              	.LVL304:
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 92


1677:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3252              		.loc 1 1677 7 is_stmt 1 view .LVU896
1677:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3253              		.loc 1 1677 21 is_stmt 0 view .LVU897
 3254 00c2 4246     		mov	r2, r8
 3255 00c4 2946     		mov	r1, r5
 3256 00c6 3846     		mov	r0, r7
 3257 00c8 FFF7FEFF 		bl	_WriteBlocking
 3258              	.LVL305:
 3259 00cc 0446     		mov	r4, r0
 3260              	.LVL306:
1678:Core/Src/SEGGER_RTT.c ****       break;
 3261              		.loc 1 1678 7 is_stmt 1 view .LVU898
 3262 00ce 054B     		ldr	r3, .L226+4
 3263 00d0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3264 00d2 3846     		mov	r0, r7
 3265              	.LVL307:
1678:Core/Src/SEGGER_RTT.c ****       break;
 3266              		.loc 1 1678 7 is_stmt 0 view .LVU899
 3267 00d4 FFF7FEFF 		bl	_PostTerminalSwitch
 3268              	.LVL308:
1679:Core/Src/SEGGER_RTT.c ****     default:
 3269              		.loc 1 1679 7 is_stmt 1 view .LVU900
 3270 00d8 B5E7     		b	.L216
 3271              	.LVL309:
 3272              	.L217:
1679:Core/Src/SEGGER_RTT.c ****     default:
 3273              		.loc 1 1679 7 is_stmt 0 view .LVU901
 3274              	.LBE23:
1689:Core/Src/SEGGER_RTT.c ****   }
 3275              		.loc 1 1689 12 view .LVU902
 3276 00da 4FF0FF34 		mov	r4, #-1
 3277              	.LVL310:
1691:Core/Src/SEGGER_RTT.c **** }
 3278              		.loc 1 1691 3 is_stmt 1 view .LVU903
1691:Core/Src/SEGGER_RTT.c **** }
 3279              		.loc 1 1691 10 is_stmt 0 view .LVU904
 3280 00de B4E7     		b	.L211
 3281              	.L227:
 3282              		.align	2
 3283              	.L226:
 3284 00e0 00000000 		.word	.LANCHOR1
 3285 00e4 00000000 		.word	.LANCHOR4
 3286 00e8 18000000 		.word	.LANCHOR1+24
 3287              		.cfi_endproc
 3288              	.LFE29:
 3290              		.global	_SEGGER_RTT
 3291              		.section	.bss._ActiveTerminal,"aw",%nobits
 3292              		.set	.LANCHOR4,. + 0
 3295              	_ActiveTerminal:
 3296 0000 00       		.space	1
 3297              		.section	.bss._SEGGER_RTT,"aw",%nobits
 3298              		.align	2
 3299              		.set	.LANCHOR1,. + 0
 3302              	_SEGGER_RTT:
 3303 0000 00000000 		.space	168
 3303      00000000 
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 93


 3303      00000000 
 3303      00000000 
 3303      00000000 
 3304              		.section	.bss._acDownBuffer,"aw",%nobits
 3305              		.align	2
 3306              		.set	.LANCHOR3,. + 0
 3309              	_acDownBuffer:
 3310 0000 00000000 		.space	16
 3310      00000000 
 3310      00000000 
 3310      00000000 
 3311              		.section	.bss._acUpBuffer,"aw",%nobits
 3312              		.align	2
 3313              		.set	.LANCHOR2,. + 0
 3316              	_acUpBuffer:
 3317 0000 00000000 		.space	1024
 3317      00000000 
 3317      00000000 
 3317      00000000 
 3317      00000000 
 3318              		.section	.rodata._aTerminalId,"a"
 3319              		.align	2
 3320              		.set	.LANCHOR0,. + 0
 3323              	_aTerminalId:
 3324 0000 30313233 		.ascii	"0123456789ABCDEF"
 3324      34353637 
 3324      38394142 
 3324      43444546 
 3325              		.text
 3326              	.Letext0:
 3327              		.file 2 "Core/Src/SEGGER_RTT.h"
 3328              		.file 3 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10-2020-q4-m
 3329              		.file 4 "<built-in>"
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 94


DEFINED SYMBOLS
                            *ABS*:00000000 SEGGER_RTT.c
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:18     .text._GetAvailWriteSpace:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:25     .text._GetAvailWriteSpace:00000000 _GetAvailWriteSpace
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:79     .text._WriteNoCheck:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:85     .text._WriteNoCheck:00000000 _WriteNoCheck
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:175    .text._WriteBlocking:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:181    .text._WriteBlocking:00000000 _WriteBlocking
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:320    .text._PostTerminalSwitch:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:326    .text._PostTerminalSwitch:00000000 _PostTerminalSwitch
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:368    .text._PostTerminalSwitch:00000020 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:373    .rodata._DoInit.str1.4:00000000 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:383    .text._DoInit:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:389    .text._DoInit:00000000 _DoInit
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:469    .text._DoInit:0000004c $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:479    .text.SEGGER_RTT_ReadNoLock:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:486    .text.SEGGER_RTT_ReadNoLock:00000000 SEGGER_RTT_ReadNoLock
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:656    .text.SEGGER_RTT_ReadNoLock:0000009c $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:661    .text.SEGGER_RTT_Read:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:668    .text.SEGGER_RTT_Read:00000000 SEGGER_RTT_Read
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:720    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:727    .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 SEGGER_RTT_WriteWithOverwriteNoLock
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:951    .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000010c $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:956    .text.SEGGER_RTT_WriteNoLock:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:963    .text.SEGGER_RTT_WriteNoLock:00000000 SEGGER_RTT_WriteNoLock
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1078   .text.SEGGER_RTT_WriteNoLock:00000068 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1083   .text.SEGGER_RTT_Write:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1090   .text.SEGGER_RTT_Write:00000000 SEGGER_RTT_Write
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1163   .text.SEGGER_RTT_Write:00000030 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1168   .text.SEGGER_RTT_WriteString:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1175   .text.SEGGER_RTT_WriteString:00000000 SEGGER_RTT_WriteString
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1218   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1225   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 SEGGER_RTT_PutCharSkipNoLock
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1319   .text.SEGGER_RTT_PutCharSkipNoLock:0000004c $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1324   .text.SEGGER_RTT_PutCharSkip:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1331   .text.SEGGER_RTT_PutCharSkip:00000000 SEGGER_RTT_PutCharSkip
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1457   .text.SEGGER_RTT_PutCharSkip:0000006c $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1463   .text.SEGGER_RTT_PutChar:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1470   .text.SEGGER_RTT_PutChar:00000000 SEGGER_RTT_PutChar
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1620   .text.SEGGER_RTT_PutChar:0000008c $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1626   .text.SEGGER_RTT_GetKey:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1633   .text.SEGGER_RTT_GetKey:00000000 SEGGER_RTT_GetKey
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1685   .text.SEGGER_RTT_WaitKey:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1692   .text.SEGGER_RTT_WaitKey:00000000 SEGGER_RTT_WaitKey
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1722   .text.SEGGER_RTT_HasKey:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1729   .text.SEGGER_RTT_HasKey:00000000 SEGGER_RTT_HasKey
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1782   .text.SEGGER_RTT_HasKey:00000020 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1787   .text.SEGGER_RTT_HasData:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1794   .text.SEGGER_RTT_HasData:00000000 SEGGER_RTT_HasData
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1825   .text.SEGGER_RTT_HasData:0000001c $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1830   .text.SEGGER_RTT_HasDataUp:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1837   .text.SEGGER_RTT_HasDataUp:00000000 SEGGER_RTT_HasDataUp
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1868   .text.SEGGER_RTT_HasDataUp:0000001c $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1873   .text.SEGGER_RTT_AllocDownBuffer:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:1880   .text.SEGGER_RTT_AllocDownBuffer:00000000 SEGGER_RTT_AllocDownBuffer
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2013   .text.SEGGER_RTT_AllocDownBuffer:00000070 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2019   .text.SEGGER_RTT_AllocUpBuffer:00000000 $t
ARM GAS  C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s 			page 95


C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2026   .text.SEGGER_RTT_AllocUpBuffer:00000000 SEGGER_RTT_AllocUpBuffer
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2164   .text.SEGGER_RTT_AllocUpBuffer:0000007c $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2170   .text.SEGGER_RTT_ConfigUpBuffer:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2177   .text.SEGGER_RTT_ConfigUpBuffer:00000000 SEGGER_RTT_ConfigUpBuffer
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2300   .text.SEGGER_RTT_ConfigUpBuffer:00000070 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2305   .text.SEGGER_RTT_ConfigDownBuffer:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2312   .text.SEGGER_RTT_ConfigDownBuffer:00000000 SEGGER_RTT_ConfigDownBuffer
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2432   .text.SEGGER_RTT_ConfigDownBuffer:00000064 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2437   .text.SEGGER_RTT_SetNameUpBuffer:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2444   .text.SEGGER_RTT_SetNameUpBuffer:00000000 SEGGER_RTT_SetNameUpBuffer
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2536   .text.SEGGER_RTT_SetNameUpBuffer:00000040 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2541   .text.SEGGER_RTT_SetNameDownBuffer:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2548   .text.SEGGER_RTT_SetNameDownBuffer:00000000 SEGGER_RTT_SetNameDownBuffer
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2638   .text.SEGGER_RTT_SetNameDownBuffer:00000040 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2643   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2650   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 SEGGER_RTT_SetFlagsUpBuffer
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2740   .text.SEGGER_RTT_SetFlagsUpBuffer:00000040 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2745   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2752   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 SEGGER_RTT_SetFlagsDownBuffer
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2842   .text.SEGGER_RTT_SetFlagsDownBuffer:00000040 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2847   .text.SEGGER_RTT_Init:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2854   .text.SEGGER_RTT_Init:00000000 SEGGER_RTT_Init
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2874   .text.SEGGER_RTT_SetTerminal:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:2881   .text.SEGGER_RTT_SetTerminal:00000000 SEGGER_RTT_SetTerminal
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3042   .text.SEGGER_RTT_SetTerminal:0000007c $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3050   .text.SEGGER_RTT_TerminalOut:00000000 $t
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3057   .text.SEGGER_RTT_TerminalOut:00000000 SEGGER_RTT_TerminalOut
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3284   .text.SEGGER_RTT_TerminalOut:000000e0 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3302   .bss._SEGGER_RTT:00000000 _SEGGER_RTT
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3295   .bss._ActiveTerminal:00000000 _ActiveTerminal
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3296   .bss._ActiveTerminal:00000000 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3298   .bss._SEGGER_RTT:00000000 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3305   .bss._acDownBuffer:00000000 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3309   .bss._acDownBuffer:00000000 _acDownBuffer
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3312   .bss._acUpBuffer:00000000 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3316   .bss._acUpBuffer:00000000 _acUpBuffer
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3319   .rodata._aTerminalId:00000000 $d
C:\Users\Michael\AppData\Local\Temp\cc3ezBUY.s:3323   .rodata._aTerminalId:00000000 _aTerminalId

UNDEFINED SYMBOLS
memcpy
strlen
